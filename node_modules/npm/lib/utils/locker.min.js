var crypto=require("crypto");var resolve=require("path").resolve;var lockfile=require("lockfile");var log=require("npmlog");var npm=require("../npm.js");var correctMkdir=require("../utils/correct-mkdir.js");var installLocks={};function lockFileName(e,b){var g=b.replace(/[^a-zA-Z0-9]+/g,"-").replace(/^-+|-+$/g,"");var f=resolve(e,b);var d=crypto.createHash("sha1").update(f).digest("hex");var a=resolve(npm.cache,"_locks");return resolve(a,g.substr(0,24)+"-"+d.substr(0,16)+".lock")}function lock(d,b,a){var c=resolve(npm.cache,"_locks");correctMkdir(c,function(g){if(g){return a(g)}var f={stale:npm.config.get("cache-lock-stale"),retries:npm.config.get("cache-lock-retries"),wait:npm.config.get("cache-lock-wait")};var e=lockFileName(d,b);lockfile.lock(e,f,function(h){if(h){log.warn("locking",e,"failed",h)}if(!h){log.verbose("lock","using",e,"for",resolve(d,b));installLocks[e]=true}a(h)})})}function unlock(f,e,a){var d=lockFileName(f,e);var c=installLocks[d];if(c===false){return process.nextTick(a)}else{if(c===true){lockfile.unlock(d,function(g){if(g){log.warn("unlocking",d,"failed",g)}else{installLocks[d]=false;log.verbose("unlock","done using",d,"for",resolve(f,e))}a(g)})}else{var b=new Error("Attempt to unlock "+resolve(f,e)+", which hasn't been locked");b.code="ENOTLOCKED";throw b}}}module.exports={lock:lock,unlock:unlock};