var test=require("tap").test;var mkdirp=require("mkdirp");var fs=require("fs");var path=require("path");var fixtures=path.resolve(__dirname,"fixtures");var cmdShim=require("../");test("no shebang",function(a){var c=path.resolve(fixtures,"from.exe");var b=path.resolve(fixtures,"exe.shim");cmdShim(c,b,function(d){if(d){throw d}a.equal(fs.readFileSync(b,"utf8"),'"$basedir/from.exe"   "$@"\nexit $?\n');a.equal(fs.readFileSync(b+".cmd","utf8"),'@"%~dp0\\from.exe"   %*\r\n');a.end()})});test("env shebang",function(a){var c=path.resolve(fixtures,"from.env");var b=path.resolve(fixtures,"env.shim");cmdShim(c,b,function(d){if(d){throw d}console.error("%j",fs.readFileSync(b,"utf8"));console.error("%j",fs.readFileSync(b+".cmd","utf8"));a.equal(fs.readFileSync(b,"utf8"),'#!/bin/sh\nbasedir=$(dirname "$(echo "$0" | sed -e \'s,\\\\,/,g\')")\n\ncase `uname` in\n    *CYGWIN*) basedir=`cygpath -w "$basedir"`;;\nesac\n\nif [ -x "$basedir/node" ]; then\n  "$basedir/node"  "$basedir/from.env" "$@"\n  ret=$?\nelse \n  node  "$basedir/from.env" "$@"\n  ret=$?\nfi\nexit $ret\n');a.equal(fs.readFileSync(b+".cmd","utf8"),'@IF EXIST "%~dp0\\node.exe" (\r\n  "%~dp0\\node.exe"  "%~dp0\\from.env" %*\r\n) ELSE (\r\n  @SETLOCAL\r\n  @SET PATHEXT=%PATHEXT:;.JS;=;%\r\n  node  "%~dp0\\from.env" %*\r\n)');a.end()})});test("env shebang with args",function(a){var c=path.resolve(fixtures,"from.env.args");var b=path.resolve(fixtures,"env.args.shim");cmdShim(c,b,function(d){if(d){throw d}console.error("%j",fs.readFileSync(b,"utf8"));console.error("%j",fs.readFileSync(b+".cmd","utf8"));a.equal(fs.readFileSync(b,"utf8"),'#!/bin/sh\nbasedir=$(dirname "$(echo "$0" | sed -e \'s,\\\\,/,g\')")\n\ncase `uname` in\n    *CYGWIN*) basedir=`cygpath -w "$basedir"`;;\nesac\n\nif [ -x "$basedir/node" ]; then\n  "$basedir/node"  --expose_gc "$basedir/from.env.args" "$@"\n  ret=$?\nelse \n  node  --expose_gc "$basedir/from.env.args" "$@"\n  ret=$?\nfi\nexit $ret\n');a.equal(fs.readFileSync(b+".cmd","utf8"),'@IF EXIST "%~dp0\\node.exe" (\r\n  "%~dp0\\node.exe"  --expose_gc "%~dp0\\from.env.args" %*\r\n) ELSE (\r\n  @SETLOCAL\r\n  @SET PATHEXT=%PATHEXT:;.JS;=;%\r\n  node  --expose_gc "%~dp0\\from.env.args" %*\r\n)');a.end()})});test("explicit shebang",function(a){var c=path.resolve(fixtures,"from.sh");var b=path.resolve(fixtures,"sh.shim");cmdShim(c,b,function(d){if(d){throw d}console.error("%j",fs.readFileSync(b,"utf8"));console.error("%j",fs.readFileSync(b+".cmd","utf8"));a.equal(fs.readFileSync(b,"utf8"),'#!/bin/sh\nbasedir=$(dirname "$(echo "$0" | sed -e \'s,\\\\,/,g\')")\n\ncase `uname` in\n    *CYGWIN*) basedir=`cygpath -w "$basedir"`;;\nesac\n\nif [ -x "$basedir//usr/bin/sh" ]; then\n  "$basedir//usr/bin/sh"  "$basedir/from.sh" "$@"\n  ret=$?\nelse \n  /usr/bin/sh  "$basedir/from.sh" "$@"\n  ret=$?\nfi\nexit $ret\n');a.equal(fs.readFileSync(b+".cmd","utf8"),'@IF EXIST "%~dp0\\/usr/bin/sh.exe" (\r\n  "%~dp0\\/usr/bin/sh.exe"  "%~dp0\\from.sh" %*\r\n) ELSE (\r\n  @SETLOCAL\r\n  @SET PATHEXT=%PATHEXT:;.JS;=;%\r\n  /usr/bin/sh  "%~dp0\\from.sh" %*\r\n)');a.end()})});test("explicit shebang with args",function(a){var c=path.resolve(fixtures,"from.sh.args");var b=path.resolve(fixtures,"sh.args.shim");cmdShim(c,b,function(d){if(d){throw d}console.error("%j",fs.readFileSync(b,"utf8"));console.error("%j",fs.readFileSync(b+".cmd","utf8"));a.equal(fs.readFileSync(b,"utf8"),'#!/bin/sh\nbasedir=$(dirname "$(echo "$0" | sed -e \'s,\\\\,/,g\')")\n\ncase `uname` in\n    *CYGWIN*) basedir=`cygpath -w "$basedir"`;;\nesac\n\nif [ -x "$basedir//usr/bin/sh" ]; then\n  "$basedir//usr/bin/sh"  -x "$basedir/from.sh.args" "$@"\n  ret=$?\nelse \n  /usr/bin/sh  -x "$basedir/from.sh.args" "$@"\n  ret=$?\nfi\nexit $ret\n');a.equal(fs.readFileSync(b+".cmd","utf8"),'@IF EXIST "%~dp0\\/usr/bin/sh.exe" (\r\n  "%~dp0\\/usr/bin/sh.exe"  -x "%~dp0\\from.sh.args" %*\r\n) ELSE (\r\n  @SETLOCAL\r\n  @SET PATHEXT=%PATHEXT:;.JS;=;%\r\n  /usr/bin/sh  -x "%~dp0\\from.sh.args" %*\r\n)');a.end()})});