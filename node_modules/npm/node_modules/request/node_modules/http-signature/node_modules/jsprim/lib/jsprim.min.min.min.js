var mod_assert=require("assert-plus");var mod_util=require("util");var mod_extsprintf=require("extsprintf");var mod_verror=require("verror");var mod_jsonschema=require("json-schema");exports.deepCopy=deepCopy;exports.deepEqual=deepEqual;exports.isEmpty=isEmpty;exports.hasKey=hasKey;exports.forEachKey=forEachKey;exports.pluck=pluck;exports.flattenObject=flattenObject;exports.flattenIter=flattenIter;exports.validateJsonObject=validateJsonObjectJS;exports.validateJsonObjectJS=validateJsonObjectJS;exports.randElt=randElt;exports.extraProperties=extraProperties;exports.mergeObjects=mergeObjects;exports.startsWith=startsWith;exports.endsWith=endsWith;exports.parseInteger=parseInteger;exports.iso8601=iso8601;exports.rfc1123=rfc1123;exports.parseDateTime=parseDateTime;exports.hrtimediff=hrtimeDiff;exports.hrtimeDiff=hrtimeDiff;exports.hrtimeAccum=hrtimeAccum;exports.hrtimeAdd=hrtimeAdd;exports.hrtimeNanosec=hrtimeNanosec;exports.hrtimeMicrosec=hrtimeMicrosec;exports.hrtimeMillisec=hrtimeMillisec;function deepCopy(b){var d,a;var c="__deepCopy";if(b&&b[c]){throw (new Error("attempted deep copy of cyclic object"))}if(b&&b.constructor==Object){d={};b[c]=true;for(a in b){if(a==c){continue}d[a]=deepCopy(b[a])}delete (b[c]);return(d)}if(b&&b.constructor==Array){d=[];b[c]=true;for(a=0;a<b.length;a++){d.push(deepCopy(b[a]))}delete (b[c]);return(d)}return(b)}function deepEqual(a,c){if(typeof(a)!=typeof(c)){return(false)}if(a===null||c===null||typeof(a)!="object"){return(a===c)}if(a.constructor!=c.constructor){return(false)}var b;for(b in a){if(!c.hasOwnProperty(b)){return(false)}if(!deepEqual(a[b],c[b])){return(false)}}for(b in c){if(!a.hasOwnProperty(b)){return(false)}}return(true)}function isEmpty(b){var a;for(a in b){return(false)}return(true)}function hasKey(b,a){mod_assert.equal(typeof(a),"string");return(Object.prototype.hasOwnProperty.call(b,a))}function forEachKey(c,a){for(var b in c){if(hasKey(c,b)){a(b,c[b])}}}function pluck(b,a){mod_assert.equal(typeof(a),"string");return(pluckv(b,a))}function pluckv(b,d){if(b===null||typeof(b)!=="object"){return(undefined)}if(b.hasOwnProperty(d)){return(b[d])}var c=d.indexOf(".");if(c==-1){return(undefined)}var a=d.substr(0,c);if(!b.hasOwnProperty(a)){return(undefined)}return(pluckv(b[a],d.substr(c+1)))}function flattenIter(b,c,a){doFlattenIter(b,c,[],a)}function doFlattenIter(b,c,e,d){var a;var f;if(c===0){a=e.slice(0);a.push(b);d(a);return}mod_assert.ok(b!==null);mod_assert.equal(typeof(b),"object");mod_assert.equal(typeof(c),"number");mod_assert.ok(c>=0);for(f in b){a=e.slice(0);a.push(f);doFlattenIter(b[f],c-1,a,d)}}function flattenObject(d,a){if(a===0){return([d])}mod_assert.ok(d!==null);mod_assert.equal(typeof(d),"object");mod_assert.equal(typeof(a),"number");mod_assert.ok(a>=0);var b=[];var c;for(c in d){flattenObject(d[c],a-1).forEach(function(e){b.push([c].concat(e))})}return(b)}function startsWith(b,a){return(b.substr(0,a.length)==a)}function endsWith(b,a){return(b.substr(b.length-a.length,a.length)==a)}function iso8601(a){if(typeof(a)=="number"){a=new Date(a)}mod_assert.ok(a.constructor===Date);return(mod_extsprintf.sprintf("%4d-%02d-%02dT%02d:%02d:%02d.%03dZ",a.getUTCFullYear(),a.getUTCMonth()+1,a.getUTCDate(),a.getUTCHours(),a.getUTCMinutes(),a.getUTCSeconds(),a.getUTCMilliseconds()))}var RFC1123_MONTHS=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];var RFC1123_DAYS=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];function rfc1123(a){return(mod_extsprintf.sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",RFC1123_DAYS[a.getUTCDay()],a.getUTCDate(),RFC1123_MONTHS[a.getUTCMonth()],a.getUTCFullYear(),a.getUTCHours(),a.getUTCMinutes(),a.getUTCSeconds()))}function parseDateTime(b){var a=+b;if(!isNaN(a)){return(new Date(a))}else{return(new Date(b))}}var MAX_SAFE_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991;var MIN_SAFE_INTEGER=Number.MIN_SAFE_INTEGER||-9007199254740991;var PI_DEFAULTS={base:10,allowSign:true,allowPrefix:false,allowTrailing:false,allowImprecise:false,trimWhitespace:false,leadingZeroIsOctal:false};var CP_0=48;var CP_9=57;var CP_A=65;var CP_B=66;var CP_O=79;var CP_T=84;var CP_X=88;var CP_Z=90;var CP_a=97;var CP_b=98;var CP_o=111;var CP_t=116;var CP_x=120;var CP_z=122;var PI_CONV_DEC=48;var PI_CONV_UC=55;var PI_CONV_LC=87;function parseInteger(n,d){mod_assert.string(n,"str");mod_assert.optionalObject(d,"options");var h=false;var f=PI_DEFAULTS;if(d){h=hasKey(d,"base");f=mergeObjects(f,d);mod_assert.number(f.base,"options.base");mod_assert.ok(f.base>=2,"options.base >= 2");mod_assert.ok(f.base<=36,"options.base <= 36");mod_assert.bool(f.allowSign,"options.allowSign");mod_assert.bool(f.allowPrefix,"options.allowPrefix");mod_assert.bool(f.allowTrailing,"options.allowTrailing");mod_assert.bool(f.allowImprecise,"options.allowImprecise");mod_assert.bool(f.trimWhitespace,"options.trimWhitespace");mod_assert.bool(f.leadingZeroIsOctal,"options.leadingZeroIsOctal");if(f.leadingZeroIsOctal){mod_assert.ok(!h,'"base" and "leadingZeroIsOctal" are mutually exclusive')}}var m;var k=-1;var i=f.base;var g;var j=1;var b=0;var a=0;var l=n.length;if(f.trimWhitespace){while(a<l&&isSpace(n.charCodeAt(a))){++a}}if(f.allowSign){if(n[a]==="-"){a+=1;j=-1}else{if(n[a]==="+"){a+=1}}}if(n[a]==="0"){if(f.allowPrefix){k=prefixToBase(n.charCodeAt(a+1));if(k!==-1&&(!h||k===i)){i=k;a+=2}}if(k===-1&&f.leadingZeroIsOctal){i=8}}for(g=a;a<l;++a){m=translateDigit(n.charCodeAt(a));if(m!==-1&&m<i){b*=i;b+=m}else{break}}if(g===a){return(new Error("invalid number: "+JSON.stringify(n)))}if(f.trimWhitespace){while(a<l&&isSpace(n.charCodeAt(a))){++a}}if(a<l&&!f.allowTrailing){return(new Error("trailing characters after number: "+JSON.stringify(n.slice(a))))}if(b===0){return(0)}var e=b*j;if(!f.allowImprecise&&(b>MAX_SAFE_INTEGER||e<MIN_SAFE_INTEGER)){return(new Error("number is outside of the supported range: "+JSON.stringify(n.slice(g,a))))}return(e)}function translateDigit(a){if(a>=CP_0&&a<=CP_9){return(a-PI_CONV_DEC)}else{if(a>=CP_A&&a<=CP_Z){return(a-PI_CONV_UC)}else{if(a>=CP_a&&a<=CP_z){return(a-PI_CONV_LC)}else{return(-1)}}}}function isSpace(a){return(a===32)||(a>=9&&a<=13)||(a===160)||(a===5760)||(a===6158)||(a>=8192&&a<=8202)||(a===8232)||(a===8233)||(a===8239)||(a===8287)||(a===12288)||(a===65279)}function prefixToBase(a){if(a===CP_b||a===CP_B){return(2)}else{if(a===CP_o||a===CP_O){return(8)}else{if(a===CP_t||a===CP_T){return(10)}else{if(a===CP_x||a===CP_X){return(16)}else{return(-1)}}}}}function validateJsonObjectJS(c,k){var e=mod_jsonschema.validate(k,c);if(e.errors.length===0){return(null)}var h=e.errors[0];var a=h.property;var g=h.message.toLowerCase();var f,d;if((f=g.indexOf("the property "))!=-1&&(d=g.indexOf(" is not defined in the schema and the schema does not allow additional properties"))!=-1){f+="the property ".length;if(a===""){a=g.substr(f,d-f)}else{a=a+"."+g.substr(f,d-f)}g="unsupported property"}var b=new mod_verror.VError('property "%s": %s',a,g);b.jsv_details=h;return(b)}function randElt(a){mod_assert.ok(Array.isArray(a)&&a.length>0,"randElt argument must be a non-empty array");return(a[Math.floor(Math.random()*a.length)])}function assertHrtime(b){mod_assert.ok(b[0]>=0&&b[1]>=0,"negative numbers not allowed in hrtimes");mod_assert.ok(b[1]<1000000000,"nanoseconds column overflow")}function hrtimeDiff(c,e){assertHrtime(c);assertHrtime(e);mod_assert.ok(c[0]>e[0]||(c[0]==e[0]&&c[1]>=e[1]),"negative differences not allowed");var d=[c[0]-e[0],0];if(c[1]>=e[1]){d[1]=c[1]-e[1]}else{d[0]--;d[1]=1000000000-(e[1]-c[1])}return(d)}function hrtimeNanosec(b){assertHrtime(b);return(Math.floor(b[0]*1000000000+b[1]))}function hrtimeMicrosec(b){assertHrtime(b);return(Math.floor(b[0]*1000000+b[1]/1000))}function hrtimeMillisec(b){assertHrtime(b);return(Math.floor(b[0]*1000+b[1]/1000000))}function hrtimeAccum(d,c){assertHrtime(d);assertHrtime(c);d[1]+=c[1];if(d[1]>=1000000000){d[0]++;d[1]-=1000000000}d[0]+=c[0];return(d)}function hrtimeAdd(c,e){assertHrtime(c);var d=[c[0],c[1]];return(hrtimeAccum(d,e))}function extraProperties(c,a){mod_assert.ok(typeof(c)==="object"&&c!==null,"obj argument must be a non-null object");mod_assert.ok(Array.isArray(a),"allowed argument must be an array of strings");for(var b=0;b<a.length;b++){mod_assert.ok(typeof(a[b])==="string","allowed argument must be an array of strings")}return(Object.keys(c).filter(function(d){return(a.indexOf(d)===-1)}))}function mergeObjects(d,b,a){var c,e;c={};if(a){for(e in a){c[e]=a[e]}}if(d){for(e in d){c[e]=d[e]}}if(b){for(e in b){c[e]=b[e]}}return(c)};