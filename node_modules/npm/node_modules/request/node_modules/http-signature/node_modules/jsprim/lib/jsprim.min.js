var mod_assert=require("assert-plus");var mod_util=require("util");var mod_extsprintf=require("extsprintf");var mod_verror=require("verror");var mod_jsonschema=require("json-schema");exports.deepCopy=deepCopy;exports.deepEqual=deepEqual;exports.isEmpty=isEmpty;exports.hasKey=hasKey;exports.forEachKey=forEachKey;exports.pluck=pluck;exports.flattenObject=flattenObject;exports.flattenIter=flattenIter;exports.validateJsonObject=validateJsonObjectJS;exports.validateJsonObjectJS=validateJsonObjectJS;exports.randElt=randElt;exports.extraProperties=extraProperties;exports.mergeObjects=mergeObjects;exports.startsWith=startsWith;exports.endsWith=endsWith;exports.parseInteger=parseInteger;exports.iso8601=iso8601;exports.rfc1123=rfc1123;exports.parseDateTime=parseDateTime;exports.hrtimediff=hrtimeDiff;exports.hrtimeDiff=hrtimeDiff;exports.hrtimeAccum=hrtimeAccum;exports.hrtimeAdd=hrtimeAdd;exports.hrtimeNanosec=hrtimeNanosec;exports.hrtimeMicrosec=hrtimeMicrosec;exports.hrtimeMillisec=hrtimeMillisec;function deepCopy(d){var b,c;var a="__deepCopy";if(d&&d[a]){throw (new Error("attempted deep copy of cyclic object"))}if(d&&d.constructor==Object){b={};d[a]=true;for(c in d){if(c==a){continue}b[c]=deepCopy(d[c])}delete (d[a]);return(b)}if(d&&d.constructor==Array){b=[];d[a]=true;for(c=0;c<d.length;c++){b.push(deepCopy(d[c]))}delete (d[a]);return(b)}return(d)}function deepEqual(c,b){if(typeof(c)!=typeof(b)){return(false)}if(c===null||b===null||typeof(c)!="object"){return(c===b)}if(c.constructor!=b.constructor){return(false)}var a;for(a in c){if(!b.hasOwnProperty(a)){return(false)}if(!deepEqual(c[a],b[a])){return(false)}}for(a in b){if(!c.hasOwnProperty(a)){return(false)}}return(true)}function isEmpty(b){var a;for(a in b){return(false)}return(true)}function hasKey(b,a){mod_assert.equal(typeof(a),"string");return(Object.prototype.hasOwnProperty.call(b,a))}function forEachKey(b,c){for(var a in b){if(hasKey(b,a)){c(a,b[a])}}}function pluck(b,a){mod_assert.equal(typeof(a),"string");return(pluckv(b,a))}function pluckv(d,b){if(d===null||typeof(d)!=="object"){return(undefined)}if(d.hasOwnProperty(b)){return(d[b])}var a=b.indexOf(".");if(a==-1){return(undefined)}var c=b.substr(0,a);if(!d.hasOwnProperty(c)){return(undefined)}return(pluckv(d[c],b.substr(a+1)))}function flattenIter(a,b,c){doFlattenIter(a,b,[],c)}function doFlattenIter(d,e,a,f){var c;var b;if(e===0){c=a.slice(0);c.push(d);f(c);return}mod_assert.ok(d!==null);mod_assert.equal(typeof(d),"object");mod_assert.equal(typeof(e),"number");mod_assert.ok(e>=0);for(b in d){c=a.slice(0);c.push(b);doFlattenIter(d[b],e-1,c,f)}}function flattenObject(b,c){if(c===0){return([b])}mod_assert.ok(b!==null);mod_assert.equal(typeof(b),"object");mod_assert.equal(typeof(c),"number");mod_assert.ok(c>=0);var d=[];var a;for(a in b){flattenObject(b[a],c-1).forEach(function(e){d.push([a].concat(e))})}return(d)}function startsWith(b,a){return(b.substr(0,a.length)==a)}function endsWith(b,a){return(b.substr(b.length-a.length,a.length)==a)}function iso8601(a){if(typeof(a)=="number"){a=new Date(a)}mod_assert.ok(a.constructor===Date);return(mod_extsprintf.sprintf("%4d-%02d-%02dT%02d:%02d:%02d.%03dZ",a.getUTCFullYear(),a.getUTCMonth()+1,a.getUTCDate(),a.getUTCHours(),a.getUTCMinutes(),a.getUTCSeconds(),a.getUTCMilliseconds()))}var RFC1123_MONTHS=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];var RFC1123_DAYS=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];function rfc1123(a){return(mod_extsprintf.sprintf("%s, %02d %s %04d %02d:%02d:%02d GMT",RFC1123_DAYS[a.getUTCDay()],a.getUTCDate(),RFC1123_MONTHS[a.getUTCMonth()],a.getUTCFullYear(),a.getUTCHours(),a.getUTCMinutes(),a.getUTCSeconds()))}function parseDateTime(b){var a=+b;if(!isNaN(a)){return(new Date(a))}else{return(new Date(b))}}var MAX_SAFE_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991;var MIN_SAFE_INTEGER=Number.MIN_SAFE_INTEGER||-9007199254740991;var PI_DEFAULTS={base:10,allowSign:true,allowPrefix:false,allowTrailing:false,allowImprecise:false,trimWhitespace:false,leadingZeroIsOctal:false};var CP_0=48;var CP_9=57;var CP_A=65;var CP_B=66;var CP_O=79;var CP_T=84;var CP_X=88;var CP_Z=90;var CP_a=97;var CP_b=98;var CP_o=111;var CP_t=116;var CP_x=120;var CP_z=122;var PI_CONV_DEC=48;var PI_CONV_UC=55;var PI_CONV_LC=87;function parseInteger(i,l){mod_assert.string(i,"str");mod_assert.optionalObject(l,"options");var b=false;var n=PI_DEFAULTS;if(l){b=hasKey(l,"base");n=mergeObjects(n,l);mod_assert.number(n.base,"options.base");mod_assert.ok(n.base>=2,"options.base >= 2");mod_assert.ok(n.base<=36,"options.base <= 36");mod_assert.bool(n.allowSign,"options.allowSign");mod_assert.bool(n.allowPrefix,"options.allowPrefix");mod_assert.bool(n.allowTrailing,"options.allowTrailing");mod_assert.bool(n.allowImprecise,"options.allowImprecise");mod_assert.bool(n.trimWhitespace,"options.trimWhitespace");mod_assert.bool(n.leadingZeroIsOctal,"options.leadingZeroIsOctal");if(n.leadingZeroIsOctal){mod_assert.ok(!b,'"base" and "leadingZeroIsOctal" are mutually exclusive')}}var h;var f=-1;var d=n.base;var a;var e=1;var k=0;var j=0;var g=i.length;if(n.trimWhitespace){while(j<g&&isSpace(i.charCodeAt(j))){++j}}if(n.allowSign){if(i[j]==="-"){j+=1;e=-1}else{if(i[j]==="+"){j+=1}}}if(i[j]==="0"){if(n.allowPrefix){f=prefixToBase(i.charCodeAt(j+1));if(f!==-1&&(!b||f===d)){d=f;j+=2}}if(f===-1&&n.leadingZeroIsOctal){d=8}}for(a=j;j<g;++j){h=translateDigit(i.charCodeAt(j));if(h!==-1&&h<d){k*=d;k+=h}else{break}}if(a===j){return(new Error("invalid number: "+JSON.stringify(i)))}if(n.trimWhitespace){while(j<g&&isSpace(i.charCodeAt(j))){++j}}if(j<g&&!n.allowTrailing){return(new Error("trailing characters after number: "+JSON.stringify(i.slice(j))))}if(k===0){return(0)}var m=k*e;if(!n.allowImprecise&&(k>MAX_SAFE_INTEGER||m<MIN_SAFE_INTEGER)){return(new Error("number is outside of the supported range: "+JSON.stringify(i.slice(a,j))))}return(m)}function translateDigit(a){if(a>=CP_0&&a<=CP_9){return(a-PI_CONV_DEC)}else{if(a>=CP_A&&a<=CP_Z){return(a-PI_CONV_UC)}else{if(a>=CP_a&&a<=CP_z){return(a-PI_CONV_LC)}else{return(-1)}}}}function isSpace(a){return(a===32)||(a>=9&&a<=13)||(a===160)||(a===5760)||(a===6158)||(a>=8192&&a<=8202)||(a===8232)||(a===8233)||(a===8239)||(a===8287)||(a===12288)||(a===65279)}function prefixToBase(a){if(a===CP_b||a===CP_B){return(2)}else{if(a===CP_o||a===CP_O){return(8)}else{if(a===CP_t||a===CP_T){return(10)}else{if(a===CP_x||a===CP_X){return(16)}else{return(-1)}}}}}function validateJsonObjectJS(c,k){var e=mod_jsonschema.validate(k,c);if(e.errors.length===0){return(null)}var h=e.errors[0];var a=h.property;var g=h.message.toLowerCase();var f,d;if((f=g.indexOf("the property "))!=-1&&(d=g.indexOf(" is not defined in the schema and the schema does not allow additional properties"))!=-1){f+="the property ".length;if(a===""){a=g.substr(f,d-f)}else{a=a+"."+g.substr(f,d-f)}g="unsupported property"}var b=new mod_verror.VError('property "%s": %s',a,g);b.jsv_details=h;return(b)}function randElt(a){mod_assert.ok(Array.isArray(a)&&a.length>0,"randElt argument must be a non-empty array");return(a[Math.floor(Math.random()*a.length)])}function assertHrtime(b){mod_assert.ok(b[0]>=0&&b[1]>=0,"negative numbers not allowed in hrtimes");mod_assert.ok(b[1]<1000000000,"nanoseconds column overflow")}function hrtimeDiff(d,c){assertHrtime(d);assertHrtime(c);mod_assert.ok(d[0]>c[0]||(d[0]==c[0]&&d[1]>=c[1]),"negative differences not allowed");var e=[d[0]-c[0],0];if(d[1]>=c[1]){e[1]=d[1]-c[1]}else{e[0]--;e[1]=1000000000-(c[1]-d[1])}return(e)}function hrtimeNanosec(b){assertHrtime(b);return(Math.floor(b[0]*1000000000+b[1]))}function hrtimeMicrosec(b){assertHrtime(b);return(Math.floor(b[0]*1000000+b[1]/1000))}function hrtimeMillisec(b){assertHrtime(b);return(Math.floor(b[0]*1000+b[1]/1000000))}function hrtimeAccum(d,c){assertHrtime(d);assertHrtime(c);d[1]+=c[1];if(d[1]>=1000000000){d[0]++;d[1]-=1000000000}d[0]+=c[0];return(d)}function hrtimeAdd(d,c){assertHrtime(d);var e=[d[0],d[1]];return(hrtimeAccum(e,c))}function extraProperties(b,c){mod_assert.ok(typeof(b)==="object"&&b!==null,"obj argument must be a non-null object");mod_assert.ok(Array.isArray(c),"allowed argument must be an array of strings");for(var a=0;a<c.length;a++){mod_assert.ok(typeof(c[a])==="string","allowed argument must be an array of strings")}return(Object.keys(b).filter(function(d){return(c.indexOf(d)===-1)}))}function mergeObjects(a,d,c){var e,b;e={};if(c){for(b in c){e[b]=c[b]}}if(a){for(b in a){e[b]=a[b]}}if(d){for(b in d){e[b]=d[b]}}return(e)};