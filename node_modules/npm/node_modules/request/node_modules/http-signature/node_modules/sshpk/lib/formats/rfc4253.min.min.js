module.exports={read:read.bind(undefined,false,undefined),readType:read.bind(undefined,false),write:write,readPartial:read.bind(undefined,true),readInternal:read,keyTypeToAlg:keyTypeToAlg,algToKeyType:algToKeyType};var assert=require("assert-plus");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var SSHBuffer=require("../ssh-buffer");function algToKeyType(b){assert.string(b);if(b==="ssh-dss"){return("dsa")}else{if(b==="ssh-rsa"){return("rsa")}else{if(b==="ssh-ed25519"){return("ed25519")}else{if(b==="ssh-curve25519"){return("curve25519")}else{if(b.match(/^ecdsa-sha2-/)){return("ecdsa")}else{throw (new Error("Unknown algorithm "+b))}}}}}}function keyTypeToAlg(b){assert.object(b);if(b.type==="dsa"){return("ssh-dss")}else{if(b.type==="rsa"){return("ssh-rsa")}else{if(b.type==="ed25519"){return("ssh-ed25519")}else{if(b.type==="curve25519"){return("ssh-curve25519")}else{if(b.type==="ecdsa"){return("ecdsa-sha2-"+b.part.curve.data.toString())}else{throw (new Error("Unknown key type "+b.type))}}}}}}function read(u,v,D,i){if(typeof(D)==="string"){D=new Buffer(D)}assert.buffer(D,"buf");var t={};var z=t.parts=[];var C=new SSHBuffer({buffer:D});var F=C.readString();assert.ok(!C.atEnd(),"key must have at least one part");t.type=algToKeyType(F);var p=algs.info[t.type].parts.length;if(v&&v==="private"){p=algs.privInfo[t.type].parts.length}while(!C.atEnd()&&z.length<p){z.push(C.readPart())}while(!u&&!C.atEnd()){z.push(C.readPart())}assert.ok(z.length>=1,"key must have at least one part");assert.ok(u||C.atEnd(),"leftover bytes at end of key");var w=Key;var B=algs.info[t.type];if(v==="private"||B.parts.length!==z.length){B=algs.privInfo[t.type];w=PrivateKey}assert.strictEqual(B.parts.length,z.length);if(t.type==="ecdsa"){var x=/^ecdsa-sha2-(.+)$/.exec(F);assert.ok(x!==null);assert.strictEqual(x[1],z[0].data.toString())}var s=true;for(var y=0;y<B.parts.length;++y){var E=z[y];E.name=B.parts[y];if(t.type==="ed25519"&&E.name==="k"){E.data=E.data.slice(0,32)}if(E.name!=="curve"&&B.normalize!==false){var A;if(t.type==="ed25519"){A=utils.zeroPadToLength(E.data,32)}else{A=utils.mpNormalize(E.data)}if(A.toString("binary")!==E.data.toString("binary")){E.data=A;s=false}}}if(s){t._rfc4253Cache=C.toBuffer()}if(u&&typeof(u)==="object"){u.remainder=C.remainder();u.consumed=C._offset}return(new w(t))}function write(o,i){assert.object(o);var k=keyTypeToAlg(o);var p;var l=algs.info[o.type];if(PrivateKey.isPrivateKey(o)){l=algs.privInfo[o.type]}var m=l.parts;var j=new SSHBuffer({});j.writeString(k);for(p=0;p<m.length;++p){var n=o.part[m[p]].data;if(l.normalize!==false){if(o.type==="ed25519"){n=utils.zeroPadToLength(n,32)}else{n=utils.mpNormalize(n)}}if(o.type==="ed25519"&&m[p]==="k"){n=Buffer.concat([n,o.part.A.data])}j.writeBuffer(n)}return(j.toBuffer())};