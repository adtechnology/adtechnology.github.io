module.exports={read:read,readPkcs8:readPkcs8,write:write,writePkcs8:writePkcs8,readECDSACurve:readECDSACurve,writeECDSACurve:writeECDSACurve};var assert=require("assert-plus");var asn1=require("asn1");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pem=require("./pem");function read(c,d){return(pem.read(c,d,"pkcs8"))}function write(c,d){return(pem.write(c,d,"pkcs8"))}function readMPInt(c,d){assert.strictEqual(c.peek(),asn1.Ber.Integer,d+" is not an Integer");return(utils.mpNormalize(c.readString(asn1.Ber.Integer,true)))}function readPkcs8(h,f,i){if(i.peek()===asn1.Ber.Integer){assert.strictEqual(f,"private","unexpected Integer at start of public key");i.readString(asn1.Ber.Integer,true)}i.readSequence();var g=i.offset+i.length;var j=i.readOID();switch(j){case"1.2.840.113549.1.1.1":i._offset=g;if(f==="public"){return(readPkcs8RSAPublic(i))}else{return(readPkcs8RSAPrivate(i))}case"1.2.840.10040.4.1":if(f==="public"){return(readPkcs8DSAPublic(i))}else{return(readPkcs8DSAPrivate(i))}case"1.2.840.10045.2.1":if(f==="public"){return(readPkcs8ECDSAPublic(i))}else{return(readPkcs8ECDSAPrivate(i))}case"1.3.101.112":if(f==="public"){return(readPkcs8EdDSAPublic(i))}else{return(readPkcs8EdDSAPrivate(i))}case"1.3.101.110":if(f==="public"){return(readPkcs8X25519Public(i))}else{return(readPkcs8X25519Private(i))}default:throw (new Error("Unknown key type OID "+j))}}function readPkcs8RSAPublic(e){e.readSequence(asn1.Ber.BitString);e.readByte();e.readSequence();var g=readMPInt(e,"modulus");var h=readMPInt(e,"exponent");var f={type:"rsa",source:e.originalInput,parts:[{name:"e",data:h},{name:"n",data:g}]};return(new Key(f))}function readPkcs8RSAPrivate(e){e.readSequence(asn1.Ber.OctetString);e.readSequence();var p=readMPInt(e,"version");assert.equal(p[0],0,"unknown RSA private key version");var t=readMPInt(e,"modulus");var o=readMPInt(e,"public exponent");var n=readMPInt(e,"private exponent");var u=readMPInt(e,"prime1");var v=readMPInt(e,"prime2");var r=readMPInt(e,"exponent1");var s=readMPInt(e,"exponent2");var q=readMPInt(e,"iqmp");var d={type:"rsa",parts:[{name:"n",data:t},{name:"e",data:o},{name:"d",data:n},{name:"iqmp",data:q},{name:"p",data:u},{name:"q",data:v},{name:"dmodp",data:r},{name:"dmodq",data:s}]};return(new PrivateKey(d))}function readPkcs8DSAPublic(l){l.readSequence();var j=readMPInt(l,"p");var k=readMPInt(l,"q");var g=readMPInt(l,"g");l.readSequence(asn1.Ber.BitString);l.readByte();var i=readMPInt(l,"y");var h={type:"dsa",parts:[{name:"p",data:j},{name:"q",data:k},{name:"g",data:g},{name:"y",data:i}]};return(new Key(h))}function readPkcs8DSAPrivate(m){m.readSequence();var k=readMPInt(m,"p");var l=readMPInt(m,"q");var n=readMPInt(m,"g");m.readSequence(asn1.Ber.OctetString);var i=readMPInt(m,"x");var j=utils.calculateDSAPublic(n,k,i);var g={type:"dsa",parts:[{name:"p",data:k},{name:"q",data:l},{name:"g",data:n},{name:"y",data:j},{name:"x",data:i}]};return(new PrivateKey(g))}function readECDSACurve(j){var p,w;var v,i,z;if(j.peek()===asn1.Ber.OID){var y=j.readOID();w=Object.keys(algs.curves);for(v=0;v<w.length;++v){i=w[v];z=algs.curves[i];if(z.pkcs8oid===y){p=i;break}}}else{j.readSequence();var k=j.readString(asn1.Ber.Integer,true);assert.strictEqual(k[0],1,"ECDSA key not version 1");var A={};j.readSequence();var C=j.readOID();assert.strictEqual(C,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var B=A.p=utils.mpNormalize(j.readString(asn1.Ber.Integer,true));A.size=B.length*8-utils.countZeros(B);j.readSequence();A.a=utils.mpNormalize(j.readString(asn1.Ber.OctetString,true));A.b=utils.mpNormalize(j.readString(asn1.Ber.OctetString,true));if(j.peek()===asn1.Ber.BitString){A.s=j.readString(asn1.Ber.BitString,true)}A.G=j.readString(asn1.Ber.OctetString,true);assert.strictEqual(A.G[0],4,"uncompressed G is required");A.n=utils.mpNormalize(j.readString(asn1.Ber.Integer,true));A.h=utils.mpNormalize(j.readString(asn1.Ber.Integer,true));assert.strictEqual(A.h[0],1,"a cofactor=1 curve is required");w=Object.keys(algs.curves);var D=Object.keys(A);for(v=0;v<w.length;++v){i=w[v];z=algs.curves[i];var c=true;for(var u=0;u<D.length;++u){var x=D[u];if(z[x]===undefined){continue}if(typeof(z[x])==="object"&&z[x].equals!==undefined){if(!z[x].equals(A[x])){c=false;break}}else{if(Buffer.isBuffer(z[x])){if(z[x].toString("binary")!==A[x].toString("binary")){c=false;break}}else{if(z[x]!==A[x]){c=false;break}}}}if(c){p=i;break}}}return(p)}function readPkcs8ECDSAPrivate(k){var j=readECDSACurve(k);assert.string(j,"a known elliptic curve");k.readSequence(asn1.Ber.OctetString);k.readSequence();var h=readMPInt(k,"version");assert.equal(h[0],1,"unknown version of ECDSA key");var i=k.readString(asn1.Ber.OctetString,true);k.readSequence(161);var l=k.readString(asn1.Ber.BitString,true);l=utils.ecNormalize(l);var d={type:"ecdsa",parts:[{name:"curve",data:new Buffer(j)},{name:"Q",data:l},{name:"d",data:i}]};return(new PrivateKey(d))}function readPkcs8ECDSAPublic(h){var g=readECDSACurve(h);assert.string(g,"a known elliptic curve");var e=h.readString(asn1.Ber.BitString,true);e=utils.ecNormalize(e);var f={type:"ecdsa",parts:[{name:"curve",data:new Buffer(g)},{name:"Q",data:e}]};return(new Key(f))}function readPkcs8EdDSAPublic(f){if(f.peek()===0){f.readByte()}var e=utils.readBitString(f);var d={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(e,32)}]};return(new Key(d))}function readPkcs8X25519Public(f){var e=utils.readBitString(f);var d={type:"curve25519",parts:[{name:"A",data:utils.zeroPadToLength(e,32)}]};return(new Key(d))}function readPkcs8EdDSAPrivate(g){if(g.peek()===0){g.readByte()}g.readSequence(asn1.Ber.OctetString);var e=g.readString(asn1.Ber.OctetString,true);e=utils.zeroPadToLength(e,32);var f;if(g.peek()===asn1.Ber.BitString){f=utils.readBitString(g);f=utils.zeroPadToLength(f,32)}else{f=utils.calculateED25519Public(e)}var h={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(f,32)},{name:"k",data:utils.zeroPadToLength(e,32)}]};return(new PrivateKey(h))}function readPkcs8X25519Private(g){if(g.peek()===0){g.readByte()}g.readSequence(asn1.Ber.OctetString);var e=g.readString(asn1.Ber.OctetString,true);e=utils.zeroPadToLength(e,32);var f=utils.calculateX25519Public(e);var h={type:"curve25519",parts:[{name:"A",data:utils.zeroPadToLength(f,32)},{name:"k",data:utils.zeroPadToLength(e,32)}]};return(new PrivateKey(h))}function writePkcs8(f,d){f.startSequence();if(PrivateKey.isPrivateKey(d)){var e=new Buffer(1);e[0]=0;f.writeBuffer(e,asn1.Ber.Integer)}f.startSequence();switch(d.type){case"rsa":f.writeOID("1.2.840.113549.1.1.1");if(PrivateKey.isPrivateKey(d)){writePkcs8RSAPrivate(d,f)}else{writePkcs8RSAPublic(d,f)}break;case"dsa":f.writeOID("1.2.840.10040.4.1");if(PrivateKey.isPrivateKey(d)){writePkcs8DSAPrivate(d,f)}else{writePkcs8DSAPublic(d,f)}break;case"ecdsa":f.writeOID("1.2.840.10045.2.1");if(PrivateKey.isPrivateKey(d)){writePkcs8ECDSAPrivate(d,f)}else{writePkcs8ECDSAPublic(d,f)}break;case"ed25519":f.writeOID("1.3.101.112");if(PrivateKey.isPrivateKey(d)){throw (new Error("Ed25519 private keys in pkcs8 format are not supported"))}writePkcs8EdDSAPublic(d,f);break;default:throw (new Error("Unsupported key type: "+d.type))}f.endSequence()}function writePkcs8RSAPrivate(d,f){f.writeNull();f.endSequence();f.startSequence(asn1.Ber.OctetString);f.startSequence();var e=new Buffer(1);e[0]=0;f.writeBuffer(e,asn1.Ber.Integer);f.writeBuffer(d.part.n.data,asn1.Ber.Integer);f.writeBuffer(d.part.e.data,asn1.Ber.Integer);f.writeBuffer(d.part.d.data,asn1.Ber.Integer);f.writeBuffer(d.part.p.data,asn1.Ber.Integer);f.writeBuffer(d.part.q.data,asn1.Ber.Integer);if(!d.part.dmodp||!d.part.dmodq){utils.addRSAMissing(d)}f.writeBuffer(d.part.dmodp.data,asn1.Ber.Integer);f.writeBuffer(d.part.dmodq.data,asn1.Ber.Integer);f.writeBuffer(d.part.iqmp.data,asn1.Ber.Integer);f.endSequence();f.endSequence()}function writePkcs8RSAPublic(d,c){c.writeNull();c.endSequence();c.startSequence(asn1.Ber.BitString);c.writeByte(0);c.startSequence();c.writeBuffer(d.part.n.data,asn1.Ber.Integer);c.writeBuffer(d.part.e.data,asn1.Ber.Integer);c.endSequence();c.endSequence()}function writePkcs8DSAPrivate(d,c){c.startSequence();c.writeBuffer(d.part.p.data,asn1.Ber.Integer);c.writeBuffer(d.part.q.data,asn1.Ber.Integer);c.writeBuffer(d.part.g.data,asn1.Ber.Integer);c.endSequence();c.endSequence();c.startSequence(asn1.Ber.OctetString);c.writeBuffer(d.part.x.data,asn1.Ber.Integer);c.endSequence()}function writePkcs8DSAPublic(d,c){c.startSequence();c.writeBuffer(d.part.p.data,asn1.Ber.Integer);c.writeBuffer(d.part.q.data,asn1.Ber.Integer);c.writeBuffer(d.part.g.data,asn1.Ber.Integer);c.endSequence();c.endSequence();c.startSequence(asn1.Ber.BitString);c.writeByte(0);c.writeBuffer(d.part.y.data,asn1.Ber.Integer);c.endSequence()}function writeECDSACurve(k,i){var h=algs.curves[k.curve];if(h.pkcs8oid){i.writeOID(h.pkcs8oid)}else{i.startSequence();var l=new Buffer(1);l.writeUInt8(1,0);i.writeBuffer(l,asn1.Ber.Integer);i.startSequence();i.writeOID("1.2.840.10045.1.1");i.writeBuffer(h.p,asn1.Ber.Integer);i.endSequence();i.startSequence();var a=h.p;if(a[0]===0){a=a.slice(1)}i.writeBuffer(a,asn1.Ber.OctetString);i.writeBuffer(h.b,asn1.Ber.OctetString);i.writeBuffer(h.s,asn1.Ber.BitString);i.endSequence();i.writeBuffer(h.G,asn1.Ber.OctetString);i.writeBuffer(h.n,asn1.Ber.Integer);var j=h.h;if(!j){j=new Buffer(1);j[0]=1}i.writeBuffer(j,asn1.Ber.Integer);i.endSequence()}}function writePkcs8ECDSAPublic(e,f){writeECDSACurve(e,f);f.endSequence();var d=utils.ecNormalize(e.part.Q.data,true);f.writeBuffer(d,asn1.Ber.BitString)}function writePkcs8ECDSAPrivate(e,g){writeECDSACurve(e,g);g.endSequence();g.startSequence(asn1.Ber.OctetString);g.startSequence();var f=new Buffer(1);f[0]=1;g.writeBuffer(f,asn1.Ber.Integer);g.writeBuffer(e.part.d.data,asn1.Ber.OctetString);g.startSequence(161);var h=utils.ecNormalize(e.part.Q.data,true);g.writeBuffer(h,asn1.Ber.BitString);g.endSequence();g.endSequence();g.endSequence()}function writePkcs8EdDSAPublic(d,c){c.endSequence();utils.writeBitString(c,d.part.A.data)}function writePkcs8EdDSAPrivate(d,f){f.endSequence();var e=utils.mpNormalize(d.part.k.data,true);f.startSequence(asn1.Ber.OctetString);f.writeBuffer(e,asn1.Ber.OctetString);f.endSequence()};