var BigInteger=require("jsbn").BigInteger;var Barrett=BigInteger.prototype.Barrett;function ECFieldElementFp(c,d){this.x=d;this.q=c}function feFpEquals(b){if(b==this){return true}return(this.q.equals(b.q)&&this.x.equals(b.x))}function feFpToBigInteger(){return this.x}function feFpNegate(){return new ECFieldElementFp(this.q,this.x.negate().mod(this.q))}function feFpAdd(b){return new ECFieldElementFp(this.q,this.x.add(b.toBigInteger()).mod(this.q))}function feFpSubtract(b){return new ECFieldElementFp(this.q,this.x.subtract(b.toBigInteger()).mod(this.q))}function feFpMultiply(b){return new ECFieldElementFp(this.q,this.x.multiply(b.toBigInteger()).mod(this.q))}function feFpSquare(){return new ECFieldElementFp(this.q,this.x.square().mod(this.q))}function feFpDivide(b){return new ECFieldElementFp(this.q,this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q))}ECFieldElementFp.prototype.equals=feFpEquals;ECFieldElementFp.prototype.toBigInteger=feFpToBigInteger;ECFieldElementFp.prototype.negate=feFpNegate;ECFieldElementFp.prototype.add=feFpAdd;ECFieldElementFp.prototype.subtract=feFpSubtract;ECFieldElementFp.prototype.multiply=feFpMultiply;ECFieldElementFp.prototype.square=feFpSquare;ECFieldElementFp.prototype.divide=feFpDivide;function ECPointFp(f,h,e,g){this.curve=f;this.x=h;this.y=e;if(g==null){this.z=BigInteger.ONE}else{this.z=g}this.zinv=null}function pointFpGetX(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}var b=this.x.toBigInteger().multiply(this.zinv);this.curve.reduce(b);return this.curve.fromBigInteger(b)}function pointFpGetY(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}var b=this.y.toBigInteger().multiply(this.zinv);this.curve.reduce(b);return this.curve.fromBigInteger(b)}function pointFpEquals(d){if(d==this){return true}if(this.isInfinity()){return d.isInfinity()}if(d.isInfinity()){return this.isInfinity()}var e,f;e=d.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(d.z)).mod(this.curve.q);if(!e.equals(BigInteger.ZERO)){return false}f=d.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(d.z)).mod(this.curve.q);return f.equals(BigInteger.ZERO)}function pointFpIsInfinity(){if((this.x==null)&&(this.y==null)){return true}return this.z.equals(BigInteger.ZERO)&&!this.y.toBigInteger().equals(BigInteger.ZERO)}function pointFpNegate(){return new ECPointFp(this.curve,this.x,this.y.negate(),this.z)}function pointFpAdd(t){if(this.isInfinity()){return t}if(t.isInfinity()){return this}var x=t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q);var D=t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q);if(BigInteger.ZERO.equals(D)){if(BigInteger.ZERO.equals(x)){return this.twice()}return this.curve.getInfinity()}var v=new BigInteger("3");var B=this.x.toBigInteger();var b=this.y.toBigInteger();var E=t.x.toBigInteger();var u=t.y.toBigInteger();var s=D.square();var w=s.multiply(D);var C=B.multiply(s);var z=x.square().multiply(this.z);var r=z.subtract(C.shiftLeft(1)).multiply(t.z).subtract(w).multiply(D).mod(this.curve.q);var y=C.multiply(v).multiply(x).subtract(b.multiply(w)).subtract(z.multiply(x)).multiply(t.z).add(x.multiply(w)).mod(this.curve.q);var A=w.multiply(this.z).multiply(t.z).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(r),this.curve.fromBigInteger(y),A)}function pointFpTwice(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var s=new BigInteger("3");var l=this.x.toBigInteger();var r=this.y.toBigInteger();var u=r.multiply(this.z);var o=u.multiply(r).mod(this.curve.q);var p=this.curve.a.toBigInteger();var n=l.square().multiply(s);if(!BigInteger.ZERO.equals(p)){n=n.add(this.z.square().multiply(p))}n=n.mod(this.curve.q);var m=n.square().subtract(l.shiftLeft(3).multiply(o)).shiftLeft(1).multiply(u).mod(this.curve.q);var t=n.multiply(s).multiply(l).subtract(o.shiftLeft(1)).shiftLeft(2).multiply(o).subtract(n.square().multiply(n)).mod(this.curve.q);var a=u.square().multiply(u).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(m),this.curve.fromBigInteger(t),a)}function pointFpMultiply(m){if(this.isInfinity()){return this}if(m.signum()==0){return this.curve.getInfinity()}var i=m;var h=i.multiply(new BigInteger("3"));var p=this.negate();var k=this;var n;for(n=h.bitLength()-2;n>0;--n){k=k.twice();var o=h.testBit(n);var e=i.testBit(n);if(o!=e){k=k.add(o?this:p)}}return k}function pointFpMultiplyTwo(h,j,i){var g;if(h.bitLength()>i.bitLength()){g=h.bitLength()-1}else{g=i.bitLength()-1}var k=this.curve.getInfinity();var l=this.add(j);while(g>=0){k=k.twice();if(h.testBit(g)){if(i.testBit(g)){k=k.add(l)}else{k=k.add(this)}}else{if(i.testBit(g)){k=k.add(j)}}--g}return k}ECPointFp.prototype.getX=pointFpGetX;ECPointFp.prototype.getY=pointFpGetY;ECPointFp.prototype.equals=pointFpEquals;ECPointFp.prototype.isInfinity=pointFpIsInfinity;ECPointFp.prototype.negate=pointFpNegate;ECPointFp.prototype.add=pointFpAdd;ECPointFp.prototype.twice=pointFpTwice;ECPointFp.prototype.multiply=pointFpMultiply;ECPointFp.prototype.multiplyTwo=pointFpMultiplyTwo;function ECCurveFp(b,f,a){this.q=b;this.a=this.fromBigInteger(f);this.b=this.fromBigInteger(a);this.infinity=new ECPointFp(this,null,null);this.reducer=new Barrett(this.q)}function curveFpGetQ(){return this.q}function curveFpGetA(){return this.a}function curveFpGetB(){return this.b}function curveFpEquals(b){if(b==this){return true}return(this.q.equals(b.q)&&this.a.equals(b.a)&&this.b.equals(b.b))}function curveFpGetInfinity(){return this.infinity}function curveFpFromBigInteger(b){return new ECFieldElementFp(this.q,b)}function curveReduce(b){this.reducer.reduce(b)}function curveFpDecodePointHex(e){switch(parseInt(e.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var h=(e.length-2)/2;var f=e.substr(2,h);var g=e.substr(h+2,h);return new ECPointFp(this,this.fromBigInteger(new BigInteger(f,16)),this.fromBigInteger(new BigInteger(g,16)));default:return null}}function curveFpEncodePointHex(e){if(e.isInfinity()){return"00"}var f=e.getX().toBigInteger().toString(16);var h=e.getY().toBigInteger().toString(16);var g=this.getQ().toString(16).length;if((g%2)!=0){g++}while(f.length<g){f="0"+f}while(h.length<g){h="0"+h}return"04"+f+h}ECCurveFp.prototype.getQ=curveFpGetQ;ECCurveFp.prototype.getA=curveFpGetA;ECCurveFp.prototype.getB=curveFpGetB;ECCurveFp.prototype.equals=curveFpEquals;ECCurveFp.prototype.getInfinity=curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger=curveFpFromBigInteger;ECCurveFp.prototype.reduce=curveReduce;ECCurveFp.prototype.encodePointHex=curveFpEncodePointHex;ECCurveFp.prototype.decodePointHex=function(l){var m;switch(parseInt(l.substr(0,2),16)){case 0:return this.infinity;case 2:m=false;case 3:if(m==undefined){m=true}var r=l.length-2;var k=l.substr(2,r);var o=this.fromBigInteger(new BigInteger(k,16));var j=o.multiply(o.square().add(this.getA())).add(this.getB());var n=j.sqrt();if(n==null){throw"Invalid point compression"}var s=n.toBigInteger();if(s.testBit(0)!=m){n=this.fromBigInteger(this.getQ().subtract(s))}return new ECPointFp(this,o,n);case 4:case 6:case 7:var r=(l.length-2)/2;var k=l.substr(2,r);var p=l.substr(r+2,r);return new ECPointFp(this,this.fromBigInteger(new BigInteger(k,16)),this.fromBigInteger(new BigInteger(p,16)));default:return null}};ECCurveFp.prototype.encodeCompressedPointHex=function(e){if(e.isInfinity()){return"00"}var g=e.getX().toBigInteger().toString(16);var h=this.getQ().toString(16).length;if((h%2)!=0){h++}while(g.length<h){g="0"+g}var f;if(e.getY().toBigInteger().isEven()){f="02"}else{f="03"}return f+g};ECFieldElementFp.prototype.getR=function(){if(this.r!=undefined){return this.r}this.r=null;var d=this.q.bitLength();if(d>128){var c=this.q.shiftRight(d-64);if(c.intValue()==-1){this.r=BigInteger.ONE.shiftLeft(d).subtract(this.q)}}return this.r};ECFieldElementFp.prototype.modMult=function(c,d){return this.modReduce(c.multiply(d))};ECFieldElementFp.prototype.modReduce=function(h){if(this.getR()!=null){var e=q.bitLength();while(h.bitLength()>(e+1)){var f=h.shiftRight(e);var g=h.subtract(f.shiftLeft(e));if(!this.getR().equals(BigInteger.ONE)){f=f.multiply(this.getR())}h=f.add(g)}while(h.compareTo(q)>=0){h=h.subtract(q)}}else{h=h.mod(q)}return h};ECFieldElementFp.prototype.sqrt=function(){if(!this.q.testBit(0)){throw"unsupported"}if(this.q.testBit(1)){var t=new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));return t.square().equals(this)?t:null}var p=this.q.subtract(BigInteger.ONE);var v=p.shiftRight(1);if(!(this.x.modPow(v,this.q).equals(BigInteger.ONE))){return null}var s=p.shiftRight(2);var m=s.shiftLeft(1).add(BigInteger.ONE);var w=this.x;var k=modDouble(modDouble(w));var n,o;do{var u;do{u=new BigInteger(this.q.bitLength(),new SecureRandom())}while(u.compareTo(this.q)>=0||!(u.multiply(u).subtract(k).modPow(v,this.q).equals(p)));var r=this.lucasSequence(u,w,m);n=r[0];o=r[1];if(this.modMult(o,o).equals(k)){if(o.testBit(0)){o=o.add(q)}o=o.shiftRight(1);return new ECFieldElementFp(q,o)}}while(n.equals(BigInteger.ONE)||n.equals(p));return null};ECFieldElementFp.prototype.lucasSequence=function(u,v,k){var o=k.bitLength();var r=k.getLowestSetBit();var s=BigInteger.ONE;var w=BigInteger.TWO;var t=u;var p=BigInteger.ONE;var n=BigInteger.ONE;for(var j=o-1;j>=r+1;--j){p=this.modMult(p,n);if(k.testBit(j)){n=this.modMult(p,v);s=this.modMult(s,t);w=this.modReduce(t.multiply(w).subtract(u.multiply(p)));t=this.modReduce(t.multiply(t).subtract(n.shiftLeft(1)))}else{n=p;s=this.modReduce(s.multiply(w).subtract(p));t=this.modReduce(t.multiply(w).subtract(u.multiply(p)));w=this.modReduce(w.multiply(w).subtract(p.shiftLeft(1)))}}p=this.modMult(p,n);n=this.modMult(p,v);s=this.modReduce(s.multiply(w).subtract(p));w=this.modReduce(t.multiply(w).subtract(u.multiply(p)));p=this.modMult(p,n);for(var j=1;j<=r;++j){s=this.modMult(s,w);w=this.modReduce(w.multiply(w).subtract(p.shiftLeft(1)));p=this.modMult(p,p)}return[s,w]};var exports={ECCurveFp:ECCurveFp,ECPointFp:ECPointFp,ECFieldElementFp:ECFieldElementFp};module.exports=exports;