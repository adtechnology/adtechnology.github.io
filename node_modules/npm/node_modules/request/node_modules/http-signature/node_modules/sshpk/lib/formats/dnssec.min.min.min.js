module.exports={read:read,write:write};var assert=require("assert-plus");var Key=require("../key");var PrivateKey=require("../private-key");var utils=require("../utils");var SSHBuffer=require("../ssh-buffer");var Dhe=require("../dhe");var supportedAlgos={"rsa-sha1":5,"rsa-sha256":8,"rsa-sha512":10,"ecdsa-p256-sha256":13,"ecdsa-p384-sha384":14};var supportedAlgosById={};Object.keys(supportedAlgos).forEach(function(a){supportedAlgosById[supportedAlgos[a]]=a.toUpperCase()});function read(b,a){if(typeof(b)!=="string"){assert.buffer(b,"buf");b=b.toString("ascii")}var g=b.split("\n");if(g[0].match(/^Private-key-format\: v1/)){var d=g[1].split(" ");var f=parseInt(d[1],10);var c=d[2];if(!supportedAlgosById[f]){throw (new Error("Unsupported algorithm: "+c))}return(readDNSSECPrivateKey(f,g.slice(2)))}var e=0;while(g[e].match(/^\;/)){e++}if((g[e].match(/\. IN KEY /)||g[e].match(/\. IN DNSKEY /))&&g[e+1].length===0){return(readRFC3110(g[e]))}throw (new Error("Cannot parse dnssec key"))}function readRFC3110(a){var h=a.split(" ");var b=parseInt(h[5],10);if(!supportedAlgosById[b]){throw (new Error("Unsupported algorithm: "+b))}var g=h.slice(6,h.length).join();var j=new Buffer(g,"base64");if(supportedAlgosById[b].match(/^RSA-/)){var c=j.readUInt8(0);if(c!=3&&c!=1){throw (new Error("Cannot parse dnssec key: unsupported exponent length"))}var k=j.slice(1,c+1);k=utils.mpNormalize(k);var d=j.slice(1+c);d=utils.mpNormalize(d);var l={type:"rsa",parts:[]};l.parts.push({name:"e",data:k});l.parts.push({name:"n",data:d});return(new Key(l))}if(supportedAlgosById[b]==="ECDSA-P384-SHA384"||supportedAlgosById[b]==="ECDSA-P256-SHA256"){var i="nistp384";var f=384;if(supportedAlgosById[b].match(/^ECDSA-P256-SHA256/)){i="nistp256";f=256}var e={type:"ecdsa",curve:i,size:f,parts:[{name:"curve",data:new Buffer(i)},{name:"Q",data:utils.ecNormalize(j)}]};return(new Key(e))}throw (new Error("Unsupported algorithm: "+supportedAlgosById[b]))}function elementToBuf(a){return(new Buffer(a.split(" ")[1],"base64"))}function readDNSSECRSAPrivateKey(a){var c={};a.forEach(function(d){if(d.split(" ")[0]==="Modulus:"){c.n=elementToBuf(d)}else{if(d.split(" ")[0]==="PublicExponent:"){c.e=elementToBuf(d)}else{if(d.split(" ")[0]==="PrivateExponent:"){c.d=elementToBuf(d)}else{if(d.split(" ")[0]==="Prime1:"){c.p=elementToBuf(d)}else{if(d.split(" ")[0]==="Prime2:"){c.q=elementToBuf(d)}else{if(d.split(" ")[0]==="Exponent1:"){c.dmodp=elementToBuf(d)}else{if(d.split(" ")[0]==="Exponent2:"){c.dmodq=elementToBuf(d)}else{if(d.split(" ")[0]==="Coefficient:"){c.iqmp=elementToBuf(d)}}}}}}}}});var b={type:"rsa",parts:[{name:"e",data:utils.mpNormalize(c.e)},{name:"n",data:utils.mpNormalize(c.n)},{name:"d",data:utils.mpNormalize(c.d)},{name:"p",data:utils.mpNormalize(c.p)},{name:"q",data:utils.mpNormalize(c.q)},{name:"dmodp",data:utils.mpNormalize(c.dmodp)},{name:"dmodq",data:utils.mpNormalize(c.dmodq)},{name:"iqmp",data:utils.mpNormalize(c.iqmp)}]};return(new PrivateKey(b))}function readDNSSECPrivateKey(c,h){if(supportedAlgosById[c].match(/^RSA-/)){return(readDNSSECRSAPrivateKey(h))}if(supportedAlgosById[c]==="ECDSA-P384-SHA384"||supportedAlgosById[c]==="ECDSA-P256-SHA256"){var b=new Buffer(h[0].split(" ")[1],"base64");var a="nistp384";var g=384;if(supportedAlgosById[c]==="ECDSA-P256-SHA256"){a="nistp256";g=256}var i=utils.publicFromPrivateECDSA(a,b);var f=i.part.Q.data;var e={type:"ecdsa",curve:a,size:g,parts:[{name:"curve",data:new Buffer(a)},{name:"d",data:b},{name:"Q",data:f}]};return(new PrivateKey(e))}throw (new Error("Unsupported algorithm: "+supportedAlgosById[c]))}function dnssecTimestamp(c){var d=c.getFullYear()+"";var b=(c.getMonth()+1);var a=d+b+c.getUTCDate();a+=""+c.getUTCHours()+c.getUTCMinutes();a+=c.getUTCSeconds();return(a)}function rsaAlgFromOptions(a){if(!a||!a.hashAlgo||a.hashAlgo==="sha1"){return("5 (RSASHA1)")}else{if(a.hashAlgo==="sha256"){return("8 (RSASHA256)")}else{if(a.hashAlgo==="sha512"){return("10 (RSASHA512)")}else{throw (new Error("Unknown or unsupported hash: "+a.hashAlgo))}}}}function writeRSA(g,h){if(!g.part.dmodp||!g.part.dmodq){utils.addRSAMissing(g)}var a="";a+="Private-key-format: v1.3\n";a+="Algorithm: "+rsaAlgFromOptions(h)+"\n";var k=utils.mpDenormalize(g.part.n.data);a+="Modulus: "+k.toString("base64")+"\n";var c=utils.mpDenormalize(g.part.e.data);a+="PublicExponent: "+c.toString("base64")+"\n";var f=utils.mpDenormalize(g.part.d.data);a+="PrivateExponent: "+f.toString("base64")+"\n";var j=utils.mpDenormalize(g.part.p.data);a+="Prime1: "+j.toString("base64")+"\n";var i=utils.mpDenormalize(g.part.q.data);a+="Prime2: "+i.toString("base64")+"\n";var m=utils.mpDenormalize(g.part.dmodp.data);a+="Exponent1: "+m.toString("base64")+"\n";var l=utils.mpDenormalize(g.part.dmodq.data);a+="Exponent2: "+l.toString("base64")+"\n";var o=utils.mpDenormalize(g.part.iqmp.data);a+="Coefficient: "+o.toString("base64")+"\n";var b=new Date();a+="Created: "+dnssecTimestamp(b)+"\n";a+="Publish: "+dnssecTimestamp(b)+"\n";a+="Activate: "+dnssecTimestamp(b)+"\n";return(new Buffer(a,"ascii"))}function writeECDSA(a,e){var d="";d+="Private-key-format: v1.3\n";if(a.curve==="nistp256"){d+="Algorithm: 13 (ECDSAP256SHA256)\n"}else{if(a.curve==="nistp384"){d+="Algorithm: 14 (ECDSAP384SHA384)\n"}else{throw (new Error("Unsupported curve"))}}var b=a.part.d.data.toString("base64");d+="PrivateKey: "+b+"\n";var c=new Date();d+="Created: "+dnssecTimestamp(c)+"\n";d+="Publish: "+dnssecTimestamp(c)+"\n";d+="Activate: "+dnssecTimestamp(c)+"\n";return(new Buffer(d,"ascii"))}function write(b,a){if(PrivateKey.isPrivateKey(b)){if(b.type==="rsa"){return(writeRSA(b,a))}else{if(b.type==="ecdsa"){return(writeECDSA(b,a))}else{throw (new Error("Unsupported algorithm: "+b.type))}}}else{if(Key.isKey(b)){throw (new Error('Format "dnssec" only supports writing private keys'))}else{throw (new Error("key is not a Key or PrivateKey"))}}};