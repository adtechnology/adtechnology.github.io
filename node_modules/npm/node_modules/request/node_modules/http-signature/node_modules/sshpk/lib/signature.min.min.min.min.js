module.exports=Signature;var assert=require("assert-plus");var algs=require("./algs");var crypto=require("crypto");var errs=require("./errors");var utils=require("./utils");var asn1=require("asn1");var SSHBuffer=require("./ssh-buffer");var InvalidAlgorithmError=errs.InvalidAlgorithmError;var SignatureParseError=errs.SignatureParseError;function Signature(f){assert.object(f,"options");assert.arrayOfObject(f.parts,"options.parts");assert.string(f.type,"options.type");var e={};for(var g=0;g<f.parts.length;++g){var h=f.parts[g];e[h.name]=h}this.type=f.type;this.hashAlgorithm=f.hashAlgo;this.curve=f.curve;this.parts=f.parts;this.part=e}Signature.prototype.toBuffer=function(l){if(l===undefined){l="asn1"}assert.string(l,"format");var q;var m="ssh-"+this.type;switch(this.type){case"rsa":switch(this.hashAlgorithm){case"sha256":m="rsa-sha2-256";break;case"sha512":m="rsa-sha2-512";break;case"sha1":case undefined:break;default:throw (new Error("SSH signature format does not support hash algorithm "+this.hashAlgorithm))}if(l==="ssh"){q=new SSHBuffer({});q.writeString(m);q.writePart(this.part.sig);return(q.toBuffer())}else{return(this.part.sig.data)}break;case"ed25519":if(l==="ssh"){q=new SSHBuffer({});q.writeString(m);q.writePart(this.part.sig);return(q.toBuffer())}else{return(this.part.sig.data)}break;case"dsa":case"ecdsa":var r,k;if(l==="asn1"){var o=new asn1.BerWriter();o.startSequence();r=utils.mpNormalize(this.part.r.data);k=utils.mpNormalize(this.part.s.data);o.writeBuffer(r,asn1.Ber.Integer);o.writeBuffer(k,asn1.Ber.Integer);o.endSequence();return(o.buffer)}else{if(l==="ssh"&&this.type==="dsa"){q=new SSHBuffer({});q.writeString("ssh-dss");r=this.part.r.data;if(r.length>20&&r[0]===0){r=r.slice(1)}k=this.part.s.data;if(k.length>20&&k[0]===0){k=k.slice(1)}if((this.hashAlgorithm&&this.hashAlgorithm!=="sha1")||r.length+k.length!==40){throw (new Error("OpenSSH only supports DSA signatures with SHA1 hash"))}q.writeBuffer(Buffer.concat([r,k]));return(q.toBuffer())}else{if(l==="ssh"&&this.type==="ecdsa"){var j=new SSHBuffer({});r=this.part.r.data;j.writeBuffer(r);j.writePart(this.part.s);q=new SSHBuffer({});var p;if(r[0]===0){r=r.slice(1)}var n=r.length*8;if(n===256){p="nistp256"}else{if(n===384){p="nistp384"}else{if(n===528){p="nistp521"}}}q.writeString("ecdsa-sha2-"+p);q.writeBuffer(j.toBuffer());return(q.toBuffer())}}}throw (new Error("Invalid signature format"));default:throw (new Error("Invalid signature data"))}};Signature.prototype.toString=function(b){assert.optionalString(b,"format");return(this.toBuffer(b).toString("base64"))};Signature.parse=function(g,i,j){if(typeof(g)==="string"){g=new Buffer(g,"base64")}assert.buffer(g,"data");assert.string(j,"format");assert.string(i,"type");var h={};h.type=i.toLowerCase();h.parts=[];try{assert.ok(g.length>0,"signature must not be empty");switch(h.type){case"rsa":return(parseOneNum(g,i,j,h));case"ed25519":return(parseOneNum(g,i,j,h));case"dsa":case"ecdsa":if(j==="asn1"){return(parseDSAasn1(g,i,j,h))}else{if(h.type==="dsa"){return(parseDSA(g,i,j,h))}else{return(parseECDSA(g,i,j,h))}}default:throw (new InvalidAlgorithmError(i))}}catch(e){if(e instanceof InvalidAlgorithmError){throw (e)}throw (new SignatureParseError(i,j,e))}};function parseOneNum(o,m,k,r){if(k==="ssh"){try{var q=new SSHBuffer({buffer:o});var l=q.readString()}catch(n){}if(q!==undefined){var p="SSH signature does not match expected type (expected "+m+", got "+l+")";switch(l){case"ssh-rsa":assert.strictEqual(m,"rsa",p);r.hashAlgo="sha1";break;case"rsa-sha2-256":assert.strictEqual(m,"rsa",p);r.hashAlgo="sha256";break;case"rsa-sha2-512":assert.strictEqual(m,"rsa",p);r.hashAlgo="sha512";break;case"ssh-ed25519":assert.strictEqual(m,"ed25519",p);r.hashAlgo="sha512";break;default:throw (new Error("Unknown SSH signature type: "+l))}var e=q.readPart();assert.ok(q.atEnd(),"extra trailing bytes");e.name="sig";r.parts.push(e);return(new Signature(r))}}r.parts.push({name:"sig",data:o});return(new Signature(r))}function parseDSAasn1(n,k,m,h){var i=new asn1.BerReader(n);i.readSequence();var j=i.readString(asn1.Ber.Integer,true);var l=i.readString(asn1.Ber.Integer,true);h.parts.push({name:"r",data:utils.mpNormalize(j)});h.parts.push({name:"s",data:utils.mpNormalize(l)});return(new Signature(h))}function parseDSA(d,i,l,h){if(d.length!=40){var j=new SSHBuffer({buffer:d});var k=j.readBuffer();if(k.toString("ascii")==="ssh-dss"){k=j.readBuffer()}assert.ok(j.atEnd(),"extra trailing bytes");assert.strictEqual(k.length,40,"invalid inner length");d=k}h.parts.push({name:"r",data:d.slice(0,20)});h.parts.push({name:"s",data:d.slice(20,40)});return(new Signature(h))}function parseECDSA(r,p,o,l){var t=new SSHBuffer({buffer:r});var k,n;var m=t.readBuffer();var q=m.toString("ascii");if(q.slice(0,6)==="ecdsa-"){var s=q.split("-");assert.strictEqual(s[0],"ecdsa");assert.strictEqual(s[1],"sha2");l.curve=s[2];switch(l.curve){case"nistp256":l.hashAlgo="sha256";break;case"nistp384":l.hashAlgo="sha384";break;case"nistp521":l.hashAlgo="sha512";break;default:throw (new Error("Unsupported ECDSA curve: "+l.curve))}m=t.readBuffer();assert.ok(t.atEnd(),"extra trailing bytes on outer");t=new SSHBuffer({buffer:m});k=t.readPart()}else{k={data:m}}n=t.readPart();assert.ok(t.atEnd(),"extra trailing bytes");k.name="r";n.name="s";l.parts.push(k);l.parts.push(n);return(new Signature(l))}Signature.isSignature=function(c,d){return(utils.isCompatible(c,Signature,d))};Signature.prototype._sshpkApiVersion=[2,1];Signature._oldVersionDetect=function(b){assert.func(b.toBuffer);if(b.hasOwnProperty("hashAlgorithm")){return([2,0])}return([1,0])};