module.exports={read:read,readPkcs8:readPkcs8,write:write,writePkcs8:writePkcs8,readECDSACurve:readECDSACurve,writeECDSACurve:writeECDSACurve};var assert=require("assert-plus");var asn1=require("asn1");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pem=require("./pem");function read(c,d){return(pem.read(c,d,"pkcs8"))}function write(c,d){return(pem.write(c,d,"pkcs8"))}function readMPInt(c,d){assert.strictEqual(c.peek(),asn1.Ber.Integer,d+" is not an Integer");return(utils.mpNormalize(c.readString(asn1.Ber.Integer,true)))}function readPkcs8(j,h,f){if(f.peek()===asn1.Ber.Integer){assert.strictEqual(h,"private","unexpected Integer at start of public key");f.readString(asn1.Ber.Integer,true)}f.readSequence();var i=f.offset+f.length;var g=f.readOID();switch(g){case"1.2.840.113549.1.1.1":f._offset=i;if(h==="public"){return(readPkcs8RSAPublic(f))}else{return(readPkcs8RSAPrivate(f))}case"1.2.840.10040.4.1":if(h==="public"){return(readPkcs8DSAPublic(f))}else{return(readPkcs8DSAPrivate(f))}case"1.2.840.10045.2.1":if(h==="public"){return(readPkcs8ECDSAPublic(f))}else{return(readPkcs8ECDSAPrivate(f))}case"1.3.101.112":if(h==="public"){return(readPkcs8EdDSAPublic(f))}else{return(readPkcs8EdDSAPrivate(f))}case"1.3.101.110":if(h==="public"){return(readPkcs8X25519Public(f))}else{return(readPkcs8X25519Private(f))}default:throw (new Error("Unknown key type OID "+g))}}function readPkcs8RSAPublic(g){g.readSequence(asn1.Ber.BitString);g.readByte();g.readSequence();var e=readMPInt(g,"modulus");var f=readMPInt(g,"exponent");var h={type:"rsa",source:g.originalInput,parts:[{name:"e",data:f},{name:"n",data:e}]};return(new Key(h))}function readPkcs8RSAPrivate(q){q.readSequence(asn1.Ber.OctetString);q.readSequence();var t=readMPInt(q,"version");assert.equal(t[0],0,"unknown RSA private key version");var e=readMPInt(q,"modulus");var s=readMPInt(q,"public exponent");var r=readMPInt(q,"private exponent");var n=readMPInt(q,"prime1");var o=readMPInt(q,"prime2");var v=readMPInt(q,"exponent1");var d=readMPInt(q,"exponent2");var u=readMPInt(q,"iqmp");var p={type:"rsa",parts:[{name:"n",data:e},{name:"e",data:s},{name:"d",data:r},{name:"iqmp",data:u},{name:"p",data:n},{name:"q",data:o},{name:"dmodp",data:v},{name:"dmodq",data:d}]};return(new PrivateKey(p))}function readPkcs8DSAPublic(h){h.readSequence();var l=readMPInt(h,"p");var g=readMPInt(h,"q");var i=readMPInt(h,"g");h.readSequence(asn1.Ber.BitString);h.readByte();var k=readMPInt(h,"y");var j={type:"dsa",parts:[{name:"p",data:l},{name:"q",data:g},{name:"g",data:i},{name:"y",data:k}]};return(new Key(j))}function readPkcs8DSAPrivate(i){i.readSequence();var n=readMPInt(i,"p");var g=readMPInt(i,"q");var j=readMPInt(i,"g");i.readSequence(asn1.Ber.OctetString);var l=readMPInt(i,"x");var m=utils.calculateDSAPublic(j,n,l);var k={type:"dsa",parts:[{name:"p",data:n},{name:"q",data:g},{name:"g",data:j},{name:"y",data:m},{name:"x",data:l}]};return(new PrivateKey(k))}function readECDSACurve(v){var y,c;var D,u,k;if(v.peek()===asn1.Ber.OID){var j=v.readOID();c=Object.keys(algs.curves);for(D=0;D<c.length;++D){u=c[D];k=algs.curves[u];if(k.pkcs8oid===j){y=u;break}}}else{v.readSequence();var w=v.readString(asn1.Ber.Integer,true);assert.strictEqual(w[0],1,"ECDSA key not version 1");var x={};v.readSequence();var A=v.readOID();assert.strictEqual(A,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var z=x.p=utils.mpNormalize(v.readString(asn1.Ber.Integer,true));x.size=z.length*8-utils.countZeros(z);v.readSequence();x.a=utils.mpNormalize(v.readString(asn1.Ber.OctetString,true));x.b=utils.mpNormalize(v.readString(asn1.Ber.OctetString,true));if(v.peek()===asn1.Ber.BitString){x.s=v.readString(asn1.Ber.BitString,true)}x.G=v.readString(asn1.Ber.OctetString,true);assert.strictEqual(x.G[0],4,"uncompressed G is required");x.n=utils.mpNormalize(v.readString(asn1.Ber.Integer,true));x.h=utils.mpNormalize(v.readString(asn1.Ber.Integer,true));assert.strictEqual(x.h[0],1,"a cofactor=1 curve is required");c=Object.keys(algs.curves);var B=Object.keys(x);for(D=0;D<c.length;++D){u=c[D];k=algs.curves[u];var p=true;for(var C=0;C<B.length;++C){var i=B[C];if(k[i]===undefined){continue}if(typeof(k[i])==="object"&&k[i].equals!==undefined){if(!k[i].equals(x[i])){p=false;break}}else{if(Buffer.isBuffer(k[i])){if(k[i].toString("binary")!==x[i].toString("binary")){p=false;break}}else{if(k[i]!==x[i]){p=false;break}}}}if(p){y=u;break}}}return(y)}function readPkcs8ECDSAPrivate(d){var l=readECDSACurve(d);assert.string(l,"a known elliptic curve");d.readSequence(asn1.Ber.OctetString);d.readSequence();var j=readMPInt(d,"version");assert.equal(j[0],1,"unknown version of ECDSA key");var k=d.readString(asn1.Ber.OctetString,true);d.readSequence(161);var h=d.readString(asn1.Ber.BitString,true);h=utils.ecNormalize(h);var i={type:"ecdsa",parts:[{name:"curve",data:new Buffer(l)},{name:"Q",data:h},{name:"d",data:k}]};return(new PrivateKey(i))}function readPkcs8ECDSAPublic(f){var e=readECDSACurve(f);assert.string(e,"a known elliptic curve");var g=f.readString(asn1.Ber.BitString,true);g=utils.ecNormalize(g);var h={type:"ecdsa",parts:[{name:"curve",data:new Buffer(e)},{name:"Q",data:g}]};return(new Key(h))}function readPkcs8EdDSAPublic(e){if(e.peek()===0){e.readByte()}var d=utils.readBitString(e);var f={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(d,32)}]};return(new Key(f))}function readPkcs8X25519Public(e){var d=utils.readBitString(e);var f={type:"curve25519",parts:[{name:"A",data:utils.zeroPadToLength(d,32)}]};return(new Key(f))}function readPkcs8EdDSAPrivate(e){if(e.peek()===0){e.readByte()}e.readSequence(asn1.Ber.OctetString);var g=e.readString(asn1.Ber.OctetString,true);g=utils.zeroPadToLength(g,32);var h;if(e.peek()===asn1.Ber.BitString){h=utils.readBitString(e);h=utils.zeroPadToLength(h,32)}else{h=utils.calculateED25519Public(g)}var f={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(h,32)},{name:"k",data:utils.zeroPadToLength(g,32)}]};return(new PrivateKey(f))}function readPkcs8X25519Private(e){if(e.peek()===0){e.readByte()}e.readSequence(asn1.Ber.OctetString);var g=e.readString(asn1.Ber.OctetString,true);g=utils.zeroPadToLength(g,32);var h=utils.calculateX25519Public(g);var f={type:"curve25519",parts:[{name:"A",data:utils.zeroPadToLength(h,32)},{name:"k",data:utils.zeroPadToLength(g,32)}]};return(new PrivateKey(f))}function writePkcs8(e,f){e.startSequence();if(PrivateKey.isPrivateKey(f)){var d=new Buffer(1);d[0]=0;e.writeBuffer(d,asn1.Ber.Integer)}e.startSequence();switch(f.type){case"rsa":e.writeOID("1.2.840.113549.1.1.1");if(PrivateKey.isPrivateKey(f)){writePkcs8RSAPrivate(f,e)}else{writePkcs8RSAPublic(f,e)}break;case"dsa":e.writeOID("1.2.840.10040.4.1");if(PrivateKey.isPrivateKey(f)){writePkcs8DSAPrivate(f,e)}else{writePkcs8DSAPublic(f,e)}break;case"ecdsa":e.writeOID("1.2.840.10045.2.1");if(PrivateKey.isPrivateKey(f)){writePkcs8ECDSAPrivate(f,e)}else{writePkcs8ECDSAPublic(f,e)}break;case"ed25519":e.writeOID("1.3.101.112");if(PrivateKey.isPrivateKey(f)){throw (new Error("Ed25519 private keys in pkcs8 format are not supported"))}writePkcs8EdDSAPublic(f,e);break;default:throw (new Error("Unsupported key type: "+f.type))}e.endSequence()}function writePkcs8RSAPrivate(f,e){e.writeNull();e.endSequence();e.startSequence(asn1.Ber.OctetString);e.startSequence();var d=new Buffer(1);d[0]=0;e.writeBuffer(d,asn1.Ber.Integer);e.writeBuffer(f.part.n.data,asn1.Ber.Integer);e.writeBuffer(f.part.e.data,asn1.Ber.Integer);e.writeBuffer(f.part.d.data,asn1.Ber.Integer);e.writeBuffer(f.part.p.data,asn1.Ber.Integer);e.writeBuffer(f.part.q.data,asn1.Ber.Integer);if(!f.part.dmodp||!f.part.dmodq){utils.addRSAMissing(f)}e.writeBuffer(f.part.dmodp.data,asn1.Ber.Integer);e.writeBuffer(f.part.dmodq.data,asn1.Ber.Integer);e.writeBuffer(f.part.iqmp.data,asn1.Ber.Integer);e.endSequence();e.endSequence()}function writePkcs8RSAPublic(d,c){c.writeNull();c.endSequence();c.startSequence(asn1.Ber.BitString);c.writeByte(0);c.startSequence();c.writeBuffer(d.part.n.data,asn1.Ber.Integer);c.writeBuffer(d.part.e.data,asn1.Ber.Integer);c.endSequence();c.endSequence()}function writePkcs8DSAPrivate(d,c){c.startSequence();c.writeBuffer(d.part.p.data,asn1.Ber.Integer);c.writeBuffer(d.part.q.data,asn1.Ber.Integer);c.writeBuffer(d.part.g.data,asn1.Ber.Integer);c.endSequence();c.endSequence();c.startSequence(asn1.Ber.OctetString);c.writeBuffer(d.part.x.data,asn1.Ber.Integer);c.endSequence()}function writePkcs8DSAPublic(d,c){c.startSequence();c.writeBuffer(d.part.p.data,asn1.Ber.Integer);c.writeBuffer(d.part.q.data,asn1.Ber.Integer);c.writeBuffer(d.part.g.data,asn1.Ber.Integer);c.endSequence();c.endSequence();c.startSequence(asn1.Ber.BitString);c.writeByte(0);c.writeBuffer(d.part.y.data,asn1.Ber.Integer);c.endSequence()}function writeECDSACurve(k,i){var h=algs.curves[k.curve];if(h.pkcs8oid){i.writeOID(h.pkcs8oid)}else{i.startSequence();var l=new Buffer(1);l.writeUInt8(1,0);i.writeBuffer(l,asn1.Ber.Integer);i.startSequence();i.writeOID("1.2.840.10045.1.1");i.writeBuffer(h.p,asn1.Ber.Integer);i.endSequence();i.startSequence();var a=h.p;if(a[0]===0){a=a.slice(1)}i.writeBuffer(a,asn1.Ber.OctetString);i.writeBuffer(h.b,asn1.Ber.OctetString);i.writeBuffer(h.s,asn1.Ber.BitString);i.endSequence();i.writeBuffer(h.G,asn1.Ber.OctetString);i.writeBuffer(h.n,asn1.Ber.Integer);var j=h.h;if(!j){j=new Buffer(1);j[0]=1}i.writeBuffer(j,asn1.Ber.Integer);i.endSequence()}}function writePkcs8ECDSAPublic(d,e){writeECDSACurve(d,e);e.endSequence();var f=utils.ecNormalize(d.part.Q.data,true);e.writeBuffer(f,asn1.Ber.BitString)}function writePkcs8ECDSAPrivate(g,e){writeECDSACurve(g,e);e.endSequence();e.startSequence(asn1.Ber.OctetString);e.startSequence();var h=new Buffer(1);h[0]=1;e.writeBuffer(h,asn1.Ber.Integer);e.writeBuffer(g.part.d.data,asn1.Ber.OctetString);e.startSequence(161);var f=utils.ecNormalize(g.part.Q.data,true);e.writeBuffer(f,asn1.Ber.BitString);e.endSequence();e.endSequence();e.endSequence()}function writePkcs8EdDSAPublic(d,c){c.endSequence();utils.writeBitString(c,d.part.A.data)}function writePkcs8EdDSAPrivate(f,e){e.endSequence();var d=utils.mpNormalize(f.part.k.data,true);e.startSequence(asn1.Ber.OctetString);e.writeBuffer(d,asn1.Ber.OctetString);e.endSequence()};