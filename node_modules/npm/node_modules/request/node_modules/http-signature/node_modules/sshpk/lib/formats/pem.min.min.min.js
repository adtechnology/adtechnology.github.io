module.exports={read:read,write:write};var assert=require("assert-plus");var asn1=require("asn1");var crypto=require("crypto");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pkcs1=require("./pkcs1");var pkcs8=require("./pkcs8");var sshpriv=require("./ssh-private");var rfc4253=require("./rfc4253");var errors=require("../errors");function read(k,j,n){var c=k;if(typeof(k)!=="string"){assert.buffer(k,"buf");k=k.toString("ascii")}var f=k.trim().split("\n");var i=f[0].match(/[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(i,"invalid PEM header");var b=f[f.length-1].match(/[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(b,"invalid PEM footer");assert.equal(i[2],b[2]);var l=i[2].toLowerCase();var p;if(i[1]){assert.equal(i[1],b[1],"PEM header and footer mismatch");p=i[1].trim()}var h={};while(true){f=f.slice(1);i=f[0].match(/^([A-Za-z0-9-]+): (.+)$/);if(!i){break}h[i[1].toLowerCase()]=i[2]}var d,s,o;if(h["proc-type"]){var g=h["proc-type"].split(",");if(g[0]==="4"&&g[1]==="ENCRYPTED"){if(typeof(j.passphrase)==="string"){j.passphrase=new Buffer(j.passphrase,"utf-8")}if(!Buffer.isBuffer(j.passphrase)){throw (new errors.KeyEncryptedError(j.filename,"PEM"))}else{g=h["dek-info"].split(",");assert.ok(g.length===2);d=g[0].toLowerCase();o=new Buffer(g[1],"hex");s=utils.opensslKeyDeriv(d,o,j.passphrase,1).key}}}f=f.slice(0,-1).join("");k=new Buffer(f,"base64");if(d&&s&&o){var r=crypto.createDecipheriv(d,s,o);var a,e=[];r.once("error",function(m){if(m.toString().indexOf("bad decrypt")!==-1){throw (new Error("Incorrect passphrase supplied, could not decrypt key"))}throw (m)});r.write(k);r.end();while((a=r.read())!==null){e.push(a)}k=Buffer.concat(e)}if(p&&p.toLowerCase()==="openssh"){return(sshpriv.readSSHPrivate(l,k,j))}if(p&&p.toLowerCase()==="ssh2"){return(rfc4253.readType(l,k,j))}var q=new asn1.BerReader(k);q.originalInput=c;q.readSequence();if(p){if(n){assert.strictEqual(n,"pkcs1")}return(pkcs1.readPkcs1(p,l,q))}else{if(n){assert.strictEqual(n,"pkcs8")}return(pkcs8.readPkcs8(p,l,q))}}function write(e,f,d){assert.object(e);var g={ecdsa:"EC",rsa:"RSA",dsa:"DSA",ed25519:"EdDSA"}[e.type];var a;var c=new asn1.BerWriter();if(PrivateKey.isPrivateKey(e)){if(d&&d==="pkcs8"){a="PRIVATE KEY";pkcs8.writePkcs8(c,e)}else{if(d){assert.strictEqual(d,"pkcs1")}a=g+" PRIVATE KEY";pkcs1.writePkcs1(c,e)}}else{if(Key.isKey(e)){if(d&&d==="pkcs1"){a=g+" PUBLIC KEY";pkcs1.writePkcs1(c,e)}else{if(d){assert.strictEqual(d,"pkcs8")}a="PUBLIC KEY";pkcs8.writePkcs8(c,e)}}else{throw (new Error("key is not a Key or PrivateKey"))}}var m=c.buffer.toString("base64");var b=m.length+(m.length/64)+18+16+a.length*2+10;var j=new Buffer(b);var h=0;h+=j.write("-----BEGIN "+a+"-----\n",h);for(var l=0;l<m.length;){var k=l+64;if(k>m.length){k=m.length}h+=j.write(m.slice(l,k),h);j[h++]=10;l=k}h+=j.write("-----END "+a+"-----\n",h);return(j.slice(0,h))};