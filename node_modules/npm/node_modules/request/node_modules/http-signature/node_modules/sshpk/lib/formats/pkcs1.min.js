module.exports={read:read,readPkcs1:readPkcs1,write:write,writePkcs1:writePkcs1};var assert=require("assert-plus");var asn1=require("asn1");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pem=require("./pem");var pkcs8=require("./pkcs8");var readECDSACurve=pkcs8.readECDSACurve;function read(b,a){return(pem.read(b,a,"pkcs1"))}function write(b,a){return(pem.write(b,a,"pkcs1"))}function readMPInt(b,a){assert.strictEqual(b.peek(),asn1.Ber.Integer,a+" is not an Integer");return(utils.mpNormalize(b.readString(asn1.Ber.Integer,true)))}function readPkcs1(c,a,b){switch(c){case"RSA":if(a==="public"){return(readPkcs1RSAPublic(b))}else{if(a==="private"){return(readPkcs1RSAPrivate(b))}}throw (new Error("Unknown key type: "+a));case"DSA":if(a==="public"){return(readPkcs1DSAPublic(b))}else{if(a==="private"){return(readPkcs1DSAPrivate(b))}}throw (new Error("Unknown key type: "+a));case"EC":case"ECDSA":if(a==="private"){return(readPkcs1ECDSAPrivate(b))}else{if(a==="public"){return(readPkcs1ECDSAPublic(b))}}throw (new Error("Unknown key type: "+a));case"EDDSA":case"EdDSA":if(a==="private"){return(readPkcs1EdDSAPrivate(b))}throw (new Error(a+" keys not supported with EdDSA"));default:throw (new Error("Unknown key algo: "+c))}}function readPkcs1RSAPublic(b){var d=readMPInt(b,"modulus");var c=readMPInt(b,"exponent");var a={type:"rsa",parts:[{name:"e",data:c},{name:"n",data:d}]};return(new Key(a))}function readPkcs1RSAPrivate(l){var j=readMPInt(l,"version");assert.strictEqual(j[0],0);var c=readMPInt(l,"modulus");var i=readMPInt(l,"public exponent");var k=readMPInt(l,"private exponent");var b=readMPInt(l,"prime1");var a=readMPInt(l,"prime2");var g=readMPInt(l,"exponent1");var f=readMPInt(l,"exponent2");var h=readMPInt(l,"iqmp");var m={type:"rsa",parts:[{name:"n",data:c},{name:"e",data:i},{name:"d",data:k},{name:"iqmp",data:h},{name:"p",data:b},{name:"q",data:a},{name:"dmodp",data:g},{name:"dmodq",data:f}]};return(new PrivateKey(m))}function readPkcs1DSAPrivate(e){var b=readMPInt(e,"version");assert.strictEqual(b.readUInt8(0),0);var h=readMPInt(e,"p");var f=readMPInt(e,"q");var d=readMPInt(e,"g");var i=readMPInt(e,"y");var a=readMPInt(e,"x");var c={type:"dsa",parts:[{name:"p",data:h},{name:"q",data:f},{name:"g",data:d},{name:"y",data:i},{name:"x",data:a}]};return(new PrivateKey(c))}function readPkcs1EdDSAPrivate(f){var b=readMPInt(f,"version");assert.strictEqual(b.readUInt8(0),1);var c=f.readString(asn1.Ber.OctetString,true);f.readSequence(160);var e=f.readOID();assert.strictEqual(e,"1.3.101.112","the ed25519 curve identifier");f.readSequence(161);var a=utils.readBitString(f);var d={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(a,32)},{name:"k",data:c}]};return(new PrivateKey(d))}function readPkcs1DSAPublic(c){var f=readMPInt(c,"y");var e=readMPInt(c,"p");var d=readMPInt(c,"q");var b=readMPInt(c,"g");var a={type:"dsa",parts:[{name:"y",data:f},{name:"p",data:e},{name:"q",data:d},{name:"g",data:b}]};return(new Key(a))}function readPkcs1ECDSAPublic(h){h.readSequence();var d=h.readOID();assert.strictEqual(d,"1.2.840.10045.2.1","must be ecPublicKey");var f=h.readOID();var a;var l=Object.keys(algs.curves);for(var e=0;e<l.length;++e){var i=l[e];var b=algs.curves[i];if(b.pkcs8oid===f){a=i;break}}assert.string(a,"a known ECDSA named curve");var g=h.readString(asn1.Ber.BitString,true);g=utils.ecNormalize(g);var k={type:"ecdsa",parts:[{name:"curve",data:new Buffer(a)},{name:"Q",data:g}]};return(new Key(k))}function readPkcs1ECDSAPrivate(e){var a=readMPInt(e,"version");assert.strictEqual(a.readUInt8(0),1);var g=e.readString(asn1.Ber.OctetString,true);e.readSequence(160);var f=readECDSACurve(e);assert.string(f,"a known elliptic curve");e.readSequence(161);var c=e.readString(asn1.Ber.BitString,true);c=utils.ecNormalize(c);var b={type:"ecdsa",parts:[{name:"curve",data:new Buffer(f)},{name:"Q",data:c},{name:"d",data:g}]};return(new PrivateKey(b))}function writePkcs1(b,a){b.startSequence();switch(a.type){case"rsa":if(PrivateKey.isPrivateKey(a)){writePkcs1RSAPrivate(b,a)}else{writePkcs1RSAPublic(b,a)}break;case"dsa":if(PrivateKey.isPrivateKey(a)){writePkcs1DSAPrivate(b,a)}else{writePkcs1DSAPublic(b,a)}break;case"ecdsa":if(PrivateKey.isPrivateKey(a)){writePkcs1ECDSAPrivate(b,a)}else{writePkcs1ECDSAPublic(b,a)}break;case"ed25519":if(PrivateKey.isPrivateKey(a)){writePkcs1EdDSAPrivate(b,a)}else{writePkcs1EdDSAPublic(b,a)}break;default:throw (new Error("Unknown key algo: "+a.type))}b.endSequence()}function writePkcs1RSAPublic(b,a){b.writeBuffer(a.part.n.data,asn1.Ber.Integer);b.writeBuffer(a.part.e.data,asn1.Ber.Integer)}function writePkcs1RSAPrivate(c,b){var a=new Buffer(1);a[0]=0;c.writeBuffer(a,asn1.Ber.Integer);c.writeBuffer(b.part.n.data,asn1.Ber.Integer);c.writeBuffer(b.part.e.data,asn1.Ber.Integer);c.writeBuffer(b.part.d.data,asn1.Ber.Integer);c.writeBuffer(b.part.p.data,asn1.Ber.Integer);c.writeBuffer(b.part.q.data,asn1.Ber.Integer);if(!b.part.dmodp||!b.part.dmodq){utils.addRSAMissing(b)}c.writeBuffer(b.part.dmodp.data,asn1.Ber.Integer);c.writeBuffer(b.part.dmodq.data,asn1.Ber.Integer);c.writeBuffer(b.part.iqmp.data,asn1.Ber.Integer)}function writePkcs1DSAPrivate(c,b){var a=new Buffer(1);a[0]=0;c.writeBuffer(a,asn1.Ber.Integer);c.writeBuffer(b.part.p.data,asn1.Ber.Integer);c.writeBuffer(b.part.q.data,asn1.Ber.Integer);c.writeBuffer(b.part.g.data,asn1.Ber.Integer);c.writeBuffer(b.part.y.data,asn1.Ber.Integer);c.writeBuffer(b.part.x.data,asn1.Ber.Integer)}function writePkcs1DSAPublic(b,a){b.writeBuffer(a.part.y.data,asn1.Ber.Integer);b.writeBuffer(a.part.p.data,asn1.Ber.Integer);b.writeBuffer(a.part.q.data,asn1.Ber.Integer);b.writeBuffer(a.part.g.data,asn1.Ber.Integer)}function writePkcs1ECDSAPublic(d,a){d.startSequence();d.writeOID("1.2.840.10045.2.1");var e=a.part.curve.data.toString();var c=algs.curves[e].pkcs8oid;assert.string(c,"a known ECDSA named curve");d.writeOID(c);d.endSequence();var b=utils.ecNormalize(a.part.Q.data,true);d.writeBuffer(b,asn1.Ber.BitString)}function writePkcs1ECDSAPrivate(e,b){var a=new Buffer(1);a[0]=1;e.writeBuffer(a,asn1.Ber.Integer);e.writeBuffer(b.part.d.data,asn1.Ber.OctetString);e.startSequence(160);var f=b.part.curve.data.toString();var d=algs.curves[f].pkcs8oid;assert.string(d,"a known ECDSA named curve");e.writeOID(d);e.endSequence();e.startSequence(161);var c=utils.ecNormalize(b.part.Q.data,true);e.writeBuffer(c,asn1.Ber.BitString);e.endSequence()}function writePkcs1EdDSAPrivate(c,b){var a=new Buffer(1);a[0]=1;c.writeBuffer(a,asn1.Ber.Integer);c.writeBuffer(b.part.k.data,asn1.Ber.OctetString);c.startSequence(160);c.writeOID("1.3.101.112");c.endSequence();c.startSequence(161);utils.writeBitString(c,b.part.A.data);c.endSequence()}function writePkcs1EdDSAPublic(b,a){throw (new Error("Public keys are not supported for EdDSA PKCS#1"))};