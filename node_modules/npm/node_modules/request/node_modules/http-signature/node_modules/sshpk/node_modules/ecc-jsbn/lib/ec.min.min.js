var BigInteger=require("jsbn").BigInteger;var Barrett=BigInteger.prototype.Barrett;function ECFieldElementFp(c,d){this.x=d;this.q=c}function feFpEquals(b){if(b==this){return true}return(this.q.equals(b.q)&&this.x.equals(b.x))}function feFpToBigInteger(){return this.x}function feFpNegate(){return new ECFieldElementFp(this.q,this.x.negate().mod(this.q))}function feFpAdd(b){return new ECFieldElementFp(this.q,this.x.add(b.toBigInteger()).mod(this.q))}function feFpSubtract(b){return new ECFieldElementFp(this.q,this.x.subtract(b.toBigInteger()).mod(this.q))}function feFpMultiply(b){return new ECFieldElementFp(this.q,this.x.multiply(b.toBigInteger()).mod(this.q))}function feFpSquare(){return new ECFieldElementFp(this.q,this.x.square().mod(this.q))}function feFpDivide(b){return new ECFieldElementFp(this.q,this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q))}ECFieldElementFp.prototype.equals=feFpEquals;ECFieldElementFp.prototype.toBigInteger=feFpToBigInteger;ECFieldElementFp.prototype.negate=feFpNegate;ECFieldElementFp.prototype.add=feFpAdd;ECFieldElementFp.prototype.subtract=feFpSubtract;ECFieldElementFp.prototype.multiply=feFpMultiply;ECFieldElementFp.prototype.square=feFpSquare;ECFieldElementFp.prototype.divide=feFpDivide;function ECPointFp(h,f,g,e){this.curve=h;this.x=f;this.y=g;if(e==null){this.z=BigInteger.ONE}else{this.z=e}this.zinv=null}function pointFpGetX(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}var b=this.x.toBigInteger().multiply(this.zinv);this.curve.reduce(b);return this.curve.fromBigInteger(b)}function pointFpGetY(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}var b=this.y.toBigInteger().multiply(this.zinv);this.curve.reduce(b);return this.curve.fromBigInteger(b)}function pointFpEquals(e){if(e==this){return true}if(this.isInfinity()){return e.isInfinity()}if(e.isInfinity()){return this.isInfinity()}var f,d;f=e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q);if(!f.equals(BigInteger.ZERO)){return false}d=e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q);return d.equals(BigInteger.ZERO)}function pointFpIsInfinity(){if((this.x==null)&&(this.y==null)){return true}return this.z.equals(BigInteger.ZERO)&&!this.y.toBigInteger().equals(BigInteger.ZERO)}function pointFpNegate(){return new ECPointFp(this.curve,this.x,this.y.negate(),this.z)}function pointFpAdd(u){if(this.isInfinity()){return u}if(u.isInfinity()){return this}var b=u.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(u.z)).mod(this.curve.q);var r=u.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(u.z)).mod(this.curve.q);if(BigInteger.ZERO.equals(r)){if(BigInteger.ZERO.equals(b)){return this.twice()}return this.curve.getInfinity()}var w=new BigInteger("3");var B=this.x.toBigInteger();var s=this.y.toBigInteger();var D=u.x.toBigInteger();var v=u.y.toBigInteger();var t=r.square();var x=t.multiply(r);var C=B.multiply(t);var z=b.square().multiply(this.z);var E=z.subtract(C.shiftLeft(1)).multiply(u.z).subtract(x).multiply(r).mod(this.curve.q);var y=C.multiply(w).multiply(b).subtract(s.multiply(x)).subtract(z.multiply(b)).multiply(u.z).add(b.multiply(x)).mod(this.curve.q);var A=x.multiply(this.z).multiply(u.z).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(E),this.curve.fromBigInteger(y),A)}function pointFpTwice(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var o=new BigInteger("3");var t=this.x.toBigInteger();var n=this.y.toBigInteger();var r=n.multiply(this.z);var l=r.multiply(n).mod(this.curve.q);var m=this.curve.a.toBigInteger();var a=t.square().multiply(o);if(!BigInteger.ZERO.equals(m)){a=a.add(this.z.square().multiply(m))}a=a.mod(this.curve.q);var u=a.square().subtract(t.shiftLeft(3).multiply(l)).shiftLeft(1).multiply(r).mod(this.curve.q);var p=a.multiply(o).multiply(t).subtract(l.shiftLeft(1)).shiftLeft(2).multiply(l).subtract(a.square().multiply(a)).mod(this.curve.q);var s=r.square().multiply(r).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(u),this.curve.fromBigInteger(p),s)}function pointFpMultiply(e){if(this.isInfinity()){return this}if(e.signum()==0){return this.curve.getInfinity()}var m=e;var n=m.multiply(new BigInteger("3"));var i=this.negate();var o=this;var p;for(p=n.bitLength()-2;p>0;--p){o=o.twice();var h=n.testBit(p);var k=m.testBit(p);if(h!=k){o=o.add(h?this:i)}}return o}function pointFpMultiplyTwo(l,h,g){var k;if(l.bitLength()>g.bitLength()){k=l.bitLength()-1}else{k=g.bitLength()-1}var i=this.curve.getInfinity();var j=this.add(h);while(k>=0){i=i.twice();if(l.testBit(k)){if(g.testBit(k)){i=i.add(j)}else{i=i.add(this)}}else{if(g.testBit(k)){i=i.add(h)}}--k}return i}ECPointFp.prototype.getX=pointFpGetX;ECPointFp.prototype.getY=pointFpGetY;ECPointFp.prototype.equals=pointFpEquals;ECPointFp.prototype.isInfinity=pointFpIsInfinity;ECPointFp.prototype.negate=pointFpNegate;ECPointFp.prototype.add=pointFpAdd;ECPointFp.prototype.twice=pointFpTwice;ECPointFp.prototype.multiply=pointFpMultiply;ECPointFp.prototype.multiplyTwo=pointFpMultiplyTwo;function ECCurveFp(a,b,f){this.q=a;this.a=this.fromBigInteger(b);this.b=this.fromBigInteger(f);this.infinity=new ECPointFp(this,null,null);this.reducer=new Barrett(this.q)}function curveFpGetQ(){return this.q}function curveFpGetA(){return this.a}function curveFpGetB(){return this.b}function curveFpEquals(b){if(b==this){return true}return(this.q.equals(b.q)&&this.a.equals(b.a)&&this.b.equals(b.b))}function curveFpGetInfinity(){return this.infinity}function curveFpFromBigInteger(b){return new ECFieldElementFp(this.q,b)}function curveReduce(b){this.reducer.reduce(b)}function curveFpDecodePointHex(g){switch(parseInt(g.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var f=(g.length-2)/2;var h=g.substr(2,f);var e=g.substr(f+2,f);return new ECPointFp(this,this.fromBigInteger(new BigInteger(h,16)),this.fromBigInteger(new BigInteger(e,16)));default:return null}}function curveFpEncodePointHex(g){if(g.isInfinity()){return"00"}var h=g.getX().toBigInteger().toString(16);var f=g.getY().toBigInteger().toString(16);var e=this.getQ().toString(16).length;if((e%2)!=0){e++}while(h.length<e){h="0"+h}while(f.length<e){f="0"+f}return"04"+h+f}ECCurveFp.prototype.getQ=curveFpGetQ;ECCurveFp.prototype.getA=curveFpGetA;ECCurveFp.prototype.getB=curveFpGetB;ECCurveFp.prototype.equals=curveFpEquals;ECCurveFp.prototype.getInfinity=curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger=curveFpFromBigInteger;ECCurveFp.prototype.reduce=curveReduce;ECCurveFp.prototype.encodePointHex=curveFpEncodePointHex;ECCurveFp.prototype.decodePointHex=function(k){var l;switch(parseInt(k.substr(0,2),16)){case 0:return this.infinity;case 2:l=false;case 3:if(l==undefined){l=true}var p=k.length-2;var j=k.substr(2,p);var n=this.fromBigInteger(new BigInteger(j,16));var s=n.multiply(n.square().add(this.getA())).add(this.getB());var m=s.sqrt();if(m==null){throw"Invalid point compression"}var r=m.toBigInteger();if(r.testBit(0)!=l){m=this.fromBigInteger(this.getQ().subtract(r))}return new ECPointFp(this,n,m);case 4:case 6:case 7:var p=(k.length-2)/2;var j=k.substr(2,p);var o=k.substr(p+2,p);return new ECPointFp(this,this.fromBigInteger(new BigInteger(j,16)),this.fromBigInteger(new BigInteger(o,16)));default:return null}};ECCurveFp.prototype.encodeCompressedPointHex=function(g){if(g.isInfinity()){return"00"}var e=g.getX().toBigInteger().toString(16);var f=this.getQ().toString(16).length;if((f%2)!=0){f++}while(e.length<f){e="0"+e}var h;if(g.getY().toBigInteger().isEven()){h="02"}else{h="03"}return h+e};ECFieldElementFp.prototype.getR=function(){if(this.r!=undefined){return this.r}this.r=null;var d=this.q.bitLength();if(d>128){var c=this.q.shiftRight(d-64);if(c.intValue()==-1){this.r=BigInteger.ONE.shiftLeft(d).subtract(this.q)}}return this.r};ECFieldElementFp.prototype.modMult=function(c,d){return this.modReduce(c.multiply(d))};ECFieldElementFp.prototype.modReduce=function(f){if(this.getR()!=null){var g=q.bitLength();while(f.bitLength()>(g+1)){var h=f.shiftRight(g);var e=f.subtract(h.shiftLeft(g));if(!this.getR().equals(BigInteger.ONE)){h=h.multiply(this.getR())}f=h.add(e)}while(f.compareTo(q)>=0){f=f.subtract(q)}}else{f=f.mod(q)}return f};ECFieldElementFp.prototype.sqrt=function(){if(!this.q.testBit(0)){throw"unsupported"}if(this.q.testBit(1)){var n=new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));return n.square().equals(this)?n:null}var w=this.q.subtract(BigInteger.ONE);var p=w.shiftRight(1);if(!(this.x.modPow(p,this.q).equals(BigInteger.ONE))){return null}var m=w.shiftRight(2);var t=m.shiftLeft(1).add(BigInteger.ONE);var r=this.x;var s=modDouble(modDouble(r));var u,v;do{var o;do{o=new BigInteger(this.q.bitLength(),new SecureRandom())}while(o.compareTo(this.q)>=0||!(o.multiply(o).subtract(s).modPow(p,this.q).equals(w)));var k=this.lucasSequence(o,r,t);u=k[0];v=k[1];if(this.modMult(v,v).equals(s)){if(v.testBit(0)){v=v.add(q)}v=v.shiftRight(1);return new ECFieldElementFp(q,v)}}while(u.equals(BigInteger.ONE)||u.equals(w));return null};ECFieldElementFp.prototype.lucasSequence=function(o,p,t){var v=t.bitLength();var j=t.getLowestSetBit();var k=BigInteger.ONE;var r=BigInteger.TWO;var n=o;var w=BigInteger.ONE;var u=BigInteger.ONE;for(var s=v-1;s>=j+1;--s){w=this.modMult(w,u);if(t.testBit(s)){u=this.modMult(w,p);k=this.modMult(k,n);r=this.modReduce(n.multiply(r).subtract(o.multiply(w)));n=this.modReduce(n.multiply(n).subtract(u.shiftLeft(1)))}else{u=w;k=this.modReduce(k.multiply(r).subtract(w));n=this.modReduce(n.multiply(r).subtract(o.multiply(w)));r=this.modReduce(r.multiply(r).subtract(w.shiftLeft(1)))}}w=this.modMult(w,u);u=this.modMult(w,p);k=this.modReduce(k.multiply(r).subtract(w));r=this.modReduce(n.multiply(r).subtract(o.multiply(w)));w=this.modMult(w,u);for(var s=1;s<=j;++s){k=this.modMult(k,r);r=this.modReduce(r.multiply(r).subtract(w.shiftLeft(1)));w=this.modMult(w,w)}return[k,r]};var exports={ECCurveFp:ECCurveFp,ECPointFp:ECPointFp,ECFieldElementFp:ECFieldElementFp};module.exports=exports;