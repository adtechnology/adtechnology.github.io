module.exports={bufferSplit:bufferSplit,addRSAMissing:addRSAMissing,calculateDSAPublic:calculateDSAPublic,calculateED25519Public:calculateED25519Public,calculateX25519Public:calculateX25519Public,mpNormalize:mpNormalize,mpDenormalize:mpDenormalize,ecNormalize:ecNormalize,countZeros:countZeros,assertCompatible:assertCompatible,isCompatible:isCompatible,opensslKeyDeriv:opensslKeyDeriv,opensshCipherInfo:opensshCipherInfo,publicFromPrivateECDSA:publicFromPrivateECDSA,zeroPadToLength:zeroPadToLength,writeBitString:writeBitString,readBitString:readBitString};var assert=require("assert-plus");var PrivateKey=require("./private-key");var Key=require("./key");var crypto=require("crypto");var algs=require("./algs");var asn1=require("asn1");var ec,jsbn;var nacl;var MAX_CLASS_DEPTH=3;function isCompatible(l,i,g){if(l===null||typeof(l)!=="object"){return(false)}if(g===undefined){g=i.prototype._sshpkApiVersion}if(l instanceof i&&i.prototype._sshpkApiVersion[0]==g[0]){return(true)}var h=Object.getPrototypeOf(l);var k=0;while(h.constructor.name!==i.name){h=Object.getPrototypeOf(h);if(!h||++k>MAX_CLASS_DEPTH){return(false)}}if(h.constructor.name!==i.name){return(false)}var j=h._sshpkApiVersion;if(j===undefined){j=i._oldVersionDetect(l)}if(j[0]!=g[0]||j[1]<g[1]){return(false)}return(true)}function assertCompatible(n,k,h,j){if(j===undefined){j="object"}assert.ok(n,j+" must not be null");assert.object(n,j+" must be an object");if(h===undefined){h=k.prototype._sshpkApiVersion}if(n instanceof k&&k.prototype._sshpkApiVersion[0]==h[0]){return}var i=Object.getPrototypeOf(n);var m=0;while(i.constructor.name!==k.name){i=Object.getPrototypeOf(i);assert.ok(i&&++m<=MAX_CLASS_DEPTH,j+" must be a "+k.name+" instance")}assert.strictEqual(i.constructor.name,k.name,j+" must be a "+k.name+" instance");var l=i._sshpkApiVersion;if(l===undefined){l=k._oldVersionDetect(n)}assert.ok(l[0]==h[0]&&l[1]>=h[1],j+" must be compatible with "+k.name+" klass version "+h[0]+"."+h[1])}var CIPHER_LEN={"des-ede3-cbc":{key:7,iv:8},"aes-128-cbc":{key:16,iv:16}};var PKCS5_SALT_LEN=8;function opensslKeyDeriv(q,s,m,r){assert.buffer(s,"salt");assert.buffer(m,"passphrase");assert.number(r,"iteration count");var n=CIPHER_LEN[q];assert.object(n,"supported cipher");s=s.slice(0,PKCS5_SALT_LEN);var l,o,t;var p=new Buffer(0);while(p.length<n.key+n.iv){t=[];if(o){t.push(o)}t.push(m);t.push(s);l=Buffer.concat(t);for(var j=0;j<r;++j){l=crypto.createHash("md5").update(l).digest()}p=Buffer.concat([p,l]);o=l}return({key:p.slice(0,n.key),iv:p.slice(n.key,n.key+n.iv)})}function countZeros(g){var e=0,f=8;while(e<g.length){var h=(1<<f);if((g[e]&h)===h){break}f--;if(f<0){e++;f=8}}return(e*8+(8-f)-1)}function bufferSplit(j,h){assert.buffer(j);assert.string(h);var m=[];var k=0;var n=0;for(var i=0;i<j.length;++i){if(j[i]===h.charCodeAt(n)){++n}else{if(j[i]===h.charCodeAt(0)){n=1}else{n=0}}if(n>=h.length){var l=i+1;m.push(j.slice(k,l-n));k=l;n=0}}if(k<=j.length){m.push(j.slice(k,j.length))}return(m)}function ecNormalize(f,e){assert.buffer(f);if(f[0]===0&&f[1]===4){if(e){return(f)}return(f.slice(1))}else{if(f[0]===4){if(!e){return(f)}}else{while(f[0]===0){f=f.slice(1)}if(f[0]===2||f[0]===3){throw (new Error("Compressed elliptic curve points are not supported"))}if(f[0]!==4){throw (new Error("Not a valid elliptic curve point"))}if(!e){return(f)}}}var b=new Buffer(f.length+1);b[0]=0;f.copy(b,1);return(b)}function readBitString(e,d){if(d===undefined){d=asn1.Ber.BitString}var f=e.readString(d,true);assert.strictEqual(f[0],0,"bit strings with unused bits are not supported (0x"+f[0].toString(16)+")");return(f.slice(1))}function writeBitString(f,g,h){if(h===undefined){h=asn1.Ber.BitString}var b=new Buffer(g.length+1);b[0]=0;g.copy(b,1);f.writeBuffer(b,h)}function mpNormalize(d){assert.buffer(d);while(d.length>1&&d[0]===0&&(d[1]&128)===0){d=d.slice(1)}if((d[0]&128)===128){var b=new Buffer(d.length+1);b[0]=0;d.copy(b,1);d=b}return(d)}function mpDenormalize(b){assert.buffer(b);while(b.length>1&&b[0]===0){b=b.slice(1)}return(b)}function zeroPadToLength(e,f){assert.buffer(e);assert.number(f);while(e.length>f){assert.equal(e[0],0);e=e.slice(1)}while(e.length<f){var b=new Buffer(e.length+1);b[0]=0;e.copy(b,1);e=b}return(e)}function bigintToMpBuf(c){var d=new Buffer(c.toByteArray());d=mpNormalize(d);return(d)}function calculateDSAPublic(g,n,l){assert.buffer(g);assert.buffer(n);assert.buffer(l);try{var j=require("jsbn").BigInteger}catch(e){throw (new Error("To load a PKCS#8 format DSA private key, the node jsbn library is required."))}g=new j(g);n=new j(n);l=new j(l);var m=g.modPow(l,n);var k=bigintToMpBuf(m);return(k)}function calculateED25519Public(c){assert.buffer(c);if(nacl===undefined){nacl=require("tweetnacl")}var d=nacl.sign.keyPair.fromSeed(new Uint8Array(c));return(new Buffer(d.publicKey))}function calculateX25519Public(c){assert.buffer(c);if(nacl===undefined){nacl=require("tweetnacl")}var d=nacl.box.keyPair.fromSeed(new Uint8Array(c));return(new Buffer(d.publicKey))}function addRSAMissing(d){assert.object(d);assertCompatible(d,PrivateKey,[1,1]);try{var e=require("jsbn").BigInteger}catch(m){throw (new Error("To write a PEM private key from this source, the node jsbn lib is required."))}var l=new e(d.part.d.data);var p;if(!d.part.dmodp){var q=new e(d.part.p.data);var n=l.mod(q.subtract(1));p=bigintToMpBuf(n);d.part.dmodp={name:"dmodp",data:p};d.parts.push(d.part.dmodp)}if(!d.part.dmodq){var r=new e(d.part.q.data);var o=l.mod(r.subtract(1));p=bigintToMpBuf(o);d.part.dmodq={name:"dmodq",data:p};d.parts.push(d.part.dmodq)}}function publicFromPrivateECDSA(a,s){assert.string(a,"curveName");assert.buffer(s);if(ec===undefined){ec=require("ecc-jsbn/lib/ec")}if(jsbn===undefined){jsbn=require("jsbn").BigInteger}var p=algs.curves[a];var r=new jsbn(p.p);var v=new jsbn(p.a);var w=new jsbn(p.b);var q=new ec.ECCurveFp(r,v,w);var t=q.decodePointHex(p.G.toString("hex"));var x=new jsbn(mpNormalize(s));var b=t.multiply(x);b=new Buffer(q.encodePointHex(b),"hex");var d=[];d.push({name:"curve",data:new Buffer(a)});d.push({name:"Q",data:b});var u=new Key({type:"ecdsa",curve:q,parts:d});return(u)}function opensshCipherInfo(d){var c={};switch(d){case"3des-cbc":c.keySize=24;c.blockSize=8;c.opensslName="des-ede3-cbc";break;case"blowfish-cbc":c.keySize=16;c.blockSize=8;c.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":c.keySize=16;c.blockSize=16;c.opensslName="aes-128-"+d.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":c.keySize=24;c.blockSize=16;c.opensslName="aes-192-"+d.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":c.keySize=32;c.blockSize=16;c.opensslName="aes-256-"+d.slice(7,10);break;default:throw (new Error('Unsupported openssl cipher "'+d+'"'))}return(c)};