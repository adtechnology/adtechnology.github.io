module.exports={read:read,readPkcs1:readPkcs1,write:write,writePkcs1:writePkcs1};var assert=require("assert-plus");var asn1=require("asn1");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pem=require("./pem");var pkcs8=require("./pkcs8");var readECDSACurve=pkcs8.readECDSACurve;function read(c,d){return(pem.read(c,d,"pkcs1"))}function write(c,d){return(pem.write(c,d,"pkcs1"))}function readMPInt(c,d){assert.strictEqual(c.peek(),asn1.Ber.Integer,d+" is not an Integer");return(utils.mpNormalize(c.readString(asn1.Ber.Integer,true)))}function readPkcs1(f,e,d){switch(f){case"RSA":if(e==="public"){return(readPkcs1RSAPublic(d))}else{if(e==="private"){return(readPkcs1RSAPrivate(d))}}throw (new Error("Unknown key type: "+e));case"DSA":if(e==="public"){return(readPkcs1DSAPublic(d))}else{if(e==="private"){return(readPkcs1DSAPrivate(d))}}throw (new Error("Unknown key type: "+e));case"EC":case"ECDSA":if(e==="private"){return(readPkcs1ECDSAPrivate(d))}else{if(e==="public"){return(readPkcs1ECDSAPublic(d))}}throw (new Error("Unknown key type: "+e));case"EDDSA":case"EdDSA":if(e==="private"){return(readPkcs1EdDSAPrivate(d))}throw (new Error(e+" keys not supported with EdDSA"));default:throw (new Error("Unknown key algo: "+f))}}function readPkcs1RSAPublic(e){var g=readMPInt(e,"modulus");var h=readMPInt(e,"exponent");var f={type:"rsa",parts:[{name:"e",data:h},{name:"n",data:g}]};return(new Key(f))}function readPkcs1RSAPrivate(e){var o=readMPInt(e,"version");assert.strictEqual(o[0],0);var t=readMPInt(e,"modulus");var p=readMPInt(e,"public exponent");var n=readMPInt(e,"private exponent");var u=readMPInt(e,"prime1");var v=readMPInt(e,"prime2");var r=readMPInt(e,"exponent1");var s=readMPInt(e,"exponent2");var q=readMPInt(e,"iqmp");var d={type:"rsa",parts:[{name:"n",data:t},{name:"e",data:p},{name:"d",data:n},{name:"iqmp",data:q},{name:"p",data:u},{name:"q",data:v},{name:"dmodp",data:r},{name:"dmodq",data:s}]};return(new PrivateKey(d))}function readPkcs1DSAPrivate(n){var g=readMPInt(n,"version");assert.strictEqual(g.readUInt8(0),0);var l=readMPInt(n,"p");var m=readMPInt(n,"q");var o=readMPInt(n,"g");var k=readMPInt(n,"y");var j=readMPInt(n,"x");var p={type:"dsa",parts:[{name:"p",data:l},{name:"q",data:m},{name:"g",data:o},{name:"y",data:k},{name:"x",data:j}]};return(new PrivateKey(p))}function readPkcs1EdDSAPrivate(i){var g=readMPInt(i,"version");assert.strictEqual(g.readUInt8(0),1);var l=i.readString(asn1.Ber.OctetString,true);i.readSequence(160);var j=i.readOID();assert.strictEqual(j,"1.3.101.112","the ed25519 curve identifier");i.readSequence(161);var h=utils.readBitString(i);var k={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(h,32)},{name:"k",data:l}]};return(new PrivateKey(k))}function readPkcs1DSAPublic(l){var i=readMPInt(l,"y");var j=readMPInt(l,"p");var k=readMPInt(l,"q");var g=readMPInt(l,"g");var h={type:"dsa",parts:[{name:"y",data:i},{name:"p",data:j},{name:"q",data:k},{name:"g",data:g}]};return(new Key(h))}function readPkcs1ECDSAPublic(n){n.readSequence();var r=n.readOID();assert.strictEqual(r,"1.2.840.10045.2.1","must be ecPublicKey");var p=n.readOID();var t;var c=Object.keys(algs.curves);for(var q=0;q<c.length;++q){var m=c[q];var s=algs.curves[m];if(s.pkcs8oid===p){t=m;break}}assert.string(t,"a known ECDSA named curve");var o=n.readString(asn1.Ber.BitString,true);o=utils.ecNormalize(o);var j={type:"ecdsa",parts:[{name:"curve",data:new Buffer(t)},{name:"Q",data:o}]};return(new Key(j))}function readPkcs1ECDSAPrivate(k){var h=readMPInt(k,"version");assert.strictEqual(h.readUInt8(0),1);var i=k.readString(asn1.Ber.OctetString,true);k.readSequence(160);var j=readECDSACurve(k);assert.string(j,"a known elliptic curve");k.readSequence(161);var l=k.readString(asn1.Ber.BitString,true);l=utils.ecNormalize(l);var d={type:"ecdsa",parts:[{name:"curve",data:new Buffer(j)},{name:"Q",data:l},{name:"d",data:i}]};return(new PrivateKey(d))}function writePkcs1(c,d){c.startSequence();switch(d.type){case"rsa":if(PrivateKey.isPrivateKey(d)){writePkcs1RSAPrivate(c,d)}else{writePkcs1RSAPublic(c,d)}break;case"dsa":if(PrivateKey.isPrivateKey(d)){writePkcs1DSAPrivate(c,d)}else{writePkcs1DSAPublic(c,d)}break;case"ecdsa":if(PrivateKey.isPrivateKey(d)){writePkcs1ECDSAPrivate(c,d)}else{writePkcs1ECDSAPublic(c,d)}break;case"ed25519":if(PrivateKey.isPrivateKey(d)){writePkcs1EdDSAPrivate(c,d)}else{writePkcs1EdDSAPublic(c,d)}break;default:throw (new Error("Unknown key algo: "+d.type))}c.endSequence()}function writePkcs1RSAPublic(c,d){c.writeBuffer(d.part.n.data,asn1.Ber.Integer);c.writeBuffer(d.part.e.data,asn1.Ber.Integer)}function writePkcs1RSAPrivate(f,d){var e=new Buffer(1);e[0]=0;f.writeBuffer(e,asn1.Ber.Integer);f.writeBuffer(d.part.n.data,asn1.Ber.Integer);f.writeBuffer(d.part.e.data,asn1.Ber.Integer);f.writeBuffer(d.part.d.data,asn1.Ber.Integer);f.writeBuffer(d.part.p.data,asn1.Ber.Integer);f.writeBuffer(d.part.q.data,asn1.Ber.Integer);if(!d.part.dmodp||!d.part.dmodq){utils.addRSAMissing(d)}f.writeBuffer(d.part.dmodp.data,asn1.Ber.Integer);f.writeBuffer(d.part.dmodq.data,asn1.Ber.Integer);f.writeBuffer(d.part.iqmp.data,asn1.Ber.Integer)}function writePkcs1DSAPrivate(f,d){var e=new Buffer(1);e[0]=0;f.writeBuffer(e,asn1.Ber.Integer);f.writeBuffer(d.part.p.data,asn1.Ber.Integer);f.writeBuffer(d.part.q.data,asn1.Ber.Integer);f.writeBuffer(d.part.g.data,asn1.Ber.Integer);f.writeBuffer(d.part.y.data,asn1.Ber.Integer);f.writeBuffer(d.part.x.data,asn1.Ber.Integer)}function writePkcs1DSAPublic(c,d){c.writeBuffer(d.part.y.data,asn1.Ber.Integer);c.writeBuffer(d.part.p.data,asn1.Ber.Integer);c.writeBuffer(d.part.q.data,asn1.Ber.Integer);c.writeBuffer(d.part.g.data,asn1.Ber.Integer)}function writePkcs1ECDSAPublic(i,g){i.startSequence();i.writeOID("1.2.840.10045.2.1");var h=g.part.curve.data.toString();var j=algs.curves[h].pkcs8oid;assert.string(j,"a known ECDSA named curve");i.writeOID(j);i.endSequence();var f=utils.ecNormalize(g.part.Q.data,true);i.writeBuffer(f,asn1.Ber.BitString)}function writePkcs1ECDSAPrivate(j,g){var h=new Buffer(1);h[0]=1;j.writeBuffer(h,asn1.Ber.Integer);j.writeBuffer(g.part.d.data,asn1.Ber.OctetString);j.startSequence(160);var i=g.part.curve.data.toString();var k=algs.curves[i].pkcs8oid;assert.string(k,"a known ECDSA named curve");j.writeOID(k);j.endSequence();j.startSequence(161);var l=utils.ecNormalize(g.part.Q.data,true);j.writeBuffer(l,asn1.Ber.BitString);j.endSequence()}function writePkcs1EdDSAPrivate(f,d){var e=new Buffer(1);e[0]=1;f.writeBuffer(e,asn1.Ber.Integer);f.writeBuffer(d.part.k.data,asn1.Ber.OctetString);f.startSequence(160);f.writeOID("1.3.101.112");f.endSequence();f.startSequence(161);utils.writeBitString(f,d.part.A.data);f.endSequence()}function writePkcs1EdDSAPublic(c,d){throw (new Error("Public keys are not supported for EdDSA PKCS#1"))};