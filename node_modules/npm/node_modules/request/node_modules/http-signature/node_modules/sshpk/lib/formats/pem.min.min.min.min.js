module.exports={read:read,write:write};var assert=require("assert-plus");var asn1=require("asn1");var crypto=require("crypto");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pkcs1=require("./pkcs1");var pkcs8=require("./pkcs8");var sshpriv=require("./ssh-private");var rfc4253=require("./rfc4253");var errors=require("../errors");function read(z,A,x){var H=z;if(typeof(z)!=="string"){assert.buffer(z,"buf");z=z.toString("ascii")}var E=z.trim().split("\n");var B=E[0].match(/[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(B,"invalid PEM header");var I=E[E.length-1].match(/[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(I,"invalid PEM footer");assert.equal(B[2],I[2]);var y=B[2].toLowerCase();var v;if(B[1]){assert.equal(B[1],I[1],"PEM header and footer mismatch");v=B[1].trim()}var C={};while(true){E=E.slice(1);B=E[0].match(/^([A-Za-z0-9-]+): (.+)$/);if(!B){break}C[B[1].toLowerCase()]=B[2]}var G,m,w;if(C["proc-type"]){var D=C["proc-type"].split(",");if(D[0]==="4"&&D[1]==="ENCRYPTED"){if(typeof(A.passphrase)==="string"){A.passphrase=new Buffer(A.passphrase,"utf-8")}if(!Buffer.isBuffer(A.passphrase)){throw (new errors.KeyEncryptedError(A.filename,"PEM"))}else{D=C["dek-info"].split(",");assert.ok(D.length===2);G=D[0].toLowerCase();w=new Buffer(D[1],"hex");m=utils.opensslKeyDeriv(G,w,A.passphrase,1).key}}}E=E.slice(0,-1).join("");z=new Buffer(E,"base64");if(G&&m&&w){var t=crypto.createDecipheriv(G,m,w);var J,F=[];t.once("error",function(a){if(a.toString().indexOf("bad decrypt")!==-1){throw (new Error("Incorrect passphrase supplied, could not decrypt key"))}throw (a)});t.write(z);t.end();while((J=t.read())!==null){F.push(J)}z=Buffer.concat(F)}if(v&&v.toLowerCase()==="openssh"){return(sshpriv.readSSHPrivate(y,z,A))}if(v&&v.toLowerCase()==="ssh2"){return(rfc4253.readType(y,z,A))}var u=new asn1.BerReader(z);u.originalInput=H;u.readSequence();if(v){if(x){assert.strictEqual(x,"pkcs1")}return(pkcs1.readPkcs1(v,y,u))}else{if(x){assert.strictEqual(x,"pkcs8")}return(pkcs8.readPkcs8(v,y,u))}}function write(t,s,u){assert.object(t);var r={ecdsa:"EC",rsa:"RSA",dsa:"DSA",ed25519:"EdDSA"}[t.type];var x;var v=new asn1.BerWriter();if(PrivateKey.isPrivateKey(t)){if(u&&u==="pkcs8"){x="PRIVATE KEY";pkcs8.writePkcs8(v,t)}else{if(u){assert.strictEqual(u,"pkcs1")}x=r+" PRIVATE KEY";pkcs1.writePkcs1(v,t)}}else{if(Key.isKey(t)){if(u&&u==="pkcs1"){x=r+" PUBLIC KEY";pkcs1.writePkcs1(v,t)}else{if(u){assert.strictEqual(u,"pkcs8")}x="PUBLIC KEY";pkcs8.writePkcs8(v,t)}}else{throw (new Error("key is not a Key or PrivateKey"))}}var i=v.buffer.toString("base64");var w=i.length+(i.length/64)+18+16+x.length*2+10;var p=new Buffer(w);var q=0;q+=p.write("-----BEGIN "+x+"-----\n",q);for(var n=0;n<i.length;){var o=n+64;if(o>i.length){o=i.length}q+=p.write(i.slice(n,o),q);p[q++]=10;n=o}q+=p.write("-----END "+x+"-----\n",q);return(p.slice(0,q))};