module.exports={read:read.bind(undefined,false,undefined),readType:read.bind(undefined,false),write:write,readPartial:read.bind(undefined,true),readInternal:read,keyTypeToAlg:keyTypeToAlg,algToKeyType:algToKeyType};var assert=require("assert-plus");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var SSHBuffer=require("../ssh-buffer");function algToKeyType(b){assert.string(b);if(b==="ssh-dss"){return("dsa")}else{if(b==="ssh-rsa"){return("rsa")}else{if(b==="ssh-ed25519"){return("ed25519")}else{if(b==="ssh-curve25519"){return("curve25519")}else{if(b.match(/^ecdsa-sha2-/)){return("ecdsa")}else{throw (new Error("Unknown algorithm "+b))}}}}}}function keyTypeToAlg(b){assert.object(b);if(b.type==="dsa"){return("ssh-dss")}else{if(b.type==="rsa"){return("ssh-rsa")}else{if(b.type==="ed25519"){return("ssh-ed25519")}else{if(b.type==="curve25519"){return("ssh-curve25519")}else{if(b.type==="ecdsa"){return("ecdsa-sha2-"+b.part.curve.data.toString())}else{throw (new Error("Unknown key type "+b.type))}}}}}}function read(u,v,F,A){if(typeof(F)==="string"){F=new Buffer(F)}assert.buffer(F,"buf");var s={};var z=s.parts=[];var E=new SSHBuffer({buffer:F});var t=E.readString();assert.ok(!E.atEnd(),"key must have at least one part");s.type=algToKeyType(t);var C=algs.info[s.type].parts.length;if(v&&v==="private"){C=algs.privInfo[s.type].parts.length}while(!E.atEnd()&&z.length<C){z.push(E.readPart())}while(!u&&!E.atEnd()){z.push(E.readPart())}assert.ok(z.length>=1,"key must have at least one part");assert.ok(u||E.atEnd(),"leftover bytes at end of key");var w=Key;var D=algs.info[s.type];if(v==="private"||D.parts.length!==z.length){D=algs.privInfo[s.type];w=PrivateKey}assert.strictEqual(D.parts.length,z.length);if(s.type==="ecdsa"){var x=/^ecdsa-sha2-(.+)$/.exec(t);assert.ok(x!==null);assert.strictEqual(x[1],z[0].data.toString())}var i=true;for(var y=0;y<D.parts.length;++y){var p=z[y];p.name=D.parts[y];if(s.type==="ed25519"&&p.name==="k"){p.data=p.data.slice(0,32)}if(p.name!=="curve"&&D.normalize!==false){var B;if(s.type==="ed25519"){B=utils.zeroPadToLength(p.data,32)}else{B=utils.mpNormalize(p.data)}if(B.toString("binary")!==p.data.toString("binary")){p.data=B;i=false}}}if(i){s._rfc4253Cache=E.toBuffer()}if(u&&typeof(u)==="object"){u.remainder=E.remainder();u.consumed=E._offset}return(new w(s))}function write(l,n){assert.object(l);var p=keyTypeToAlg(l);var m;var i=algs.info[l.type];if(PrivateKey.isPrivateKey(l)){i=algs.privInfo[l.type]}var j=i.parts;var o=new SSHBuffer({});o.writeString(p);for(m=0;m<j.length;++m){var k=l.part[j[m]].data;if(i.normalize!==false){if(l.type==="ed25519"){k=utils.zeroPadToLength(k,32)}else{k=utils.mpNormalize(k)}}if(l.type==="ed25519"&&j[m]==="k"){k=Buffer.concat([k,l.part.A.data])}o.writeBuffer(k)}return(o.toBuffer())};