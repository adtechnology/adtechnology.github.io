module.exports={bufferSplit:bufferSplit,addRSAMissing:addRSAMissing,calculateDSAPublic:calculateDSAPublic,calculateED25519Public:calculateED25519Public,calculateX25519Public:calculateX25519Public,mpNormalize:mpNormalize,mpDenormalize:mpDenormalize,ecNormalize:ecNormalize,countZeros:countZeros,assertCompatible:assertCompatible,isCompatible:isCompatible,opensslKeyDeriv:opensslKeyDeriv,opensshCipherInfo:opensshCipherInfo,publicFromPrivateECDSA:publicFromPrivateECDSA,zeroPadToLength:zeroPadToLength,writeBitString:writeBitString,readBitString:readBitString};var assert=require("assert-plus");var PrivateKey=require("./private-key");var Key=require("./key");var crypto=require("crypto");var algs=require("./algs");var asn1=require("asn1");var ec,jsbn;var nacl;var MAX_CLASS_DEPTH=3;function isCompatible(j,g,k){if(j===null||typeof(j)!=="object"){return(false)}if(k===undefined){k=g.prototype._sshpkApiVersion}if(j instanceof g&&g.prototype._sshpkApiVersion[0]==k[0]){return(true)}var l=Object.getPrototypeOf(j);var i=0;while(l.constructor.name!==g.name){l=Object.getPrototypeOf(l);if(!l||++i>MAX_CLASS_DEPTH){return(false)}}if(l.constructor.name!==g.name){return(false)}var h=l._sshpkApiVersion;if(h===undefined){h=g._oldVersionDetect(j)}if(h[0]!=k[0]||h[1]<k[1]){return(false)}return(true)}function assertCompatible(k,h,l,n){if(n===undefined){n="object"}assert.ok(k,n+" must not be null");assert.object(k,n+" must be an object");if(l===undefined){l=h.prototype._sshpkApiVersion}if(k instanceof h&&h.prototype._sshpkApiVersion[0]==l[0]){return}var m=Object.getPrototypeOf(k);var j=0;while(m.constructor.name!==h.name){m=Object.getPrototypeOf(m);assert.ok(m&&++j<=MAX_CLASS_DEPTH,n+" must be a "+h.name+" instance")}assert.strictEqual(m.constructor.name,h.name,n+" must be a "+h.name+" instance");var i=m._sshpkApiVersion;if(i===undefined){i=h._oldVersionDetect(k)}assert.ok(i[0]==l[0]&&i[1]>=l[1],n+" must be compatible with "+h.name+" klass version "+l[0]+"."+l[1])}var CIPHER_LEN={"des-ede3-cbc":{key:7,iv:8},"aes-128-cbc":{key:16,iv:16}};var PKCS5_SALT_LEN=8;function opensslKeyDeriv(o,q,j,p){assert.buffer(q,"salt");assert.buffer(j,"passphrase");assert.number(p,"iteration count");var l=CIPHER_LEN[o];assert.object(l,"supported cipher");q=q.slice(0,PKCS5_SALT_LEN);var t,m,r;var n=new Buffer(0);while(n.length<l.key+l.iv){r=[];if(m){r.push(m)}r.push(j);r.push(q);t=Buffer.concat(r);for(var s=0;s<p;++s){t=crypto.createHash("md5").update(t).digest()}n=Buffer.concat([n,t]);m=t}return({key:n.slice(0,l.key),iv:n.slice(l.key,l.key+l.iv)})}function countZeros(e){var g=0,h=8;while(g<e.length){var f=(1<<h);if((e[g]&f)===f){break}h--;if(h<0){g++;h=8}}return(g*8+(8-h)-1)}function bufferSplit(n,l){assert.buffer(n);assert.string(l);var j=[];var h=0;var k=0;for(var m=0;m<n.length;++m){if(n[m]===l.charCodeAt(k)){++k}else{if(n[m]===l.charCodeAt(0)){k=1}else{k=0}}if(k>=l.length){var i=m+1;j.push(n.slice(h,i-k));h=i;k=0}}if(h<=n.length){j.push(n.slice(h,n.length))}return(j)}function ecNormalize(f,e){assert.buffer(f);if(f[0]===0&&f[1]===4){if(e){return(f)}return(f.slice(1))}else{if(f[0]===4){if(!e){return(f)}}else{while(f[0]===0){f=f.slice(1)}if(f[0]===2||f[0]===3){throw (new Error("Compressed elliptic curve points are not supported"))}if(f[0]!==4){throw (new Error("Not a valid elliptic curve point"))}if(!e){return(f)}}}var b=new Buffer(f.length+1);b[0]=0;f.copy(b,1);return(b)}function readBitString(f,e){if(e===undefined){e=asn1.Ber.BitString}var d=f.readString(e,true);assert.strictEqual(d[0],0,"bit strings with unused bits are not supported (0x"+d[0].toString(16)+")");return(d.slice(1))}function writeBitString(f,g,h){if(h===undefined){h=asn1.Ber.BitString}var b=new Buffer(g.length+1);b[0]=0;g.copy(b,1);f.writeBuffer(b,h)}function mpNormalize(d){assert.buffer(d);while(d.length>1&&d[0]===0&&(d[1]&128)===0){d=d.slice(1)}if((d[0]&128)===128){var b=new Buffer(d.length+1);b[0]=0;d.copy(b,1);d=b}return(d)}function mpDenormalize(b){assert.buffer(b);while(b.length>1&&b[0]===0){b=b.slice(1)}return(b)}function zeroPadToLength(e,f){assert.buffer(e);assert.number(f);while(e.length>f){assert.equal(e[0],0);e=e.slice(1)}while(e.length<f){var b=new Buffer(e.length+1);b[0]=0;e.copy(b,1);e=b}return(e)}function bigintToMpBuf(c){var d=new Buffer(c.toByteArray());d=mpNormalize(d);return(d)}function calculateDSAPublic(m,k,g){assert.buffer(m);assert.buffer(k);assert.buffer(g);try{var n=require("jsbn").BigInteger}catch(l){throw (new Error("To load a PKCS#8 format DSA private key, the node jsbn library is required."))}m=new n(m);k=new n(k);g=new n(g);var j=m.modPow(g,k);var e=bigintToMpBuf(j);return(e)}function calculateED25519Public(c){assert.buffer(c);if(nacl===undefined){nacl=require("tweetnacl")}var d=nacl.sign.keyPair.fromSeed(new Uint8Array(c));return(new Buffer(d.publicKey))}function calculateX25519Public(c){assert.buffer(c);if(nacl===undefined){nacl=require("tweetnacl")}var d=nacl.box.keyPair.fromSeed(new Uint8Array(c));return(new Buffer(d.publicKey))}function addRSAMissing(d){assert.object(d);assertCompatible(d,PrivateKey,[1,1]);try{var e=require("jsbn").BigInteger}catch(m){throw (new Error("To write a PEM private key from this source, the node jsbn lib is required."))}var l=new e(d.part.d.data);var p;if(!d.part.dmodp){var q=new e(d.part.p.data);var n=l.mod(q.subtract(1));p=bigintToMpBuf(n);d.part.dmodp={name:"dmodp",data:p};d.parts.push(d.part.dmodp)}if(!d.part.dmodq){var r=new e(d.part.q.data);var o=l.mod(r.subtract(1));p=bigintToMpBuf(o);d.part.dmodq={name:"dmodq",data:p};d.parts.push(d.part.dmodq)}}function publicFromPrivateECDSA(s,a){assert.string(s,"curveName");assert.buffer(a);if(ec===undefined){ec=require("ecc-jsbn/lib/ec")}if(jsbn===undefined){jsbn=require("jsbn").BigInteger}var v=algs.curves[s];var x=new jsbn(v.p);var p=new jsbn(v.a);var q=new jsbn(v.b);var w=new ec.ECCurveFp(x,p,q);var b=w.decodePointHex(v.G.toString("hex"));var r=new jsbn(mpNormalize(a));var t=b.multiply(r);t=new Buffer(w.encodePointHex(t),"hex");var u=[];u.push({name:"curve",data:new Buffer(s)});u.push({name:"Q",data:t});var d=new Key({type:"ecdsa",curve:w,parts:u});return(d)}function opensshCipherInfo(d){var c={};switch(d){case"3des-cbc":c.keySize=24;c.blockSize=8;c.opensslName="des-ede3-cbc";break;case"blowfish-cbc":c.keySize=16;c.blockSize=8;c.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":c.keySize=16;c.blockSize=16;c.opensslName="aes-128-"+d.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":c.keySize=24;c.blockSize=16;c.opensslName="aes-192-"+d.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":c.keySize=32;c.blockSize=16;c.opensslName="aes-256-"+d.slice(7,10);break;default:throw (new Error('Unsupported openssl cipher "'+d+'"'))}return(c)};