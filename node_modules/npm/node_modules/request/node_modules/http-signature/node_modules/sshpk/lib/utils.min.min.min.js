module.exports={bufferSplit:bufferSplit,addRSAMissing:addRSAMissing,calculateDSAPublic:calculateDSAPublic,calculateED25519Public:calculateED25519Public,calculateX25519Public:calculateX25519Public,mpNormalize:mpNormalize,mpDenormalize:mpDenormalize,ecNormalize:ecNormalize,countZeros:countZeros,assertCompatible:assertCompatible,isCompatible:isCompatible,opensslKeyDeriv:opensslKeyDeriv,opensshCipherInfo:opensshCipherInfo,publicFromPrivateECDSA:publicFromPrivateECDSA,zeroPadToLength:zeroPadToLength,writeBitString:writeBitString,readBitString:readBitString};var assert=require("assert-plus");var PrivateKey=require("./private-key");var Key=require("./key");var crypto=require("crypto");var algs=require("./algs");var asn1=require("asn1");var ec,jsbn;var nacl;var MAX_CLASS_DEPTH=3;function isCompatible(c,f,b){if(c===null||typeof(c)!=="object"){return(false)}if(b===undefined){b=f.prototype._sshpkApiVersion}if(c instanceof f&&f.prototype._sshpkApiVersion[0]==b[0]){return(true)}var a=Object.getPrototypeOf(c);var d=0;while(a.constructor.name!==f.name){a=Object.getPrototypeOf(a);if(!a||++d>MAX_CLASS_DEPTH){return(false)}}if(a.constructor.name!==f.name){return(false)}var e=a._sshpkApiVersion;if(e===undefined){e=f._oldVersionDetect(c)}if(e[0]!=b[0]||e[1]<b[1]){return(false)}return(true)}function assertCompatible(c,f,b,g){if(g===undefined){g="object"}assert.ok(c,g+" must not be null");assert.object(c,g+" must be an object");if(b===undefined){b=f.prototype._sshpkApiVersion}if(c instanceof f&&f.prototype._sshpkApiVersion[0]==b[0]){return}var a=Object.getPrototypeOf(c);var d=0;while(a.constructor.name!==f.name){a=Object.getPrototypeOf(a);assert.ok(a&&++d<=MAX_CLASS_DEPTH,g+" must be a "+f.name+" instance")}assert.strictEqual(a.constructor.name,f.name,g+" must be a "+f.name+" instance");var e=a._sshpkApiVersion;if(e===undefined){e=f._oldVersionDetect(c)}assert.ok(e[0]==b[0]&&e[1]>=b[1],g+" must be compatible with "+f.name+" klass version "+b[0]+"."+b[1])}var CIPHER_LEN={"des-ede3-cbc":{key:7,iv:8},"aes-128-cbc":{key:16,iv:16}};var PKCS5_SALT_LEN=8;function opensslKeyDeriv(d,b,h,c){assert.buffer(b,"salt");assert.buffer(h,"passphrase");assert.number(c,"iteration count");var g=CIPHER_LEN[d];assert.object(g,"supported cipher");b=b.slice(0,PKCS5_SALT_LEN);var i,f,a;var e=new Buffer(0);while(e.length<g.key+g.iv){a=[];if(f){a.push(f)}a.push(h);a.push(b);i=Buffer.concat(a);for(var k=0;k<c;++k){i=crypto.createHash("md5").update(i).digest()}e=Buffer.concat([e,i]);f=i}return({key:e.slice(0,g.key),iv:e.slice(g.key,g.key+g.iv)})}function countZeros(d){var b=0,a=8;while(b<d.length){var c=(1<<a);if((d[b]&c)===c){break}a--;if(a<0){b++;a=8}}return(b*8+(8-a)-1)}function bufferSplit(g,b){assert.buffer(g);assert.string(b);var d=[];var f=0;var c=0;for(var a=0;a<g.length;++a){if(g[a]===b.charCodeAt(c)){++c}else{if(g[a]===b.charCodeAt(0)){c=1}else{c=0}}if(c>=b.length){var e=a+1;d.push(g.slice(f,e-c));f=e;c=0}}if(f<=g.length){d.push(g.slice(f,g.length))}return(d)}function ecNormalize(c,d){assert.buffer(c);if(c[0]===0&&c[1]===4){if(d){return(c)}return(c.slice(1))}else{if(c[0]===4){if(!d){return(c)}}else{while(c[0]===0){c=c.slice(1)}if(c[0]===2||c[0]===3){throw (new Error("Compressed elliptic curve points are not supported"))}if(c[0]!==4){throw (new Error("Not a valid elliptic curve point"))}if(!d){return(c)}}}var a=new Buffer(c.length+1);a[0]=0;c.copy(a,1);return(a)}function readBitString(a,b){if(b===undefined){b=asn1.Ber.BitString}var c=a.readString(b,true);assert.strictEqual(c[0],0,"bit strings with unused bits are not supported (0x"+c[0].toString(16)+")");return(c.slice(1))}function writeBitString(e,d,c){if(c===undefined){c=asn1.Ber.BitString}var a=new Buffer(d.length+1);a[0]=0;d.copy(a,1);e.writeBuffer(a,c)}function mpNormalize(c){assert.buffer(c);while(c.length>1&&c[0]===0&&(c[1]&128)===0){c=c.slice(1)}if((c[0]&128)===128){var a=new Buffer(c.length+1);a[0]=0;c.copy(a,1);c=a}return(c)}function mpDenormalize(a){assert.buffer(a);while(a.length>1&&a[0]===0){a=a.slice(1)}return(a)}function zeroPadToLength(d,c){assert.buffer(d);assert.number(c);while(d.length>c){assert.equal(d[0],0);d=d.slice(1)}while(d.length<c){var a=new Buffer(d.length+1);a[0]=0;d.copy(a,1);d=a}return(d)}function bigintToMpBuf(b){var a=new Buffer(b.toByteArray());a=mpNormalize(a);return(a)}function calculateDSAPublic(a,c,f){assert.buffer(a);assert.buffer(c);assert.buffer(f);try{var i=require("jsbn").BigInteger}catch(b){throw (new Error("To load a PKCS#8 format DSA private key, the node jsbn library is required."))}a=new i(a);c=new i(c);f=new i(f);var d=a.modPow(f,c);var h=bigintToMpBuf(d);return(h)}function calculateED25519Public(b){assert.buffer(b);if(nacl===undefined){nacl=require("tweetnacl")}var a=nacl.sign.keyPair.fromSeed(new Uint8Array(b));return(new Buffer(a.publicKey))}function calculateX25519Public(b){assert.buffer(b);if(nacl===undefined){nacl=require("tweetnacl")}var a=nacl.box.keyPair.fromSeed(new Uint8Array(b));return(new Buffer(a.publicKey))}function addRSAMissing(k){assert.object(k);assertCompatible(k,PrivateKey,[1,1]);try{var j=require("jsbn").BigInteger}catch(h){throw (new Error("To write a PEM private key from this source, the node jsbn lib is required."))}var i=new j(k.part.d.data);var c;if(!k.part.dmodp){var b=new j(k.part.p.data);var g=i.mod(b.subtract(1));c=bigintToMpBuf(g);k.part.dmodp={name:"dmodp",data:c};k.parts.push(k.part.dmodp)}if(!k.part.dmodq){var a=new j(k.part.q.data);var f=i.mod(a.subtract(1));c=bigintToMpBuf(f);k.part.dmodq={name:"dmodq",data:c};k.parts.push(k.part.dmodq)}}function publicFromPrivateECDSA(o,i){assert.string(o,"curveName");assert.buffer(i);if(ec===undefined){ec=require("ecc-jsbn/lib/ec")}if(jsbn===undefined){jsbn=require("jsbn").BigInteger}var l=algs.curves[o];var j=new jsbn(l.p);var f=new jsbn(l.a);var e=new jsbn(l.b);var k=new ec.ECCurveFp(j,f,e);var h=k.decodePointHex(l.G.toString("hex"));var c=new jsbn(mpNormalize(i));var n=h.multiply(c);n=new Buffer(k.encodePointHex(n),"hex");var m=[];m.push({name:"curve",data:new Buffer(o)});m.push({name:"Q",data:n});var g=new Key({type:"ecdsa",curve:k,parts:m});return(g)}function opensshCipherInfo(a){var b={};switch(a){case"3des-cbc":b.keySize=24;b.blockSize=8;b.opensslName="des-ede3-cbc";break;case"blowfish-cbc":b.keySize=16;b.blockSize=8;b.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":b.keySize=16;b.blockSize=16;b.opensslName="aes-128-"+a.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":b.keySize=24;b.blockSize=16;b.opensslName="aes-192-"+a.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":b.keySize=32;b.blockSize=16;b.opensslName="aes-256-"+a.slice(7,10);break;default:throw (new Error('Unsupported openssl cipher "'+a+'"'))}return(b)};