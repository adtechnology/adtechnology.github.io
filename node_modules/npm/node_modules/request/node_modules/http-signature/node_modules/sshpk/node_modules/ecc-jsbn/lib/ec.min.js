var BigInteger=require("jsbn").BigInteger;var Barrett=BigInteger.prototype.Barrett;function ECFieldElementFp(b,a){this.x=a;this.q=b}function feFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.x.equals(a.x))}function feFpToBigInteger(){return this.x}function feFpNegate(){return new ECFieldElementFp(this.q,this.x.negate().mod(this.q))}function feFpAdd(a){return new ECFieldElementFp(this.q,this.x.add(a.toBigInteger()).mod(this.q))}function feFpSubtract(a){return new ECFieldElementFp(this.q,this.x.subtract(a.toBigInteger()).mod(this.q))}function feFpMultiply(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger()).mod(this.q))}function feFpSquare(){return new ECFieldElementFp(this.q,this.x.square().mod(this.q))}function feFpDivide(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q))}ECFieldElementFp.prototype.equals=feFpEquals;ECFieldElementFp.prototype.toBigInteger=feFpToBigInteger;ECFieldElementFp.prototype.negate=feFpNegate;ECFieldElementFp.prototype.add=feFpAdd;ECFieldElementFp.prototype.subtract=feFpSubtract;ECFieldElementFp.prototype.multiply=feFpMultiply;ECFieldElementFp.prototype.square=feFpSquare;ECFieldElementFp.prototype.divide=feFpDivide;function ECPointFp(c,a,d,b){this.curve=c;this.x=a;this.y=d;if(b==null){this.z=BigInteger.ONE}else{this.z=b}this.zinv=null}function pointFpGetX(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}var a=this.x.toBigInteger().multiply(this.zinv);this.curve.reduce(a);return this.curve.fromBigInteger(a)}function pointFpGetY(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}var a=this.y.toBigInteger().multiply(this.zinv);this.curve.reduce(a);return this.curve.fromBigInteger(a)}function pointFpEquals(a){if(a==this){return true}if(this.isInfinity()){return a.isInfinity()}if(a.isInfinity()){return this.isInfinity()}var c,b;c=a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if(!c.equals(BigInteger.ZERO)){return false}b=a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO)}function pointFpIsInfinity(){if((this.x==null)&&(this.y==null)){return true}return this.z.equals(BigInteger.ZERO)&&!this.y.toBigInteger().equals(BigInteger.ZERO)}function pointFpNegate(){return new ECPointFp(this.curve,this.x,this.y.negate(),this.z)}function pointFpAdd(l){if(this.isInfinity()){return l}if(l.isInfinity()){return this}var p=l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o=l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if(BigInteger.ZERO.equals(o)){if(BigInteger.ZERO.equals(p)){return this.twice()}return this.curve.getInfinity()}var j=new BigInteger("3");var e=this.x.toBigInteger();var n=this.y.toBigInteger();var c=l.x.toBigInteger();var k=l.y.toBigInteger();var m=o.square();var i=m.multiply(o);var d=e.multiply(m);var g=p.square().multiply(this.z);var a=g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h=d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f=i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(a),this.curve.fromBigInteger(h),f)}function pointFpTwice(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var g=new BigInteger("3");var c=this.x.toBigInteger();var h=this.y.toBigInteger();var e=h.multiply(this.z);var j=e.multiply(h).mod(this.curve.q);var i=this.curve.a.toBigInteger();var k=c.square().multiply(g);if(!BigInteger.ZERO.equals(i)){k=k.add(this.z.square().multiply(i))}k=k.mod(this.curve.q);var b=k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f=k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d=e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(b),this.curve.fromBigInteger(f),d)}function pointFpMultiply(b){if(this.isInfinity()){return this}if(b.signum()==0){return this.curve.getInfinity()}var g=b;var f=g.multiply(new BigInteger("3"));var l=this.negate();var d=this;var c;for(c=f.bitLength()-2;c>0;--c){d=d.twice();var a=f.testBit(c);var j=g.testBit(c);if(a!=j){d=d.add(a?this:l)}}return d}function pointFpMultiplyTwo(c,a,b){var d;if(c.bitLength()>b.bitLength()){d=c.bitLength()-1}else{d=b.bitLength()-1}var f=this.curve.getInfinity();var e=this.add(a);while(d>=0){f=f.twice();if(c.testBit(d)){if(b.testBit(d)){f=f.add(e)}else{f=f.add(this)}}else{if(b.testBit(d)){f=f.add(a)}}--d}return f}ECPointFp.prototype.getX=pointFpGetX;ECPointFp.prototype.getY=pointFpGetY;ECPointFp.prototype.equals=pointFpEquals;ECPointFp.prototype.isInfinity=pointFpIsInfinity;ECPointFp.prototype.negate=pointFpNegate;ECPointFp.prototype.add=pointFpAdd;ECPointFp.prototype.twice=pointFpTwice;ECPointFp.prototype.multiply=pointFpMultiply;ECPointFp.prototype.multiplyTwo=pointFpMultiplyTwo;function ECCurveFp(e,d,c){this.q=e;this.a=this.fromBigInteger(d);this.b=this.fromBigInteger(c);this.infinity=new ECPointFp(this,null,null);this.reducer=new Barrett(this.q)}function curveFpGetQ(){return this.q}function curveFpGetA(){return this.a}function curveFpGetB(){return this.b}function curveFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.a.equals(a.a)&&this.b.equals(a.b))}function curveFpGetInfinity(){return this.infinity}function curveFpFromBigInteger(a){return new ECFieldElementFp(this.q,a)}function curveReduce(a){this.reducer.reduce(a)}function curveFpDecodePointHex(d){switch(parseInt(d.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var a=(d.length-2)/2;var c=d.substr(2,a);var b=d.substr(a+2,a);return new ECPointFp(this,this.fromBigInteger(new BigInteger(c,16)),this.fromBigInteger(new BigInteger(b,16)));default:return null}}function curveFpEncodePointHex(d){if(d.isInfinity()){return"00"}var c=d.getX().toBigInteger().toString(16);var a=d.getY().toBigInteger().toString(16);var b=this.getQ().toString(16).length;if((b%2)!=0){b++}while(c.length<b){c="0"+c}while(a.length<b){a="0"+a}return"04"+c+a}ECCurveFp.prototype.getQ=curveFpGetQ;ECCurveFp.prototype.getA=curveFpGetA;ECCurveFp.prototype.getB=curveFpGetB;ECCurveFp.prototype.equals=curveFpEquals;ECCurveFp.prototype.getInfinity=curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger=curveFpFromBigInteger;ECCurveFp.prototype.reduce=curveReduce;ECCurveFp.prototype.encodePointHex=curveFpEncodePointHex;ECCurveFp.prototype.decodePointHex=function(h){var g;switch(parseInt(h.substr(0,2),16)){case 0:return this.infinity;case 2:g=false;case 3:if(g==undefined){g=true}var c=h.length-2;var i=h.substr(2,c);var e=this.fromBigInteger(new BigInteger(i,16));var a=e.multiply(e.square().add(this.getA())).add(this.getB());var f=a.sqrt();if(f==null){throw"Invalid point compression"}var b=f.toBigInteger();if(b.testBit(0)!=g){f=this.fromBigInteger(this.getQ().subtract(b))}return new ECPointFp(this,e,f);case 4:case 6:case 7:var c=(h.length-2)/2;var i=h.substr(2,c);var d=h.substr(c+2,c);return new ECPointFp(this,this.fromBigInteger(new BigInteger(i,16)),this.fromBigInteger(new BigInteger(d,16)));default:return null}};ECCurveFp.prototype.encodeCompressedPointHex=function(d){if(d.isInfinity()){return"00"}var b=d.getX().toBigInteger().toString(16);var a=this.getQ().toString(16).length;if((a%2)!=0){a++}while(b.length<a){b="0"+b}var c;if(d.getY().toBigInteger().isEven()){c="02"}else{c="03"}return c+b};ECFieldElementFp.prototype.getR=function(){if(this.r!=undefined){return this.r}this.r=null;var a=this.q.bitLength();if(a>128){var b=this.q.shiftRight(a-64);if(b.intValue()==-1){this.r=BigInteger.ONE.shiftLeft(a).subtract(this.q)}}return this.r};ECFieldElementFp.prototype.modMult=function(b,a){return this.modReduce(b.multiply(a))};ECFieldElementFp.prototype.modReduce=function(a){if(this.getR()!=null){var d=q.bitLength();while(a.bitLength()>(d+1)){var c=a.shiftRight(d);var b=a.subtract(c.shiftLeft(d));if(!this.getR().equals(BigInteger.ONE)){c=c.multiply(this.getR())}a=c.add(b)}while(a.compareTo(q)>=0){a=a.subtract(q)}}else{a=a.mod(q)}return a};ECFieldElementFp.prototype.sqrt=function(){if(!this.q.testBit(0)){throw"unsupported"}if(this.q.testBit(1)){var i=new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));return i.square().equals(this)?i:null}var a=this.q.subtract(BigInteger.ONE);var g=a.shiftRight(1);if(!(this.x.modPow(g,this.q).equals(BigInteger.ONE))){return null}var j=a.shiftRight(2);var d=j.shiftLeft(1).add(BigInteger.ONE);var f=this.x;var e=modDouble(modDouble(f));var c,b;do{var h;do{h=new BigInteger(this.q.bitLength(),new SecureRandom())}while(h.compareTo(this.q)>=0||!(h.multiply(h).subtract(e).modPow(g,this.q).equals(a)));var l=this.lucasSequence(h,f,d);c=l[0];b=l[1];if(this.modMult(b,b).equals(e)){if(b.testBit(0)){b=b.add(q)}b=b.shiftRight(1);return new ECFieldElementFp(q,b)}}while(c.equals(BigInteger.ONE)||c.equals(a));return null};ECFieldElementFp.prototype.lucasSequence=function(h,g,d){var b=d.bitLength();var m=d.getLowestSetBit();var l=BigInteger.ONE;var f=BigInteger.TWO;var i=h;var a=BigInteger.ONE;var c=BigInteger.ONE;for(var e=b-1;e>=m+1;--e){a=this.modMult(a,c);if(d.testBit(e)){c=this.modMult(a,g);l=this.modMult(l,i);f=this.modReduce(i.multiply(f).subtract(h.multiply(a)));i=this.modReduce(i.multiply(i).subtract(c.shiftLeft(1)))}else{c=a;l=this.modReduce(l.multiply(f).subtract(a));i=this.modReduce(i.multiply(f).subtract(h.multiply(a)));f=this.modReduce(f.multiply(f).subtract(a.shiftLeft(1)))}}a=this.modMult(a,c);c=this.modMult(a,g);l=this.modReduce(l.multiply(f).subtract(a));f=this.modReduce(i.multiply(f).subtract(h.multiply(a)));a=this.modMult(a,c);for(var e=1;e<=m;++e){l=this.modMult(l,f);f=this.modReduce(f.multiply(f).subtract(a.shiftLeft(1)));a=this.modMult(a,a)}return[l,f]};var exports={ECCurveFp:ECCurveFp,ECPointFp:ECPointFp,ECFieldElementFp:ECFieldElementFp};module.exports=exports;