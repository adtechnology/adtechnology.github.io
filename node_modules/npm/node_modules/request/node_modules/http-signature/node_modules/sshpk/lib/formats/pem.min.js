module.exports={read:read,write:write};var assert=require("assert-plus");var asn1=require("asn1");var crypto=require("crypto");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pkcs1=require("./pkcs1");var pkcs8=require("./pkcs8");var sshpriv=require("./ssh-private");var rfc4253=require("./rfc4253");var errors=require("../errors");function read(q,e,r){var l=q;if(typeof(q)!=="string"){assert.buffer(q,"buf");q=q.toString("ascii")}var c=q.trim().split("\n");var p=c[0].match(/[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(p,"invalid PEM header");var a=c[c.length-1].match(/[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(a,"invalid PEM footer");assert.equal(p[2],a[2]);var f=p[2].toLowerCase();var h;if(p[1]){assert.equal(p[1],a[1],"PEM header and footer mismatch");h=p[1].trim()}var d={};while(true){c=c.slice(1);p=c[0].match(/^([A-Za-z0-9-]+): (.+)$/);if(!p){break}d[p[1].toLowerCase()]=p[2]}var b,s,g;if(d["proc-type"]){var o=d["proc-type"].split(",");if(o[0]==="4"&&o[1]==="ENCRYPTED"){if(typeof(e.passphrase)==="string"){e.passphrase=new Buffer(e.passphrase,"utf-8")}if(!Buffer.isBuffer(e.passphrase)){throw (new errors.KeyEncryptedError(e.filename,"PEM"))}else{o=d["dek-info"].split(",");assert.ok(o.length===2);b=o[0].toLowerCase();g=new Buffer(o[1],"hex");s=utils.opensslKeyDeriv(b,g,e.passphrase,1).key}}}c=c.slice(0,-1).join("");q=new Buffer(c,"base64");if(b&&s&&g){var j=crypto.createDecipheriv(b,s,g);var k,n=[];j.once("error",function(m){if(m.toString().indexOf("bad decrypt")!==-1){throw (new Error("Incorrect passphrase supplied, could not decrypt key"))}throw (m)});j.write(q);j.end();while((k=j.read())!==null){n.push(k)}q=Buffer.concat(n)}if(h&&h.toLowerCase()==="openssh"){return(sshpriv.readSSHPrivate(f,q,e))}if(h&&h.toLowerCase()==="ssh2"){return(rfc4253.readType(f,q,e))}var i=new asn1.BerReader(q);i.originalInput=l;i.readSequence();if(h){if(r){assert.strictEqual(r,"pkcs1")}return(pkcs1.readPkcs1(h,f,i))}else{if(r){assert.strictEqual(r,"pkcs8")}return(pkcs8.readPkcs8(h,f,i))}}function write(l,m,k){assert.object(l);var a={ecdsa:"EC",rsa:"RSA",dsa:"DSA",ed25519:"EdDSA"}[l.type];var g;var j=new asn1.BerWriter();if(PrivateKey.isPrivateKey(l)){if(k&&k==="pkcs8"){g="PRIVATE KEY";pkcs8.writePkcs8(j,l)}else{if(k){assert.strictEqual(k,"pkcs1")}g=a+" PRIVATE KEY";pkcs1.writePkcs1(j,l)}}else{if(Key.isKey(l)){if(k&&k==="pkcs1"){g=a+" PUBLIC KEY";pkcs1.writePkcs1(j,l)}else{if(k){assert.strictEqual(k,"pkcs8")}g="PUBLIC KEY";pkcs8.writePkcs8(j,l)}}else{throw (new Error("key is not a Key or PrivateKey"))}}var f=j.buffer.toString("base64");var h=f.length+(f.length/64)+18+16+g.length*2+10;var c=new Buffer(h);var b=0;b+=c.write("-----BEGIN "+g+"-----\n",b);for(var e=0;e<f.length;){var d=e+64;if(d>f.length){d=f.length}b+=c.write(f.slice(e,d),b);c[b++]=10;e=d}b+=c.write("-----END "+g+"-----\n",b);return(c.slice(0,b))};