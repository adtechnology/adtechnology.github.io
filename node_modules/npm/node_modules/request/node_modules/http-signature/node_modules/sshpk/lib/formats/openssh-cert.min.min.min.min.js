module.exports={read:read,verify:verify,sign:sign,signAsync:signAsync,write:write,fromBuffer:fromBuffer,toBuffer:toBuffer};var assert=require("assert-plus");var SSHBuffer=require("../ssh-buffer");var crypto=require("crypto");var algs=require("../algs");var Key=require("../key");var PrivateKey=require("../private-key");var Identity=require("../identity");var rfc4253=require("./rfc4253");var Signature=require("../signature");var utils=require("../utils");var Certificate=require("../certificate");function verify(c,d){return(false)}var TYPES={user:1,host:2};Object.keys(TYPES).forEach(function(b){TYPES[TYPES[b]]=b});var ECDSA_ALGO=/^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;function read(h,i){if(Buffer.isBuffer(h)){h=h.toString("ascii")}var f=h.trim().split(/[ \t\n]+/g);if(f.length<2||f.length>3){throw (new Error("Not a valid SSH certificate line"))}var j=f[0];var g=f[1];g=new Buffer(g,"base64");return(fromBuffer(g,j))}function fromBuffer(B,F,L){var A=new SSHBuffer({buffer:B});var J=A.readString();if(F!==undefined&&J!==F){throw (new Error("SSH certificate algorithm mismatch"))}if(F===undefined){F=J}var D={};D.signatures={};D.signatures.openssh={};D.signatures.openssh.nonce=A.readBuffer();var p={};var v=(p.parts=[]);p.type=getAlg(F);var E=algs.info[p.type].parts.length;while(v.length<E){v.push(A.readPart())}assert.ok(v.length>=1,"key must have at least one part");var y=algs.info[p.type];if(p.type==="ecdsa"){var i=ECDSA_ALGO.exec(F);assert.ok(i!==null);assert.strictEqual(i[1],v[0].data.toString())}for(var H=0;H<y.parts.length;++H){v[H].name=y.parts[H];if(v[H].name!=="curve"&&y.normalize!==false){var x=v[H];x.data=utils.mpNormalize(x.data)}}D.subjectKey=new Key(p);D.serial=A.readInt64();var I=TYPES[A.readInt()];assert.string(I,"valid cert type");D.signatures.openssh.keyId=A.readString();var K=[];var z=A.readBuffer();var G=new SSHBuffer({buffer:z});while(!G.atEnd()){K.push(G.readString())}if(K.length===0){K=["*"]}D.subjects=K.map(function(a){if(I==="user"){return(Identity.forUser(a))}else{if(I==="host"){return(Identity.forHost(a))}}throw (new Error("Unknown identity type "+I))});D.validFrom=int64ToDate(A.readInt64());D.validUntil=int64ToDate(A.readInt64());D.signatures.openssh.critical=A.readBuffer();D.signatures.openssh.exts=A.readBuffer();A.readBuffer();var w=A.readBuffer();D.issuerKey=rfc4253.read(w);D.issuer=Identity.forHost("**");var C=A.readBuffer();D.signatures.openssh.signature=Signature.parse(C,D.issuerKey.type,"ssh");if(L!==undefined){L.remainder=A.remainder();L.consumed=A._offset}return(new Certificate(D))}function int64ToDate(d){var f=d.readUInt32BE(0)*4294967296;f+=d.readUInt32BE(4);var e=new Date();e.setTime(f*1000);e.sourceInt64=d;return(e)}function dateToInt64(g){if(g.sourceInt64!==undefined){return(g.sourceInt64)}var f=Math.round(g.getTime()/1000);var j=Math.floor(f/4294967296);var h=Math.floor(f%4294967296);var i=new Buffer(8);i.writeUInt32BE(j,0);i.writeUInt32BE(h,4);return(i)}function sign(j,k){if(j.signatures.openssh===undefined){j.signatures.openssh={}}try{var l=toBuffer(j,true)}catch(e){delete (j.signatures.openssh);return(false)}var m=j.signatures.openssh;var i=undefined;if(k.type==="rsa"||k.type==="dsa"){i="sha1"}var n=k.createSign(i);n.write(l);m.signature=n.sign();return(true)}function signAsync(h,k,j){if(h.signatures.openssh===undefined){h.signatures.openssh={}}try{var i=toBuffer(h,true)}catch(e){delete (h.signatures.openssh);j(e);return}var l=h.signatures.openssh;k(i,function(c,a){if(c){j(c);return}try{a.toBuffer("ssh")}catch(b){j(b);return}l.signature=a;j()})}function write(e,f){if(f===undefined){f={}}var h=toBuffer(e);var g=getCertType(e.subjectKey)+" "+h.toString("base64");if(f.comment){g=g+" "+f.comment}return(g)}function toBuffer(l,o){assert.object(l.signatures.openssh,"signature for openssh format");var i=l.signatures.openssh;if(i.nonce===undefined){i.nonce=crypto.randomBytes(16)}var n=new SSHBuffer({});n.writeString(getCertType(l.subjectKey));n.writeBuffer(i.nonce);var m=l.subjectKey;var p=algs.info[m.type];p.parts.forEach(function(a){n.writePart(m.part[a])});n.writeInt64(l.serial);var j=l.subjects[0].type;assert.notStrictEqual(j,"unknown");l.subjects.forEach(function(a){assert.strictEqual(a.type,j)});j=TYPES[j];n.writeInt(j);if(i.keyId===undefined){i.keyId=l.subjects[0].type+"_"+(l.subjects[0].uid||l.subjects[0].hostname)}n.writeString(i.keyId);var k=new SSHBuffer({});l.subjects.forEach(function(a){if(j===TYPES.host){k.writeString(a.hostname)}else{if(j===TYPES.user){k.writeString(a.uid)}}});n.writeBuffer(k.toBuffer());n.writeInt64(dateToInt64(l.validFrom));n.writeInt64(dateToInt64(l.validUntil));if(i.critical===undefined){i.critical=new Buffer(0)}n.writeBuffer(i.critical);if(i.exts===undefined){i.exts=new Buffer(0)}n.writeBuffer(i.exts);n.writeBuffer(new Buffer(0));k=rfc4253.write(l.issuerKey);n.writeBuffer(k);if(!o){n.writeBuffer(i.signature.toBuffer("ssh"))}return(n.toBuffer())}function getAlg(b){if(b==="ssh-rsa-cert-v01@openssh.com"){return("rsa")}if(b==="ssh-dss-cert-v01@openssh.com"){return("dsa")}if(b.match(ECDSA_ALGO)){return("ecdsa")}if(b==="ssh-ed25519-cert-v01@openssh.com"){return("ed25519")}throw (new Error("Unsupported cert type "+b))}function getCertType(b){if(b.type==="rsa"){return("ssh-rsa-cert-v01@openssh.com")}if(b.type==="dsa"){return("ssh-dss-cert-v01@openssh.com")}if(b.type==="ecdsa"){return("ecdsa-sha2-"+b.curve+"-cert-v01@openssh.com")}if(b.type==="ed25519"){return("ssh-ed25519-cert-v01@openssh.com")}throw (new Error("Unsupported key type "+b.type))};