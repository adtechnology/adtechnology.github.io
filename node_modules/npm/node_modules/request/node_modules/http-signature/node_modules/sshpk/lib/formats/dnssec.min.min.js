module.exports={read:read,write:write};var assert=require("assert-plus");var Key=require("../key");var PrivateKey=require("../private-key");var utils=require("../utils");var SSHBuffer=require("../ssh-buffer");var Dhe=require("../dhe");var supportedAlgos={"rsa-sha1":5,"rsa-sha256":8,"rsa-sha512":10,"ecdsa-p256-sha256":13,"ecdsa-p384-sha384":14};var supportedAlgosById={};Object.keys(supportedAlgos).forEach(function(b){supportedAlgosById[supportedAlgos[b]]=b.toUpperCase()});function read(l,m){if(typeof(l)!=="string"){assert.buffer(l,"buf");l=l.toString("ascii")}var n=l.split("\n");if(n[0].match(/^Private-key-format\: v1/)){var j=n[1].split(" ");var h=parseInt(j[1],10);var k=j[2];if(!supportedAlgosById[h]){throw (new Error("Unsupported algorithm: "+k))}return(readDNSSECPrivateKey(h,n.slice(2)))}var i=0;while(n[i].match(/^\;/)){i++}if((n[i].match(/\. IN KEY /)||n[i].match(/\. IN DNSKEY /))&&n[i+1].length===0){return(readRFC3110(n[i]))}throw (new Error("Cannot parse dnssec key"))}function readRFC3110(r){var w=r.split(" ");var q=parseInt(w[5],10);if(!supportedAlgosById[q]){throw (new Error("Unsupported algorithm: "+q))}var x=w.slice(6,w.length).join();var u=new Buffer(x,"base64");if(supportedAlgosById[q].match(/^RSA-/)){var p=u.readUInt8(0);if(p!=3&&p!=1){throw (new Error("Cannot parse dnssec key: unsupported exponent length"))}var t=u.slice(1,p+1);t=utils.mpNormalize(t);var o=u.slice(1+p);o=utils.mpNormalize(o);var s={type:"rsa",parts:[]};s.parts.push({name:"e",data:t});s.parts.push({name:"n",data:o});return(new Key(s))}if(supportedAlgosById[q]==="ECDSA-P384-SHA384"||supportedAlgosById[q]==="ECDSA-P256-SHA256"){var v="nistp384";var m=384;if(supportedAlgosById[q].match(/^ECDSA-P256-SHA256/)){v="nistp256";m=256}var n={type:"ecdsa",curve:v,size:m,parts:[{name:"curve",data:new Buffer(v)},{name:"Q",data:utils.ecNormalize(u)}]};return(new Key(n))}throw (new Error("Unsupported algorithm: "+supportedAlgosById[q]))}function elementToBuf(b){return(new Buffer(b.split(" ")[1],"base64"))}function readDNSSECRSAPrivateKey(f){var d={};f.forEach(function(a){if(a.split(" ")[0]==="Modulus:"){d.n=elementToBuf(a)}else{if(a.split(" ")[0]==="PublicExponent:"){d.e=elementToBuf(a)}else{if(a.split(" ")[0]==="PrivateExponent:"){d.d=elementToBuf(a)}else{if(a.split(" ")[0]==="Prime1:"){d.p=elementToBuf(a)}else{if(a.split(" ")[0]==="Prime2:"){d.q=elementToBuf(a)}else{if(a.split(" ")[0]==="Exponent1:"){d.dmodp=elementToBuf(a)}else{if(a.split(" ")[0]==="Exponent2:"){d.dmodq=elementToBuf(a)}else{if(a.split(" ")[0]==="Coefficient:"){d.iqmp=elementToBuf(a)}}}}}}}}});var e={type:"rsa",parts:[{name:"e",data:utils.mpNormalize(d.e)},{name:"n",data:utils.mpNormalize(d.n)},{name:"d",data:utils.mpNormalize(d.d)},{name:"p",data:utils.mpNormalize(d.p)},{name:"q",data:utils.mpNormalize(d.q)},{name:"dmodp",data:utils.mpNormalize(d.dmodp)},{name:"dmodq",data:utils.mpNormalize(d.dmodq)},{name:"iqmp",data:utils.mpNormalize(d.iqmp)}]};return(new PrivateKey(e))}function readDNSSECPrivateKey(k,o){if(supportedAlgosById[k].match(/^RSA-/)){return(readDNSSECRSAPrivateKey(o))}if(supportedAlgosById[k]==="ECDSA-P384-SHA384"||supportedAlgosById[k]==="ECDSA-P256-SHA256"){var l=new Buffer(o[0].split(" ")[1],"base64");var m="nistp384";var d=384;if(supportedAlgosById[k]==="ECDSA-P256-SHA256"){m="nistp256";d=256}var n=utils.publicFromPrivateECDSA(m,l);var p=n.part.Q.data;var j={type:"ecdsa",curve:m,size:d,parts:[{name:"curve",data:new Buffer(m)},{name:"d",data:l},{name:"Q",data:p}]};return(new PrivateKey(j))}throw (new Error("Unsupported algorithm: "+supportedAlgosById[k]))}function dnssecTimestamp(f){var e=f.getFullYear()+"";var g=(f.getMonth()+1);var h=e+g+f.getUTCDate();h+=""+f.getUTCHours()+f.getUTCMinutes();h+=f.getUTCSeconds();return(h)}function rsaAlgFromOptions(b){if(!b||!b.hashAlgo||b.hashAlgo==="sha1"){return("5 (RSASHA1)")}else{if(b.hashAlgo==="sha256"){return("8 (RSASHA256)")}else{if(b.hashAlgo==="sha512"){return("10 (RSASHA512)")}else{throw (new Error("Unknown or unsupported hash: "+b.hashAlgo))}}}}function writeRSA(e,d){if(!e.part.dmodp||!e.part.dmodq){utils.addRSAMissing(e)}var r="";r+="Private-key-format: v1.3\n";r+="Algorithm: "+rsaAlgFromOptions(d)+"\n";var v=utils.mpDenormalize(e.part.n.data);r+="Modulus: "+v.toString("base64")+"\n";var p=utils.mpDenormalize(e.part.e.data);r+="PublicExponent: "+p.toString("base64")+"\n";var n=utils.mpDenormalize(e.part.d.data);r+="PrivateExponent: "+n.toString("base64")+"\n";var w=utils.mpDenormalize(e.part.p.data);r+="Prime1: "+w.toString("base64")+"\n";var x=utils.mpDenormalize(e.part.q.data);r+="Prime2: "+x.toString("base64")+"\n";var t=utils.mpDenormalize(e.part.dmodp.data);r+="Exponent1: "+t.toString("base64")+"\n";var u=utils.mpDenormalize(e.part.dmodq.data);r+="Exponent2: "+u.toString("base64")+"\n";var s=utils.mpDenormalize(e.part.iqmp.data);r+="Coefficient: "+s.toString("base64")+"\n";var q=new Date();r+="Created: "+dnssecTimestamp(q)+"\n";r+="Publish: "+dnssecTimestamp(q)+"\n";r+="Activate: "+dnssecTimestamp(q)+"\n";return(new Buffer(r,"ascii"))}function writeECDSA(j,f){var g="";g+="Private-key-format: v1.3\n";if(j.curve==="nistp256"){g+="Algorithm: 13 (ECDSAP256SHA256)\n"}else{if(j.curve==="nistp384"){g+="Algorithm: 14 (ECDSAP384SHA384)\n"}else{throw (new Error("Unsupported curve"))}}var i=j.part.d.data.toString("base64");g+="PrivateKey: "+i+"\n";var h=new Date();g+="Created: "+dnssecTimestamp(h)+"\n";g+="Publish: "+dnssecTimestamp(h)+"\n";g+="Activate: "+dnssecTimestamp(h)+"\n";return(new Buffer(g,"ascii"))}function write(c,d){if(PrivateKey.isPrivateKey(c)){if(c.type==="rsa"){return(writeRSA(c,d))}else{if(c.type==="ecdsa"){return(writeECDSA(c,d))}else{throw (new Error("Unsupported algorithm: "+c.type))}}}else{if(Key.isKey(c)){throw (new Error('Format "dnssec" only supports writing private keys'))}else{throw (new Error("key is not a Key or PrivateKey"))}}};