module.exports={read:read,readPkcs8:readPkcs8,write:write,writePkcs8:writePkcs8,readECDSACurve:readECDSACurve,writeECDSACurve:writeECDSACurve};var assert=require("assert-plus");var asn1=require("asn1");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pem=require("./pem");function read(b,a){return(pem.read(b,a,"pkcs8"))}function write(b,a){return(pem.write(b,a,"pkcs8"))}function readMPInt(b,a){assert.strictEqual(b.peek(),asn1.Ber.Integer,a+" is not an Integer");return(utils.mpNormalize(b.readString(asn1.Ber.Integer,true)))}function readPkcs8(c,e,b){if(b.peek()===asn1.Ber.Integer){assert.strictEqual(e,"private","unexpected Integer at start of public key");b.readString(asn1.Ber.Integer,true)}b.readSequence();var d=b.offset+b.length;var a=b.readOID();switch(a){case"1.2.840.113549.1.1.1":b._offset=d;if(e==="public"){return(readPkcs8RSAPublic(b))}else{return(readPkcs8RSAPrivate(b))}case"1.2.840.10040.4.1":if(e==="public"){return(readPkcs8DSAPublic(b))}else{return(readPkcs8DSAPrivate(b))}case"1.2.840.10045.2.1":if(e==="public"){return(readPkcs8ECDSAPublic(b))}else{return(readPkcs8ECDSAPrivate(b))}case"1.3.101.112":if(e==="public"){return(readPkcs8EdDSAPublic(b))}else{return(readPkcs8EdDSAPrivate(b))}case"1.3.101.110":if(e==="public"){return(readPkcs8X25519Public(b))}else{return(readPkcs8X25519Private(b))}default:throw (new Error("Unknown key type OID "+a))}}function readPkcs8RSAPublic(d){d.readSequence(asn1.Ber.BitString);d.readByte();d.readSequence();var b=readMPInt(d,"modulus");var a=readMPInt(d,"exponent");var c={type:"rsa",source:d.originalInput,parts:[{name:"e",data:a},{name:"n",data:b}]};return(new Key(c))}function readPkcs8RSAPrivate(h){h.readSequence(asn1.Ber.OctetString);h.readSequence();var c=readMPInt(h,"version");assert.equal(c[0],0,"unknown RSA private key version");var l=readMPInt(h,"modulus");var f=readMPInt(h,"public exponent");var g=readMPInt(h,"private exponent");var k=readMPInt(h,"prime1");var j=readMPInt(h,"prime2");var a=readMPInt(h,"exponent1");var m=readMPInt(h,"exponent2");var b=readMPInt(h,"iqmp");var i={type:"rsa",parts:[{name:"n",data:l},{name:"e",data:f},{name:"d",data:g},{name:"iqmp",data:b},{name:"p",data:k},{name:"q",data:j},{name:"dmodp",data:a},{name:"dmodq",data:m}]};return(new PrivateKey(i))}function readPkcs8DSAPublic(a){a.readSequence();var c=readMPInt(a,"p");var b=readMPInt(a,"q");var f=readMPInt(a,"g");a.readSequence(asn1.Ber.BitString);a.readByte();var d=readMPInt(a,"y");var e={type:"dsa",parts:[{name:"p",data:c},{name:"q",data:b},{name:"g",data:f},{name:"y",data:d}]};return(new Key(e))}function readPkcs8DSAPrivate(a){a.readSequence();var c=readMPInt(a,"p");var b=readMPInt(a,"q");var h=readMPInt(a,"g");a.readSequence(asn1.Ber.OctetString);var e=readMPInt(a,"x");var d=utils.calculateDSAPublic(h,c,e);var f={type:"dsa",parts:[{name:"p",data:c},{name:"q",data:b},{name:"g",data:h},{name:"y",data:d},{name:"x",data:e}]};return(new PrivateKey(f))}function readECDSACurve(h){var e,r;var s,l,n;if(h.peek()===asn1.Ber.OID){var o=h.readOID();r=Object.keys(algs.curves);for(s=0;s<r.length;++s){l=r[s];n=algs.curves[l];if(n.pkcs8oid===o){e=l;break}}}else{h.readSequence();var g=h.readString(asn1.Ber.Integer,true);assert.strictEqual(g[0],1,"ECDSA key not version 1");var f={};h.readSequence();var b=h.readOID();assert.strictEqual(b,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var d=f.p=utils.mpNormalize(h.readString(asn1.Ber.Integer,true));f.size=d.length*8-utils.countZeros(d);h.readSequence();f.a=utils.mpNormalize(h.readString(asn1.Ber.OctetString,true));f.b=utils.mpNormalize(h.readString(asn1.Ber.OctetString,true));if(h.peek()===asn1.Ber.BitString){f.s=h.readString(asn1.Ber.BitString,true)}f.G=h.readString(asn1.Ber.OctetString,true);assert.strictEqual(f.G[0],4,"uncompressed G is required");f.n=utils.mpNormalize(h.readString(asn1.Ber.Integer,true));f.h=utils.mpNormalize(h.readString(asn1.Ber.Integer,true));assert.strictEqual(f.h[0],1,"a cofactor=1 curve is required");r=Object.keys(algs.curves);var a=Object.keys(f);for(s=0;s<r.length;++s){l=r[s];n=algs.curves[l];var m=true;for(var t=0;t<a.length;++t){var q=a[t];if(n[q]===undefined){continue}if(typeof(n[q])==="object"&&n[q].equals!==undefined){if(!n[q].equals(f[q])){m=false;break}}else{if(Buffer.isBuffer(n[q])){if(n[q].toString("binary")!==f[q].toString("binary")){m=false;break}}else{if(n[q]!==f[q]){m=false;break}}}}if(m){e=l;break}}}return(e)}function readPkcs8ECDSAPrivate(b){var c=readECDSACurve(b);assert.string(c,"a known elliptic curve");b.readSequence(asn1.Ber.OctetString);b.readSequence();var f=readMPInt(b,"version");assert.equal(f[0],1,"unknown version of ECDSA key");var e=b.readString(asn1.Ber.OctetString,true);b.readSequence(161);var a=b.readString(asn1.Ber.BitString,true);a=utils.ecNormalize(a);var g={type:"ecdsa",parts:[{name:"curve",data:new Buffer(c)},{name:"Q",data:a},{name:"d",data:e}]};return(new PrivateKey(g))}function readPkcs8ECDSAPublic(a){var b=readECDSACurve(a);assert.string(b,"a known elliptic curve");var d=a.readString(asn1.Ber.BitString,true);d=utils.ecNormalize(d);var c={type:"ecdsa",parts:[{name:"curve",data:new Buffer(b)},{name:"Q",data:d}]};return(new Key(c))}function readPkcs8EdDSAPublic(a){if(a.peek()===0){a.readByte()}var b=utils.readBitString(a);var c={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(b,32)}]};return(new Key(c))}function readPkcs8X25519Public(a){var b=utils.readBitString(a);var c={type:"curve25519",parts:[{name:"A",data:utils.zeroPadToLength(b,32)}]};return(new Key(c))}function readPkcs8EdDSAPrivate(b){if(b.peek()===0){b.readByte()}b.readSequence(asn1.Ber.OctetString);var d=b.readString(asn1.Ber.OctetString,true);d=utils.zeroPadToLength(d,32);var c;if(b.peek()===asn1.Ber.BitString){c=utils.readBitString(b);c=utils.zeroPadToLength(c,32)}else{c=utils.calculateED25519Public(d)}var a={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(c,32)},{name:"k",data:utils.zeroPadToLength(d,32)}]};return(new PrivateKey(a))}function readPkcs8X25519Private(b){if(b.peek()===0){b.readByte()}b.readSequence(asn1.Ber.OctetString);var d=b.readString(asn1.Ber.OctetString,true);d=utils.zeroPadToLength(d,32);var c=utils.calculateX25519Public(d);var a={type:"curve25519",parts:[{name:"A",data:utils.zeroPadToLength(c,32)},{name:"k",data:utils.zeroPadToLength(d,32)}]};return(new PrivateKey(a))}function writePkcs8(a,c){a.startSequence();if(PrivateKey.isPrivateKey(c)){var b=new Buffer(1);b[0]=0;a.writeBuffer(b,asn1.Ber.Integer)}a.startSequence();switch(c.type){case"rsa":a.writeOID("1.2.840.113549.1.1.1");if(PrivateKey.isPrivateKey(c)){writePkcs8RSAPrivate(c,a)}else{writePkcs8RSAPublic(c,a)}break;case"dsa":a.writeOID("1.2.840.10040.4.1");if(PrivateKey.isPrivateKey(c)){writePkcs8DSAPrivate(c,a)}else{writePkcs8DSAPublic(c,a)}break;case"ecdsa":a.writeOID("1.2.840.10045.2.1");if(PrivateKey.isPrivateKey(c)){writePkcs8ECDSAPrivate(c,a)}else{writePkcs8ECDSAPublic(c,a)}break;case"ed25519":a.writeOID("1.3.101.112");if(PrivateKey.isPrivateKey(c)){throw (new Error("Ed25519 private keys in pkcs8 format are not supported"))}writePkcs8EdDSAPublic(c,a);break;default:throw (new Error("Unsupported key type: "+c.type))}a.endSequence()}function writePkcs8RSAPrivate(c,a){a.writeNull();a.endSequence();a.startSequence(asn1.Ber.OctetString);a.startSequence();var b=new Buffer(1);b[0]=0;a.writeBuffer(b,asn1.Ber.Integer);a.writeBuffer(c.part.n.data,asn1.Ber.Integer);a.writeBuffer(c.part.e.data,asn1.Ber.Integer);a.writeBuffer(c.part.d.data,asn1.Ber.Integer);a.writeBuffer(c.part.p.data,asn1.Ber.Integer);a.writeBuffer(c.part.q.data,asn1.Ber.Integer);if(!c.part.dmodp||!c.part.dmodq){utils.addRSAMissing(c)}a.writeBuffer(c.part.dmodp.data,asn1.Ber.Integer);a.writeBuffer(c.part.dmodq.data,asn1.Ber.Integer);a.writeBuffer(c.part.iqmp.data,asn1.Ber.Integer);a.endSequence();a.endSequence()}function writePkcs8RSAPublic(a,b){b.writeNull();b.endSequence();b.startSequence(asn1.Ber.BitString);b.writeByte(0);b.startSequence();b.writeBuffer(a.part.n.data,asn1.Ber.Integer);b.writeBuffer(a.part.e.data,asn1.Ber.Integer);b.endSequence();b.endSequence()}function writePkcs8DSAPrivate(a,b){b.startSequence();b.writeBuffer(a.part.p.data,asn1.Ber.Integer);b.writeBuffer(a.part.q.data,asn1.Ber.Integer);b.writeBuffer(a.part.g.data,asn1.Ber.Integer);b.endSequence();b.endSequence();b.startSequence(asn1.Ber.OctetString);b.writeBuffer(a.part.x.data,asn1.Ber.Integer);b.endSequence()}function writePkcs8DSAPublic(a,b){b.startSequence();b.writeBuffer(a.part.p.data,asn1.Ber.Integer);b.writeBuffer(a.part.q.data,asn1.Ber.Integer);b.writeBuffer(a.part.g.data,asn1.Ber.Integer);b.endSequence();b.endSequence();b.startSequence(asn1.Ber.BitString);b.writeByte(0);b.writeBuffer(a.part.y.data,asn1.Ber.Integer);b.endSequence()}function writeECDSACurve(d,f){var g=algs.curves[d.curve];if(g.pkcs8oid){f.writeOID(g.pkcs8oid)}else{f.startSequence();var c=new Buffer(1);c.writeUInt8(1,0);f.writeBuffer(c,asn1.Ber.Integer);f.startSequence();f.writeOID("1.2.840.10045.1.1");f.writeBuffer(g.p,asn1.Ber.Integer);f.endSequence();f.startSequence();var b=g.p;if(b[0]===0){b=b.slice(1)}f.writeBuffer(b,asn1.Ber.OctetString);f.writeBuffer(g.b,asn1.Ber.OctetString);f.writeBuffer(g.s,asn1.Ber.BitString);f.endSequence();f.writeBuffer(g.G,asn1.Ber.OctetString);f.writeBuffer(g.n,asn1.Ber.Integer);var e=g.h;if(!e){e=new Buffer(1);e[0]=1}f.writeBuffer(e,asn1.Ber.Integer);f.endSequence()}}function writePkcs8ECDSAPublic(b,a){writeECDSACurve(b,a);a.endSequence();var c=utils.ecNormalize(b.part.Q.data,true);a.writeBuffer(c,asn1.Ber.BitString)}function writePkcs8ECDSAPrivate(d,b){writeECDSACurve(d,b);b.endSequence();b.startSequence(asn1.Ber.OctetString);b.startSequence();var c=new Buffer(1);c[0]=1;b.writeBuffer(c,asn1.Ber.Integer);b.writeBuffer(d.part.d.data,asn1.Ber.OctetString);b.startSequence(161);var a=utils.ecNormalize(d.part.Q.data,true);b.writeBuffer(a,asn1.Ber.BitString);b.endSequence();b.endSequence();b.endSequence()}function writePkcs8EdDSAPublic(a,b){b.endSequence();utils.writeBitString(b,a.part.A.data)}function writePkcs8EdDSAPrivate(c,a){a.endSequence();var b=utils.mpNormalize(c.part.k.data,true);a.startSequence(asn1.Ber.OctetString);a.writeBuffer(b,asn1.Ber.OctetString);a.endSequence()};