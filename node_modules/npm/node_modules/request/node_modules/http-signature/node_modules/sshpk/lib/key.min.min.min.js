module.exports=Key;var assert=require("assert-plus");var algs=require("./algs");var crypto=require("crypto");var Fingerprint=require("./fingerprint");var Signature=require("./signature");var DiffieHellman=require("./dhe").DiffieHellman;var errs=require("./errors");var utils=require("./utils");var PrivateKey=require("./private-key");var edCompat;try{edCompat=require("./ed-compat")}catch(e){}var InvalidAlgorithmError=errs.InvalidAlgorithmError;var KeyParseError=errs.KeyParseError;var formats={};formats.auto=require("./formats/auto");formats.pem=require("./formats/pem");formats.pkcs1=require("./formats/pkcs1");formats.pkcs8=require("./formats/pkcs8");formats.rfc4253=require("./formats/rfc4253");formats.ssh=require("./formats/ssh");formats["ssh-private"]=require("./formats/ssh-private");formats.openssh=formats["ssh-private"];formats.dnssec=require("./formats/dnssec");function Key(g){assert.object(g,"options");assert.arrayOfObject(g.parts,"options.parts");assert.string(g.type,"options.type");assert.optionalString(g.comment,"options.comment");var b=algs.info[g.type];if(typeof(b)!=="object"){throw (new InvalidAlgorithmError(g.type))}var j={};for(var f=0;f<g.parts.length;++f){var d=g.parts[f];j[d.name]=d}this.type=g.type;this.parts=g.parts;this.part=j;this.comment=undefined;this.source=g.source;this._rfc4253Cache=g._rfc4253Cache;this._hashCache={};var h;this.curve=undefined;if(this.type==="ecdsa"){var a=this.part.curve.data.toString();this.curve=a;h=algs.curves[a].size}else{if(this.type==="ed25519"||this.type==="curve25519"){h=256;this.curve="curve25519"}else{var c=this.part[b.sizePart];h=c.data.length;h=h*8-utils.countZeros(c.data)}}this.size=h}Key.formats=formats;Key.prototype.toBuffer=function(b,a){if(b===undefined){b="ssh"}assert.string(b,"format");assert.object(formats[b],"formats[format]");assert.optionalObject(a,"options");if(b==="rfc4253"){if(this._rfc4253Cache===undefined){this._rfc4253Cache=formats.rfc4253.write(this)}return(this._rfc4253Cache)}return(formats[b].write(this,a))};Key.prototype.toString=function(b,a){return(this.toBuffer(b,a).toString())};Key.prototype.hash=function(b){assert.string(b,"algorithm");b=b.toLowerCase();if(algs.hashAlgs[b]===undefined){throw (new InvalidAlgorithmError(b))}if(this._hashCache[b]){return(this._hashCache[b])}var a=crypto.createHash(b).update(this.toBuffer("rfc4253")).digest();this._hashCache[b]=a;return(a)};Key.prototype.fingerprint=function(b){if(b===undefined){b="sha256"}assert.string(b,"algorithm");var a={type:"key",hash:this.hash(b),algorithm:b};return(new Fingerprint(a))};Key.prototype.defaultHashAlgorithm=function(){var a="sha1";if(this.type==="rsa"){a="sha256"}if(this.type==="dsa"&&this.size>1024){a="sha256"}if(this.type==="ed25519"){a="sha512"}if(this.type==="ecdsa"){if(this.size<=256){a="sha256"}else{if(this.size<=384){a="sha384"}else{a="sha512"}}}return(a)};Key.prototype.createVerify=function(j){if(j===undefined){j=this.defaultHashAlgorithm()}assert.string(j,"hash algorithm");if(this.type==="ed25519"&&edCompat!==undefined){return(new edCompat.Verifier(this,j))}if(this.type==="curve25519"){throw (new Error("Curve25519 keys are not suitable for signing or verification"))}var g,i,b;try{i=j.toUpperCase();g=crypto.createVerify(i)}catch(c){b=c}if(g===undefined||(b instanceof Error&&b.message.match(/Unknown message digest/))){i="RSA-";i+=j.toUpperCase();g=crypto.createVerify(i)}assert.ok(g,"failed to create verifier");var d=g.verify.bind(g);var f=this.toBuffer("pkcs8");var a=this.curve;var h=this;g.verify=function(l,k){if(Signature.isSignature(l,[2,0])){if(l.type!==h.type){return(false)}if(l.hashAlgorithm&&l.hashAlgorithm!==j){return(false)}if(l.curve&&h.type==="ecdsa"&&l.curve!==a){return(false)}return(d(f,l.toBuffer("asn1")))}else{if(typeof(l)==="string"||Buffer.isBuffer(l)){return(d(f,l,k))}else{if(Signature.isSignature(l,[1,0])){throw (new Error("signature was created by too old a version of sshpk and cannot be verified"))}else{throw (new TypeError("signature must be a string, Buffer, or Signature object"))}}}};return(g)};Key.prototype.createDiffieHellman=function(){if(this.type==="rsa"){throw (new Error("RSA keys do not support Diffie-Hellman"))}return(new DiffieHellman(this))};Key.prototype.createDH=Key.prototype.createDiffieHellman;Key.parse=function(a,c,f){if(typeof(a)!=="string"){assert.buffer(a,"data")}if(c===undefined){c="auto"}assert.string(c,"format");if(typeof(f)==="string"){f={filename:f}}assert.optionalObject(f,"options");if(f===undefined){f={}}assert.optionalString(f.filename,"options.filename");if(f.filename===undefined){f.filename="(unnamed)"}assert.object(formats[c],"formats[format]");try{var d=formats[c].read(a,f);if(d instanceof PrivateKey){d=d.toPublic()}if(!d.comment){d.comment=f.filename}return(d)}catch(b){if(b.name==="KeyEncryptedError"){throw (b)}throw (new KeyParseError(f.filename,c,b))}};Key.isKey=function(b,a){return(utils.isCompatible(b,Key,a))};Key.prototype._sshpkApiVersion=[1,6];Key._oldVersionDetect=function(a){assert.func(a.toBuffer);assert.func(a.fingerprint);if(a.createDH){return([1,4])}if(a.defaultHashAlgorithm){return([1,3])}if(a.formats.auto){return([1,2])}if(a.formats.pkcs1){return([1,1])}return([1,0])};