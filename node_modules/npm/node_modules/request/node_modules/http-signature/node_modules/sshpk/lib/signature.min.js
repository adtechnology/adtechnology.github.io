module.exports=Signature;var assert=require("assert-plus");var algs=require("./algs");var crypto=require("crypto");var errs=require("./errors");var utils=require("./utils");var asn1=require("asn1");var SSHBuffer=require("./ssh-buffer");var InvalidAlgorithmError=errs.InvalidAlgorithmError;var SignatureParseError=errs.SignatureParseError;function Signature(c){assert.object(c,"options");assert.arrayOfObject(c.parts,"options.parts");assert.string(c.type,"options.type");var d={};for(var b=0;b<c.parts.length;++b){var a=c.parts[b];d[a.name]=a}this.type=c.type;this.hashAlgorithm=c.hashAlgo;this.curve=c.curve;this.parts=c.parts;this.part=d}Signature.prototype.toBuffer=function(g){if(g===undefined){g="asn1"}assert.string(g,"format");var b;var f="ssh-"+this.type;switch(this.type){case"rsa":switch(this.hashAlgorithm){case"sha256":f="rsa-sha2-256";break;case"sha512":f="rsa-sha2-512";break;case"sha1":case undefined:break;default:throw (new Error("SSH signature format does not support hash algorithm "+this.hashAlgorithm))}if(g==="ssh"){b=new SSHBuffer({});b.writeString(f);b.writePart(this.part.sig);return(b.toBuffer())}else{return(this.part.sig.data)}break;case"ed25519":if(g==="ssh"){b=new SSHBuffer({});b.writeString(f);b.writePart(this.part.sig);return(b.toBuffer())}else{return(this.part.sig.data)}break;case"dsa":case"ecdsa":var a,h;if(g==="asn1"){var d=new asn1.BerWriter();d.startSequence();a=utils.mpNormalize(this.part.r.data);h=utils.mpNormalize(this.part.s.data);d.writeBuffer(a,asn1.Ber.Integer);d.writeBuffer(h,asn1.Ber.Integer);d.endSequence();return(d.buffer)}else{if(g==="ssh"&&this.type==="dsa"){b=new SSHBuffer({});b.writeString("ssh-dss");a=this.part.r.data;if(a.length>20&&a[0]===0){a=a.slice(1)}h=this.part.s.data;if(h.length>20&&h[0]===0){h=h.slice(1)}if((this.hashAlgorithm&&this.hashAlgorithm!=="sha1")||a.length+h.length!==40){throw (new Error("OpenSSH only supports DSA signatures with SHA1 hash"))}b.writeBuffer(Buffer.concat([a,h]));return(b.toBuffer())}else{if(g==="ssh"&&this.type==="ecdsa"){var i=new SSHBuffer({});a=this.part.r.data;i.writeBuffer(a);i.writePart(this.part.s);b=new SSHBuffer({});var c;if(a[0]===0){a=a.slice(1)}var e=a.length*8;if(e===256){c="nistp256"}else{if(e===384){c="nistp384"}else{if(e===528){c="nistp521"}}}b.writeString("ecdsa-sha2-"+c);b.writeBuffer(i.toBuffer());return(b.toBuffer())}}}throw (new Error("Invalid signature format"));default:throw (new Error("Invalid signature data"))}};Signature.prototype.toString=function(a){assert.optionalString(a,"format");return(this.toBuffer(a).toString("base64"))};Signature.parse=function(c,a,f){if(typeof(c)==="string"){c=new Buffer(c,"base64")}assert.buffer(c,"data");assert.string(f,"format");assert.string(a,"type");var b={};b.type=a.toLowerCase();b.parts=[];try{assert.ok(c.length>0,"signature must not be empty");switch(b.type){case"rsa":return(parseOneNum(c,a,f,b));case"ed25519":return(parseOneNum(c,a,f,b));case"dsa":case"ecdsa":if(f==="asn1"){return(parseDSAasn1(c,a,f,b))}else{if(b.type==="dsa"){return(parseDSA(c,a,f,b))}else{return(parseECDSA(c,a,f,b))}}default:throw (new InvalidAlgorithmError(a))}}catch(d){if(d instanceof InvalidAlgorithmError){throw (d)}throw (new SignatureParseError(a,f,d))}};function parseOneNum(d,g,i,a){if(i==="ssh"){try{var b=new SSHBuffer({buffer:d});var h=b.readString()}catch(f){}if(b!==undefined){var c="SSH signature does not match expected type (expected "+g+", got "+h+")";switch(h){case"ssh-rsa":assert.strictEqual(g,"rsa",c);a.hashAlgo="sha1";break;case"rsa-sha2-256":assert.strictEqual(g,"rsa",c);a.hashAlgo="sha256";break;case"rsa-sha2-512":assert.strictEqual(g,"rsa",c);a.hashAlgo="sha512";break;case"ssh-ed25519":assert.strictEqual(g,"ed25519",c);a.hashAlgo="sha512";break;default:throw (new Error("Unknown SSH signature type: "+h))}var j=b.readPart();assert.ok(b.atEnd(),"extra trailing bytes");j.name="sig";a.parts.push(j);return(new Signature(a))}}a.parts.push({name:"sig",data:d});return(new Signature(a))}function parseDSAasn1(f,b,g,e){var d=new asn1.BerReader(f);d.readSequence();var c=d.readString(asn1.Ber.Integer,true);var a=d.readString(asn1.Ber.Integer,true);e.parts.push({name:"r",data:utils.mpNormalize(c)});e.parts.push({name:"s",data:utils.mpNormalize(a)});return(new Signature(e))}function parseDSA(e,b,f,c){if(e.length!=40){var a=new SSHBuffer({buffer:e});var g=a.readBuffer();if(g.toString("ascii")==="ssh-dss"){g=a.readBuffer()}assert.ok(a.atEnd(),"extra trailing bytes");assert.strictEqual(g.length,40,"invalid inner length");e=g}c.parts.push({name:"r",data:e.slice(0,20)});c.parts.push({name:"s",data:e.slice(20,40)});return(new Signature(c))}function parseECDSA(e,g,h,a){var c=new SSHBuffer({buffer:e});var b,i;var j=c.readBuffer();var f=j.toString("ascii");if(f.slice(0,6)==="ecdsa-"){var d=f.split("-");assert.strictEqual(d[0],"ecdsa");assert.strictEqual(d[1],"sha2");a.curve=d[2];switch(a.curve){case"nistp256":a.hashAlgo="sha256";break;case"nistp384":a.hashAlgo="sha384";break;case"nistp521":a.hashAlgo="sha512";break;default:throw (new Error("Unsupported ECDSA curve: "+a.curve))}j=c.readBuffer();assert.ok(c.atEnd(),"extra trailing bytes on outer");c=new SSHBuffer({buffer:j});b=c.readPart()}else{b={data:j}}i=c.readPart();assert.ok(c.atEnd(),"extra trailing bytes");b.name="r";i.name="s";a.parts.push(b);a.parts.push(i);return(new Signature(a))}Signature.isSignature=function(b,a){return(utils.isCompatible(b,Signature,a))};Signature.prototype._sshpkApiVersion=[2,1];Signature._oldVersionDetect=function(a){assert.func(a.toBuffer);if(a.hasOwnProperty("hashAlgorithm")){return([2,0])}return([1,0])};