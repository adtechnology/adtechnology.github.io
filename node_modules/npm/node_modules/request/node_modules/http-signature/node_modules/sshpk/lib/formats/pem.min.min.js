module.exports={read:read,write:write};var assert=require("assert-plus");var asn1=require("asn1");var crypto=require("crypto");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pkcs1=require("./pkcs1");var pkcs8=require("./pkcs8");var sshpriv=require("./ssh-private");var rfc4253=require("./rfc4253");var errors=require("../errors");function read(u,F,t){var y=u;if(typeof(u)!=="string"){assert.buffer(u,"buf");u=u.toString("ascii")}var H=u.trim().split("\n");var v=H[0].match(/[-]+[ ]*BEGIN ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(v,"invalid PEM header");var J=H[H.length-1].match(/[-]+[ ]*END ([A-Z0-9][A-Za-z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);assert.ok(J,"invalid PEM footer");assert.equal(v[2],J[2]);var E=v[2].toLowerCase();var C;if(v[1]){assert.equal(v[1],J[1],"PEM header and footer mismatch");C=v[1].trim()}var G={};while(true){H=H.slice(1);v=H[0].match(/^([A-Za-z0-9-]+): (.+)$/);if(!v){break}G[v[1].toLowerCase()]=v[2]}var I,m,D;if(G["proc-type"]){var w=G["proc-type"].split(",");if(w[0]==="4"&&w[1]==="ENCRYPTED"){if(typeof(F.passphrase)==="string"){F.passphrase=new Buffer(F.passphrase,"utf-8")}if(!Buffer.isBuffer(F.passphrase)){throw (new errors.KeyEncryptedError(F.filename,"PEM"))}else{w=G["dek-info"].split(",");assert.ok(w.length===2);I=w[0].toLowerCase();D=new Buffer(w[1],"hex");m=utils.opensslKeyDeriv(I,D,F.passphrase,1).key}}}H=H.slice(0,-1).join("");u=new Buffer(H,"base64");if(I&&m&&D){var A=crypto.createDecipheriv(I,m,D);var z,x=[];A.once("error",function(a){if(a.toString().indexOf("bad decrypt")!==-1){throw (new Error("Incorrect passphrase supplied, could not decrypt key"))}throw (a)});A.write(u);A.end();while((z=A.read())!==null){x.push(z)}u=Buffer.concat(x)}if(C&&C.toLowerCase()==="openssh"){return(sshpriv.readSSHPrivate(E,u,F))}if(C&&C.toLowerCase()==="ssh2"){return(rfc4253.readType(E,u,F))}var B=new asn1.BerReader(u);B.originalInput=y;B.readSequence();if(C){if(t){assert.strictEqual(t,"pkcs1")}return(pkcs1.readPkcs1(C,E,B))}else{if(t){assert.strictEqual(t,"pkcs8")}return(pkcs8.readPkcs8(C,E,B))}}function write(n,i,o){assert.object(n);var x={ecdsa:"EC",rsa:"RSA",dsa:"DSA",ed25519:"EdDSA"}[n.type];var r;var p=new asn1.BerWriter();if(PrivateKey.isPrivateKey(n)){if(o&&o==="pkcs8"){r="PRIVATE KEY";pkcs8.writePkcs8(p,n)}else{if(o){assert.strictEqual(o,"pkcs1")}r=x+" PRIVATE KEY";pkcs1.writePkcs1(p,n)}}else{if(Key.isKey(n)){if(o&&o==="pkcs1"){r=x+" PUBLIC KEY";pkcs1.writePkcs1(p,n)}else{if(o){assert.strictEqual(o,"pkcs8")}r="PUBLIC KEY";pkcs8.writePkcs8(p,n)}}else{throw (new Error("key is not a Key or PrivateKey"))}}var s=p.buffer.toString("base64");var q=s.length+(s.length/64)+18+16+r.length*2+10;var v=new Buffer(q);var w=0;w+=v.write("-----BEGIN "+r+"-----\n",w);for(var t=0;t<s.length;){var u=t+64;if(u>s.length){u=s.length}w+=v.write(s.slice(t,u),w);v[w++]=10;t=u}w+=v.write("-----END "+r+"-----\n",w);return(v.slice(0,w))};