module.exports=Key;var assert=require("assert-plus");var algs=require("./algs");var crypto=require("crypto");var Fingerprint=require("./fingerprint");var Signature=require("./signature");var DiffieHellman=require("./dhe").DiffieHellman;var errs=require("./errors");var utils=require("./utils");var PrivateKey=require("./private-key");var edCompat;try{edCompat=require("./ed-compat")}catch(e){}var InvalidAlgorithmError=errs.InvalidAlgorithmError;var KeyParseError=errs.KeyParseError;var formats={};formats.auto=require("./formats/auto");formats.pem=require("./formats/pem");formats.pkcs1=require("./formats/pkcs1");formats.pkcs8=require("./formats/pkcs8");formats.rfc4253=require("./formats/rfc4253");formats.ssh=require("./formats/ssh");formats["ssh-private"]=require("./formats/ssh-private");formats.openssh=formats["ssh-private"];formats.dnssec=require("./formats/dnssec");function Key(n){assert.object(n,"options");assert.arrayOfObject(n.parts,"options.parts");assert.string(n.type,"options.type");assert.optionalString(n.comment,"options.comment");var i=algs.info[n.type];if(typeof(i)!=="object"){throw (new InvalidAlgorithmError(n.type))}var l={};for(var o=0;o<n.parts.length;++o){var p=n.parts[o];l[p.name]=p}this.type=n.type;this.parts=n.parts;this.part=l;this.comment=undefined;this.source=n.source;this._rfc4253Cache=n._rfc4253Cache;this._hashCache={};var m;this.curve=undefined;if(this.type==="ecdsa"){var k=this.part.curve.data.toString();this.curve=k;m=algs.curves[k].size}else{if(this.type==="ed25519"||this.type==="curve25519"){m=256;this.curve="curve25519"}else{var q=this.part[i.sizePart];m=q.data.length;m=m*8-utils.countZeros(q.data)}}this.size=m}Key.formats=formats;Key.prototype.toBuffer=function(c,d){if(c===undefined){c="ssh"}assert.string(c,"format");assert.object(formats[c],"formats[format]");assert.optionalObject(d,"options");if(c==="rfc4253"){if(this._rfc4253Cache===undefined){this._rfc4253Cache=formats.rfc4253.write(this)}return(this._rfc4253Cache)}return(formats[c].write(this,d))};Key.prototype.toString=function(c,d){return(this.toBuffer(c,d).toString())};Key.prototype.hash=function(c){assert.string(c,"algorithm");c=c.toLowerCase();if(algs.hashAlgs[c]===undefined){throw (new InvalidAlgorithmError(c))}if(this._hashCache[c]){return(this._hashCache[c])}var d=crypto.createHash(c).update(this.toBuffer("rfc4253")).digest();this._hashCache[c]=d;return(d)};Key.prototype.fingerprint=function(c){if(c===undefined){c="sha256"}assert.string(c,"algorithm");var d={type:"key",hash:this.hash(c),algorithm:c};return(new Fingerprint(d))};Key.prototype.defaultHashAlgorithm=function(){var b="sha1";if(this.type==="rsa"){b="sha256"}if(this.type==="dsa"&&this.size>1024){b="sha256"}if(this.type==="ed25519"){b="sha512"}if(this.type==="ecdsa"){if(this.size<=256){b="sha256"}else{if(this.size<=384){b="sha384"}else{b="sha512"}}}return(b)};Key.prototype.createVerify=function(k){if(k===undefined){k=this.defaultHashAlgorithm()}assert.string(k,"hash algorithm");if(this.type==="ed25519"&&edCompat!==undefined){return(new edCompat.Verifier(this,k))}if(this.type==="curve25519"){throw (new Error("Curve25519 keys are not suitable for signing or verification"))}var n,l,r;try{l=k.toUpperCase();n=crypto.createVerify(l)}catch(q){r=q}if(n===undefined||(r instanceof Error&&r.message.match(/Unknown message digest/))){l="RSA-";l+=k.toUpperCase();n=crypto.createVerify(l)}assert.ok(n,"failed to create verifier");var p=n.verify.bind(n);var o=this.toBuffer("pkcs8");var s=this.curve;var m=this;n.verify=function(a,b){if(Signature.isSignature(a,[2,0])){if(a.type!==m.type){return(false)}if(a.hashAlgorithm&&a.hashAlgorithm!==k){return(false)}if(a.curve&&m.type==="ecdsa"&&a.curve!==s){return(false)}return(p(o,a.toBuffer("asn1")))}else{if(typeof(a)==="string"||Buffer.isBuffer(a)){return(p(o,a,b))}else{if(Signature.isSignature(a,[1,0])){throw (new Error("signature was created by too old a version of sshpk and cannot be verified"))}else{throw (new TypeError("signature must be a string, Buffer, or Signature object"))}}}};return(n)};Key.prototype.createDiffieHellman=function(){if(this.type==="rsa"){throw (new Error("RSA keys do not support Diffie-Hellman"))}return(new DiffieHellman(this))};Key.prototype.createDH=Key.prototype.createDiffieHellman;Key.parse=function(h,k,i){if(typeof(h)!=="string"){assert.buffer(h,"data")}if(k===undefined){k="auto"}assert.string(k,"format");if(typeof(i)==="string"){i={filename:i}}assert.optionalObject(i,"options");if(i===undefined){i={}}assert.optionalString(i.filename,"options.filename");if(i.filename===undefined){i.filename="(unnamed)"}assert.object(formats[k],"formats[format]");try{var j=formats[k].read(h,i);if(j instanceof PrivateKey){j=j.toPublic()}if(!j.comment){j.comment=i.filename}return(j)}catch(g){if(g.name==="KeyEncryptedError"){throw (g)}throw (new KeyParseError(i.filename,k,g))}};Key.isKey=function(c,d){return(utils.isCompatible(c,Key,d))};Key.prototype._sshpkApiVersion=[1,6];Key._oldVersionDetect=function(b){assert.func(b.toBuffer);assert.func(b.fingerprint);if(b.createDH){return([1,4])}if(b.defaultHashAlgorithm){return([1,3])}if(b.formats.auto){return([1,2])}if(b.formats.pkcs1){return([1,1])}return([1,0])};