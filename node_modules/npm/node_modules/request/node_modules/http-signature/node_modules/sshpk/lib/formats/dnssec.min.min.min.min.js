module.exports={read:read,write:write};var assert=require("assert-plus");var Key=require("../key");var PrivateKey=require("../private-key");var utils=require("../utils");var SSHBuffer=require("../ssh-buffer");var Dhe=require("../dhe");var supportedAlgos={"rsa-sha1":5,"rsa-sha256":8,"rsa-sha512":10,"ecdsa-p256-sha256":13,"ecdsa-p384-sha384":14};var supportedAlgosById={};Object.keys(supportedAlgos).forEach(function(b){supportedAlgosById[supportedAlgos[b]]=b.toUpperCase()});function read(h,i){if(typeof(h)!=="string"){assert.buffer(h,"buf");h=h.toString("ascii")}var j=h.split("\n");if(j[0].match(/^Private-key-format\: v1/)){var m=j[1].split(" ");var k=parseInt(m[1],10);var n=m[2];if(!supportedAlgosById[k]){throw (new Error("Unsupported algorithm: "+n))}return(readDNSSECPrivateKey(k,j.slice(2)))}var l=0;while(j[l].match(/^\;/)){l++}if((j[l].match(/\. IN KEY /)||j[l].match(/\. IN DNSKEY /))&&j[l+1].length===0){return(readRFC3110(j[l]))}throw (new Error("Cannot parse dnssec key"))}function readRFC3110(x){var q=x.split(" ");var w=parseInt(q[5],10);if(!supportedAlgosById[w]){throw (new Error("Unsupported algorithm: "+w))}var r=q.slice(6,q.length).join();var o=new Buffer(r,"base64");if(supportedAlgosById[w].match(/^RSA-/)){var v=o.readUInt8(0);if(v!=3&&v!=1){throw (new Error("Cannot parse dnssec key: unsupported exponent length"))}var n=o.slice(1,v+1);n=utils.mpNormalize(n);var u=o.slice(1+v);u=utils.mpNormalize(u);var m={type:"rsa",parts:[]};m.parts.push({name:"e",data:n});m.parts.push({name:"n",data:u});return(new Key(m))}if(supportedAlgosById[w]==="ECDSA-P384-SHA384"||supportedAlgosById[w]==="ECDSA-P256-SHA256"){var p="nistp384";var s=384;if(supportedAlgosById[w].match(/^ECDSA-P256-SHA256/)){p="nistp256";s=256}var t={type:"ecdsa",curve:p,size:s,parts:[{name:"curve",data:new Buffer(p)},{name:"Q",data:utils.ecNormalize(o)}]};return(new Key(t))}throw (new Error("Unsupported algorithm: "+supportedAlgosById[w]))}function elementToBuf(b){return(new Buffer(b.split(" ")[1],"base64"))}function readDNSSECRSAPrivateKey(e){var f={};e.forEach(function(a){if(a.split(" ")[0]==="Modulus:"){f.n=elementToBuf(a)}else{if(a.split(" ")[0]==="PublicExponent:"){f.e=elementToBuf(a)}else{if(a.split(" ")[0]==="PrivateExponent:"){f.d=elementToBuf(a)}else{if(a.split(" ")[0]==="Prime1:"){f.p=elementToBuf(a)}else{if(a.split(" ")[0]==="Prime2:"){f.q=elementToBuf(a)}else{if(a.split(" ")[0]==="Exponent1:"){f.dmodp=elementToBuf(a)}else{if(a.split(" ")[0]==="Exponent2:"){f.dmodq=elementToBuf(a)}else{if(a.split(" ")[0]==="Coefficient:"){f.iqmp=elementToBuf(a)}}}}}}}}});var d={type:"rsa",parts:[{name:"e",data:utils.mpNormalize(f.e)},{name:"n",data:utils.mpNormalize(f.n)},{name:"d",data:utils.mpNormalize(f.d)},{name:"p",data:utils.mpNormalize(f.p)},{name:"q",data:utils.mpNormalize(f.q)},{name:"dmodp",data:utils.mpNormalize(f.dmodp)},{name:"dmodq",data:utils.mpNormalize(f.dmodq)},{name:"iqmp",data:utils.mpNormalize(f.iqmp)}]};return(new PrivateKey(d))}function readDNSSECPrivateKey(p,l){if(supportedAlgosById[p].match(/^RSA-/)){return(readDNSSECRSAPrivateKey(l))}if(supportedAlgosById[p]==="ECDSA-P384-SHA384"||supportedAlgosById[p]==="ECDSA-P256-SHA256"){var d=new Buffer(l[0].split(" ")[1],"base64");var j="nistp384";var m=384;if(supportedAlgosById[p]==="ECDSA-P256-SHA256"){j="nistp256";m=256}var k=utils.publicFromPrivateECDSA(j,d);var n=k.part.Q.data;var o={type:"ecdsa",curve:j,size:m,parts:[{name:"curve",data:new Buffer(j)},{name:"d",data:d},{name:"Q",data:n}]};return(new PrivateKey(o))}throw (new Error("Unsupported algorithm: "+supportedAlgosById[p]))}function dnssecTimestamp(h){var g=h.getFullYear()+"";var e=(h.getMonth()+1);var f=g+e+h.getUTCDate();f+=""+h.getUTCHours()+h.getUTCMinutes();f+=h.getUTCSeconds();return(f)}function rsaAlgFromOptions(b){if(!b||!b.hashAlgo||b.hashAlgo==="sha1"){return("5 (RSASHA1)")}else{if(b.hashAlgo==="sha256"){return("8 (RSASHA256)")}else{if(b.hashAlgo==="sha512"){return("10 (RSASHA512)")}else{throw (new Error("Unknown or unsupported hash: "+b.hashAlgo))}}}}function writeRSA(t,s){if(!t.part.dmodp||!t.part.dmodq){utils.addRSAMissing(t)}var x="";x+="Private-key-format: v1.3\n";x+="Algorithm: "+rsaAlgFromOptions(s)+"\n";var p=utils.mpDenormalize(t.part.n.data);x+="Modulus: "+p.toString("base64")+"\n";var v=utils.mpDenormalize(t.part.e.data);x+="PublicExponent: "+v.toString("base64")+"\n";var u=utils.mpDenormalize(t.part.d.data);x+="PrivateExponent: "+u.toString("base64")+"\n";var q=utils.mpDenormalize(t.part.p.data);x+="Prime1: "+q.toString("base64")+"\n";var r=utils.mpDenormalize(t.part.q.data);x+="Prime2: "+r.toString("base64")+"\n";var e=utils.mpDenormalize(t.part.dmodp.data);x+="Exponent1: "+e.toString("base64")+"\n";var n=utils.mpDenormalize(t.part.dmodq.data);x+="Exponent2: "+n.toString("base64")+"\n";var d=utils.mpDenormalize(t.part.iqmp.data);x+="Coefficient: "+d.toString("base64")+"\n";var w=new Date();x+="Created: "+dnssecTimestamp(w)+"\n";x+="Publish: "+dnssecTimestamp(w)+"\n";x+="Activate: "+dnssecTimestamp(w)+"\n";return(new Buffer(x,"ascii"))}function writeECDSA(g,h){var i="";i+="Private-key-format: v1.3\n";if(g.curve==="nistp256"){i+="Algorithm: 13 (ECDSAP256SHA256)\n"}else{if(g.curve==="nistp384"){i+="Algorithm: 14 (ECDSAP384SHA384)\n"}else{throw (new Error("Unsupported curve"))}}var f=g.part.d.data.toString("base64");i+="PrivateKey: "+f+"\n";var j=new Date();i+="Created: "+dnssecTimestamp(j)+"\n";i+="Publish: "+dnssecTimestamp(j)+"\n";i+="Activate: "+dnssecTimestamp(j)+"\n";return(new Buffer(i,"ascii"))}function write(c,d){if(PrivateKey.isPrivateKey(c)){if(c.type==="rsa"){return(writeRSA(c,d))}else{if(c.type==="ecdsa"){return(writeECDSA(c,d))}else{throw (new Error("Unsupported algorithm: "+c.type))}}}else{if(Key.isKey(c)){throw (new Error('Format "dnssec" only supports writing private keys'))}else{throw (new Error("key is not a Key or PrivateKey"))}}};