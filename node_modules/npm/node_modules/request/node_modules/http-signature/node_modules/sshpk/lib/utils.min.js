module.exports={bufferSplit:bufferSplit,addRSAMissing:addRSAMissing,calculateDSAPublic:calculateDSAPublic,calculateED25519Public:calculateED25519Public,calculateX25519Public:calculateX25519Public,mpNormalize:mpNormalize,mpDenormalize:mpDenormalize,ecNormalize:ecNormalize,countZeros:countZeros,assertCompatible:assertCompatible,isCompatible:isCompatible,opensslKeyDeriv:opensslKeyDeriv,opensshCipherInfo:opensshCipherInfo,publicFromPrivateECDSA:publicFromPrivateECDSA,zeroPadToLength:zeroPadToLength,writeBitString:writeBitString,readBitString:readBitString};var assert=require("assert-plus");var PrivateKey=require("./private-key");var Key=require("./key");var crypto=require("crypto");var algs=require("./algs");var asn1=require("asn1");var ec,jsbn;var nacl;var MAX_CLASS_DEPTH=3;function isCompatible(e,b,d){if(e===null||typeof(e)!=="object"){return(false)}if(d===undefined){d=b.prototype._sshpkApiVersion}if(e instanceof b&&b.prototype._sshpkApiVersion[0]==d[0]){return(true)}var c=Object.getPrototypeOf(e);var f=0;while(c.constructor.name!==b.name){c=Object.getPrototypeOf(c);if(!c||++f>MAX_CLASS_DEPTH){return(false)}}if(c.constructor.name!==b.name){return(false)}var a=c._sshpkApiVersion;if(a===undefined){a=b._oldVersionDetect(e)}if(a[0]!=d[0]||a[1]<d[1]){return(false)}return(true)}function assertCompatible(f,b,e,c){if(c===undefined){c="object"}assert.ok(f,c+" must not be null");assert.object(f,c+" must be an object");if(e===undefined){e=b.prototype._sshpkApiVersion}if(f instanceof b&&b.prototype._sshpkApiVersion[0]==e[0]){return}var d=Object.getPrototypeOf(f);var g=0;while(d.constructor.name!==b.name){d=Object.getPrototypeOf(d);assert.ok(d&&++g<=MAX_CLASS_DEPTH,c+" must be a "+b.name+" instance")}assert.strictEqual(d.constructor.name,b.name,c+" must be a "+b.name+" instance");var a=d._sshpkApiVersion;if(a===undefined){a=b._oldVersionDetect(f)}assert.ok(a[0]==e[0]&&a[1]>=e[1],c+" must be compatible with "+b.name+" klass version "+e[0]+"."+e[1])}var CIPHER_LEN={"des-ede3-cbc":{key:7,iv:8},"aes-128-cbc":{key:16,iv:16}};var PKCS5_SALT_LEN=8;function opensslKeyDeriv(f,d,k,e){assert.buffer(d,"salt");assert.buffer(k,"passphrase");assert.number(e,"iteration count");var i=CIPHER_LEN[f];assert.object(i,"supported cipher");d=d.slice(0,PKCS5_SALT_LEN);var a,h,c;var g=new Buffer(0);while(g.length<i.key+i.iv){c=[];if(h){c.push(h)}c.push(k);c.push(d);a=Buffer.concat(c);for(var b=0;b<e;++b){a=crypto.createHash("md5").update(a).digest()}g=Buffer.concat([g,a]);h=a}return({key:g.slice(0,i.key),iv:g.slice(i.key,i.key+i.iv)})}function countZeros(b){var d=0,c=8;while(d<b.length){var a=(1<<c);if((b[d]&a)===a){break}c--;if(c<0){d++;c=8}}return(d*8+(8-c)-1)}function bufferSplit(c,e){assert.buffer(c);assert.string(e);var g=[];var b=0;var f=0;for(var d=0;d<c.length;++d){if(c[d]===e.charCodeAt(f)){++f}else{if(c[d]===e.charCodeAt(0)){f=1}else{f=0}}if(f>=e.length){var a=d+1;g.push(c.slice(b,a-f));b=a;f=0}}if(b<=c.length){g.push(c.slice(b,c.length))}return(g)}function ecNormalize(c,d){assert.buffer(c);if(c[0]===0&&c[1]===4){if(d){return(c)}return(c.slice(1))}else{if(c[0]===4){if(!d){return(c)}}else{while(c[0]===0){c=c.slice(1)}if(c[0]===2||c[0]===3){throw (new Error("Compressed elliptic curve points are not supported"))}if(c[0]!==4){throw (new Error("Not a valid elliptic curve point"))}if(!d){return(c)}}}var a=new Buffer(c.length+1);a[0]=0;c.copy(a,1);return(a)}function readBitString(c,a){if(a===undefined){a=asn1.Ber.BitString}var b=c.readString(a,true);assert.strictEqual(b[0],0,"bit strings with unused bits are not supported (0x"+b[0].toString(16)+")");return(b.slice(1))}function writeBitString(e,d,c){if(c===undefined){c=asn1.Ber.BitString}var a=new Buffer(d.length+1);a[0]=0;d.copy(a,1);e.writeBuffer(a,c)}function mpNormalize(c){assert.buffer(c);while(c.length>1&&c[0]===0&&(c[1]&128)===0){c=c.slice(1)}if((c[0]&128)===128){var a=new Buffer(c.length+1);a[0]=0;c.copy(a,1);c=a}return(c)}function mpDenormalize(a){assert.buffer(a);while(a.length>1&&a[0]===0){a=a.slice(1)}return(a)}function zeroPadToLength(d,c){assert.buffer(d);assert.number(c);while(d.length>c){assert.equal(d[0],0);d=d.slice(1)}while(d.length<c){var a=new Buffer(d.length+1);a[0]=0;d.copy(a,1);d=a}return(d)}function bigintToMpBuf(b){var a=new Buffer(b.toByteArray());a=mpNormalize(a);return(a)}function calculateDSAPublic(d,h,a){assert.buffer(d);assert.buffer(h);assert.buffer(a);try{var c=require("jsbn").BigInteger}catch(f){throw (new Error("To load a PKCS#8 format DSA private key, the node jsbn library is required."))}d=new c(d);h=new c(h);a=new c(a);var i=d.modPow(a,h);var b=bigintToMpBuf(i);return(b)}function calculateED25519Public(b){assert.buffer(b);if(nacl===undefined){nacl=require("tweetnacl")}var a=nacl.sign.keyPair.fromSeed(new Uint8Array(b));return(new Buffer(a.publicKey))}function calculateX25519Public(b){assert.buffer(b);if(nacl===undefined){nacl=require("tweetnacl")}var a=nacl.box.keyPair.fromSeed(new Uint8Array(b));return(new Buffer(a.publicKey))}function addRSAMissing(k){assert.object(k);assertCompatible(k,PrivateKey,[1,1]);try{var j=require("jsbn").BigInteger}catch(h){throw (new Error("To write a PEM private key from this source, the node jsbn lib is required."))}var i=new j(k.part.d.data);var c;if(!k.part.dmodp){var b=new j(k.part.p.data);var g=i.mod(b.subtract(1));c=bigintToMpBuf(g);k.part.dmodp={name:"dmodp",data:c};k.parts.push(k.part.dmodp)}if(!k.part.dmodq){var a=new j(k.part.q.data);var f=i.mod(a.subtract(1));c=bigintToMpBuf(f);k.part.dmodq={name:"dmodq",data:c};k.parts.push(k.part.dmodq)}}function publicFromPrivateECDSA(i,o){assert.string(i,"curveName");assert.buffer(o);if(ec===undefined){ec=require("ecc-jsbn/lib/ec")}if(jsbn===undefined){jsbn=require("jsbn").BigInteger}var f=algs.curves[i];var c=new jsbn(f.p);var l=new jsbn(f.a);var k=new jsbn(f.b);var e=new ec.ECCurveFp(c,l,k);var n=e.decodePointHex(f.G.toString("hex"));var j=new jsbn(mpNormalize(o));var h=n.multiply(j);h=new Buffer(e.encodePointHex(h),"hex");var g=[];g.push({name:"curve",data:new Buffer(i)});g.push({name:"Q",data:h});var m=new Key({type:"ecdsa",curve:e,parts:g});return(m)}function opensshCipherInfo(a){var b={};switch(a){case"3des-cbc":b.keySize=24;b.blockSize=8;b.opensslName="des-ede3-cbc";break;case"blowfish-cbc":b.keySize=16;b.blockSize=8;b.opensslName="bf-cbc";break;case"aes128-cbc":case"aes128-ctr":case"aes128-gcm@openssh.com":b.keySize=16;b.blockSize=16;b.opensslName="aes-128-"+a.slice(7,10);break;case"aes192-cbc":case"aes192-ctr":case"aes192-gcm@openssh.com":b.keySize=24;b.blockSize=16;b.opensslName="aes-192-"+a.slice(7,10);break;case"aes256-cbc":case"aes256-ctr":case"aes256-gcm@openssh.com":b.keySize=32;b.blockSize=16;b.opensslName="aes-256-"+a.slice(7,10);break;default:throw (new Error('Unsupported openssl cipher "'+a+'"'))}return(b)};