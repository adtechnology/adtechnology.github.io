module.exports=Key;var assert=require("assert-plus");var algs=require("./algs");var crypto=require("crypto");var Fingerprint=require("./fingerprint");var Signature=require("./signature");var DiffieHellman=require("./dhe").DiffieHellman;var errs=require("./errors");var utils=require("./utils");var PrivateKey=require("./private-key");var edCompat;try{edCompat=require("./ed-compat")}catch(e){}var InvalidAlgorithmError=errs.InvalidAlgorithmError;var KeyParseError=errs.KeyParseError;var formats={};formats.auto=require("./formats/auto");formats.pem=require("./formats/pem");formats.pkcs1=require("./formats/pkcs1");formats.pkcs8=require("./formats/pkcs8");formats.rfc4253=require("./formats/rfc4253");formats.ssh=require("./formats/ssh");formats["ssh-private"]=require("./formats/ssh-private");formats.openssh=formats["ssh-private"];formats.dnssec=require("./formats/dnssec");function Key(l){assert.object(l,"options");assert.arrayOfObject(l.parts,"options.parts");assert.string(l.type,"options.type");assert.optionalString(l.comment,"options.comment");var p=algs.info[l.type];if(typeof(p)!=="object"){throw (new InvalidAlgorithmError(l.type))}var i={};for(var m=0;m<l.parts.length;++m){var n=l.parts[m];i[n.name]=n}this.type=l.type;this.parts=l.parts;this.part=i;this.comment=undefined;this.source=l.source;this._rfc4253Cache=l._rfc4253Cache;this._hashCache={};var k;this.curve=undefined;if(this.type==="ecdsa"){var q=this.part.curve.data.toString();this.curve=q;k=algs.curves[q].size}else{if(this.type==="ed25519"||this.type==="curve25519"){k=256;this.curve="curve25519"}else{var o=this.part[p.sizePart];k=o.data.length;k=k*8-utils.countZeros(o.data)}}this.size=k}Key.formats=formats;Key.prototype.toBuffer=function(c,d){if(c===undefined){c="ssh"}assert.string(c,"format");assert.object(formats[c],"formats[format]");assert.optionalObject(d,"options");if(c==="rfc4253"){if(this._rfc4253Cache===undefined){this._rfc4253Cache=formats.rfc4253.write(this)}return(this._rfc4253Cache)}return(formats[c].write(this,d))};Key.prototype.toString=function(c,d){return(this.toBuffer(c,d).toString())};Key.prototype.hash=function(c){assert.string(c,"algorithm");c=c.toLowerCase();if(algs.hashAlgs[c]===undefined){throw (new InvalidAlgorithmError(c))}if(this._hashCache[c]){return(this._hashCache[c])}var d=crypto.createHash(c).update(this.toBuffer("rfc4253")).digest();this._hashCache[c]=d;return(d)};Key.prototype.fingerprint=function(c){if(c===undefined){c="sha256"}assert.string(c,"algorithm");var d={type:"key",hash:this.hash(c),algorithm:c};return(new Fingerprint(d))};Key.prototype.defaultHashAlgorithm=function(){var b="sha1";if(this.type==="rsa"){b="sha256"}if(this.type==="dsa"&&this.size>1024){b="sha256"}if(this.type==="ed25519"){b="sha512"}if(this.type==="ecdsa"){if(this.size<=256){b="sha256"}else{if(this.size<=384){b="sha384"}else{b="sha512"}}}return(b)};Key.prototype.createVerify=function(l){if(l===undefined){l=this.defaultHashAlgorithm()}assert.string(l,"hash algorithm");if(this.type==="ed25519"&&edCompat!==undefined){return(new edCompat.Verifier(this,l))}if(this.type==="curve25519"){throw (new Error("Curve25519 keys are not suitable for signing or verification"))}var o,m,s;try{m=l.toUpperCase();o=crypto.createVerify(m)}catch(r){s=r}if(o===undefined||(s instanceof Error&&s.message.match(/Unknown message digest/))){m="RSA-";m+=l.toUpperCase();o=crypto.createVerify(m)}assert.ok(o,"failed to create verifier");var q=o.verify.bind(o);var p=this.toBuffer("pkcs8");var k=this.curve;var n=this;o.verify=function(a,b){if(Signature.isSignature(a,[2,0])){if(a.type!==n.type){return(false)}if(a.hashAlgorithm&&a.hashAlgorithm!==l){return(false)}if(a.curve&&n.type==="ecdsa"&&a.curve!==k){return(false)}return(q(p,a.toBuffer("asn1")))}else{if(typeof(a)==="string"||Buffer.isBuffer(a)){return(q(p,a,b))}else{if(Signature.isSignature(a,[1,0])){throw (new Error("signature was created by too old a version of sshpk and cannot be verified"))}else{throw (new TypeError("signature must be a string, Buffer, or Signature object"))}}}};return(o)};Key.prototype.createDiffieHellman=function(){if(this.type==="rsa"){throw (new Error("RSA keys do not support Diffie-Hellman"))}return(new DiffieHellman(this))};Key.prototype.createDH=Key.prototype.createDiffieHellman;Key.parse=function(j,h,k){if(typeof(j)!=="string"){assert.buffer(j,"data")}if(h===undefined){h="auto"}assert.string(h,"format");if(typeof(k)==="string"){k={filename:k}}assert.optionalObject(k,"options");if(k===undefined){k={}}assert.optionalString(k.filename,"options.filename");if(k.filename===undefined){k.filename="(unnamed)"}assert.object(formats[h],"formats[format]");try{var g=formats[h].read(j,k);if(g instanceof PrivateKey){g=g.toPublic()}if(!g.comment){g.comment=k.filename}return(g)}catch(i){if(i.name==="KeyEncryptedError"){throw (i)}throw (new KeyParseError(k.filename,h,i))}};Key.isKey=function(c,d){return(utils.isCompatible(c,Key,d))};Key.prototype._sshpkApiVersion=[1,6];Key._oldVersionDetect=function(b){assert.func(b.toBuffer);assert.func(b.fingerprint);if(b.createDH){return([1,4])}if(b.defaultHashAlgorithm){return([1,3])}if(b.formats.auto){return([1,2])}if(b.formats.pkcs1){return([1,1])}return([1,0])};