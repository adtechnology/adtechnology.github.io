module.exports=Signature;var assert=require("assert-plus");var algs=require("./algs");var crypto=require("crypto");var errs=require("./errors");var utils=require("./utils");var asn1=require("asn1");var SSHBuffer=require("./ssh-buffer");var InvalidAlgorithmError=errs.InvalidAlgorithmError;var SignatureParseError=errs.SignatureParseError;function Signature(h){assert.object(h,"options");assert.arrayOfObject(h.parts,"options.parts");assert.string(h.type,"options.type");var g={};for(var e=0;e<h.parts.length;++e){var f=h.parts[e];g[f.name]=f}this.type=h.type;this.hashAlgorithm=h.hashAlgo;this.curve=h.curve;this.parts=h.parts;this.part=g}Signature.prototype.toBuffer=function(l){if(l===undefined){l="asn1"}assert.string(l,"format");var q;var m="ssh-"+this.type;switch(this.type){case"rsa":switch(this.hashAlgorithm){case"sha256":m="rsa-sha2-256";break;case"sha512":m="rsa-sha2-512";break;case"sha1":case undefined:break;default:throw (new Error("SSH signature format does not support hash algorithm "+this.hashAlgorithm))}if(l==="ssh"){q=new SSHBuffer({});q.writeString(m);q.writePart(this.part.sig);return(q.toBuffer())}else{return(this.part.sig.data)}break;case"ed25519":if(l==="ssh"){q=new SSHBuffer({});q.writeString(m);q.writePart(this.part.sig);return(q.toBuffer())}else{return(this.part.sig.data)}break;case"dsa":case"ecdsa":var r,k;if(l==="asn1"){var o=new asn1.BerWriter();o.startSequence();r=utils.mpNormalize(this.part.r.data);k=utils.mpNormalize(this.part.s.data);o.writeBuffer(r,asn1.Ber.Integer);o.writeBuffer(k,asn1.Ber.Integer);o.endSequence();return(o.buffer)}else{if(l==="ssh"&&this.type==="dsa"){q=new SSHBuffer({});q.writeString("ssh-dss");r=this.part.r.data;if(r.length>20&&r[0]===0){r=r.slice(1)}k=this.part.s.data;if(k.length>20&&k[0]===0){k=k.slice(1)}if((this.hashAlgorithm&&this.hashAlgorithm!=="sha1")||r.length+k.length!==40){throw (new Error("OpenSSH only supports DSA signatures with SHA1 hash"))}q.writeBuffer(Buffer.concat([r,k]));return(q.toBuffer())}else{if(l==="ssh"&&this.type==="ecdsa"){var j=new SSHBuffer({});r=this.part.r.data;j.writeBuffer(r);j.writePart(this.part.s);q=new SSHBuffer({});var p;if(r[0]===0){r=r.slice(1)}var n=r.length*8;if(n===256){p="nistp256"}else{if(n===384){p="nistp384"}else{if(n===528){p="nistp521"}}}q.writeString("ecdsa-sha2-"+p);q.writeBuffer(j.toBuffer());return(q.toBuffer())}}}throw (new Error("Invalid signature format"));default:throw (new Error("Invalid signature data"))}};Signature.prototype.toString=function(b){assert.optionalString(b,"format");return(this.toBuffer(b).toString("base64"))};Signature.parse=function(j,g,h){if(typeof(j)==="string"){j=new Buffer(j,"base64")}assert.buffer(j,"data");assert.string(h,"format");assert.string(g,"type");var e={};e.type=g.toLowerCase();e.parts=[];try{assert.ok(j.length>0,"signature must not be empty");switch(e.type){case"rsa":return(parseOneNum(j,g,h,e));case"ed25519":return(parseOneNum(j,g,h,e));case"dsa":case"ecdsa":if(h==="asn1"){return(parseDSAasn1(j,g,h,e))}else{if(e.type==="dsa"){return(parseDSA(j,g,h,e))}else{return(parseECDSA(j,g,h,e))}}default:throw (new InvalidAlgorithmError(g))}}catch(i){if(i instanceof InvalidAlgorithmError){throw (i)}throw (new SignatureParseError(g,h,i))}};function parseOneNum(o,m,k,r){if(k==="ssh"){try{var q=new SSHBuffer({buffer:o});var l=q.readString()}catch(n){}if(q!==undefined){var p="SSH signature does not match expected type (expected "+m+", got "+l+")";switch(l){case"ssh-rsa":assert.strictEqual(m,"rsa",p);r.hashAlgo="sha1";break;case"rsa-sha2-256":assert.strictEqual(m,"rsa",p);r.hashAlgo="sha256";break;case"rsa-sha2-512":assert.strictEqual(m,"rsa",p);r.hashAlgo="sha512";break;case"ssh-ed25519":assert.strictEqual(m,"ed25519",p);r.hashAlgo="sha512";break;default:throw (new Error("Unknown SSH signature type: "+l))}var e=q.readPart();assert.ok(q.atEnd(),"extra trailing bytes");e.name="sig";r.parts.push(e);return(new Signature(r))}}r.parts.push({name:"sig",data:o});return(new Signature(r))}function parseDSAasn1(k,h,j,l){var m=new asn1.BerReader(k);m.readSequence();var n=m.readString(asn1.Ber.Integer,true);var i=m.readString(asn1.Ber.Integer,true);l.parts.push({name:"r",data:utils.mpNormalize(n)});l.parts.push({name:"s",data:utils.mpNormalize(i)});return(new Signature(l))}function parseDSA(k,d,j,l){if(k.length!=40){var h=new SSHBuffer({buffer:k});var i=h.readBuffer();if(i.toString("ascii")==="ssh-dss"){i=h.readBuffer()}assert.ok(h.atEnd(),"extra trailing bytes");assert.strictEqual(i.length,40,"invalid inner length");k=i}l.parts.push({name:"r",data:k.slice(0,20)});l.parts.push({name:"s",data:k.slice(20,40)});return(new Signature(l))}function parseECDSA(p,n,m,t){var r=new SSHBuffer({buffer:p});var s,l;var k=r.readBuffer();var o=k.toString("ascii");if(o.slice(0,6)==="ecdsa-"){var q=o.split("-");assert.strictEqual(q[0],"ecdsa");assert.strictEqual(q[1],"sha2");t.curve=q[2];switch(t.curve){case"nistp256":t.hashAlgo="sha256";break;case"nistp384":t.hashAlgo="sha384";break;case"nistp521":t.hashAlgo="sha512";break;default:throw (new Error("Unsupported ECDSA curve: "+t.curve))}k=r.readBuffer();assert.ok(r.atEnd(),"extra trailing bytes on outer");r=new SSHBuffer({buffer:k});s=r.readPart()}else{s={data:k}}l=r.readPart();assert.ok(r.atEnd(),"extra trailing bytes");s.name="r";l.name="s";t.parts.push(s);t.parts.push(l);return(new Signature(t))}Signature.isSignature=function(c,d){return(utils.isCompatible(c,Signature,d))};Signature.prototype._sshpkApiVersion=[2,1];Signature._oldVersionDetect=function(b){assert.func(b.toBuffer);if(b.hasOwnProperty("hashAlgorithm")){return([2,0])}return([1,0])};