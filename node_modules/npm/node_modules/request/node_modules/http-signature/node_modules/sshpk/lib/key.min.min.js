module.exports=Key;var assert=require("assert-plus");var algs=require("./algs");var crypto=require("crypto");var Fingerprint=require("./fingerprint");var Signature=require("./signature");var DiffieHellman=require("./dhe").DiffieHellman;var errs=require("./errors");var utils=require("./utils");var PrivateKey=require("./private-key");var edCompat;try{edCompat=require("./ed-compat")}catch(e){}var InvalidAlgorithmError=errs.InvalidAlgorithmError;var KeyParseError=errs.KeyParseError;var formats={};formats.auto=require("./formats/auto");formats.pem=require("./formats/pem");formats.pkcs1=require("./formats/pkcs1");formats.pkcs8=require("./formats/pkcs8");formats.rfc4253=require("./formats/rfc4253");formats.ssh=require("./formats/ssh");formats["ssh-private"]=require("./formats/ssh-private");formats.openssh=formats["ssh-private"];formats.dnssec=require("./formats/dnssec");function Key(p){assert.object(p,"options");assert.arrayOfObject(p.parts,"options.parts");assert.string(p.type,"options.type");assert.optionalString(p.comment,"options.comment");var l=algs.info[p.type];if(typeof(l)!=="object"){throw (new InvalidAlgorithmError(p.type))}var n={};for(var q=0;q<p.parts.length;++q){var i=p.parts[q];n[i.name]=i}this.type=p.type;this.parts=p.parts;this.part=n;this.comment=undefined;this.source=p.source;this._rfc4253Cache=p._rfc4253Cache;this._hashCache={};var o;this.curve=undefined;if(this.type==="ecdsa"){var m=this.part.curve.data.toString();this.curve=m;o=algs.curves[m].size}else{if(this.type==="ed25519"||this.type==="curve25519"){o=256;this.curve="curve25519"}else{var k=this.part[l.sizePart];o=k.data.length;o=o*8-utils.countZeros(k.data)}}this.size=o}Key.formats=formats;Key.prototype.toBuffer=function(c,d){if(c===undefined){c="ssh"}assert.string(c,"format");assert.object(formats[c],"formats[format]");assert.optionalObject(d,"options");if(c==="rfc4253"){if(this._rfc4253Cache===undefined){this._rfc4253Cache=formats.rfc4253.write(this)}return(this._rfc4253Cache)}return(formats[c].write(this,d))};Key.prototype.toString=function(c,d){return(this.toBuffer(c,d).toString())};Key.prototype.hash=function(c){assert.string(c,"algorithm");c=c.toLowerCase();if(algs.hashAlgs[c]===undefined){throw (new InvalidAlgorithmError(c))}if(this._hashCache[c]){return(this._hashCache[c])}var d=crypto.createHash(c).update(this.toBuffer("rfc4253")).digest();this._hashCache[c]=d;return(d)};Key.prototype.fingerprint=function(c){if(c===undefined){c="sha256"}assert.string(c,"algorithm");var d={type:"key",hash:this.hash(c),algorithm:c};return(new Fingerprint(d))};Key.prototype.defaultHashAlgorithm=function(){var b="sha1";if(this.type==="rsa"){b="sha256"}if(this.type==="dsa"&&this.size>1024){b="sha256"}if(this.type==="ed25519"){b="sha512"}if(this.type==="ecdsa"){if(this.size<=256){b="sha256"}else{if(this.size<=384){b="sha384"}else{b="sha512"}}}return(b)};Key.prototype.createVerify=function(s){if(s===undefined){s=this.defaultHashAlgorithm()}assert.string(s,"hash algorithm");if(this.type==="ed25519"&&edCompat!==undefined){return(new edCompat.Verifier(this,s))}if(this.type==="curve25519"){throw (new Error("Curve25519 keys are not suitable for signing or verification"))}var m,k,q;try{k=s.toUpperCase();m=crypto.createVerify(k)}catch(p){q=p}if(m===undefined||(q instanceof Error&&q.message.match(/Unknown message digest/))){k="RSA-";k+=s.toUpperCase();m=crypto.createVerify(k)}assert.ok(m,"failed to create verifier");var o=m.verify.bind(m);var n=this.toBuffer("pkcs8");var r=this.curve;var l=this;m.verify=function(a,b){if(Signature.isSignature(a,[2,0])){if(a.type!==l.type){return(false)}if(a.hashAlgorithm&&a.hashAlgorithm!==s){return(false)}if(a.curve&&l.type==="ecdsa"&&a.curve!==r){return(false)}return(o(n,a.toBuffer("asn1")))}else{if(typeof(a)==="string"||Buffer.isBuffer(a)){return(o(n,a,b))}else{if(Signature.isSignature(a,[1,0])){throw (new Error("signature was created by too old a version of sshpk and cannot be verified"))}else{throw (new TypeError("signature must be a string, Buffer, or Signature object"))}}}};return(m)};Key.prototype.createDiffieHellman=function(){if(this.type==="rsa"){throw (new Error("RSA keys do not support Diffie-Hellman"))}return(new DiffieHellman(this))};Key.prototype.createDH=Key.prototype.createDiffieHellman;Key.parse=function(k,i,g){if(typeof(k)!=="string"){assert.buffer(k,"data")}if(i===undefined){i="auto"}assert.string(i,"format");if(typeof(g)==="string"){g={filename:g}}assert.optionalObject(g,"options");if(g===undefined){g={}}assert.optionalString(g.filename,"options.filename");if(g.filename===undefined){g.filename="(unnamed)"}assert.object(formats[i],"formats[format]");try{var h=formats[i].read(k,g);if(h instanceof PrivateKey){h=h.toPublic()}if(!h.comment){h.comment=g.filename}return(h)}catch(j){if(j.name==="KeyEncryptedError"){throw (j)}throw (new KeyParseError(g.filename,i,j))}};Key.isKey=function(c,d){return(utils.isCompatible(c,Key,d))};Key.prototype._sshpkApiVersion=[1,6];Key._oldVersionDetect=function(b){assert.func(b.toBuffer);assert.func(b.fingerprint);if(b.createDH){return([1,4])}if(b.defaultHashAlgorithm){return([1,3])}if(b.formats.auto){return([1,2])}if(b.formats.pkcs1){return([1,1])}return([1,0])};