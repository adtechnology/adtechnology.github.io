module.exports={read:read,write:write};var assert=require("assert-plus");var Key=require("../key");var PrivateKey=require("../private-key");var utils=require("../utils");var SSHBuffer=require("../ssh-buffer");var Dhe=require("../dhe");var supportedAlgos={"rsa-sha1":5,"rsa-sha256":8,"rsa-sha512":10,"ecdsa-p256-sha256":13,"ecdsa-p384-sha384":14};var supportedAlgosById={};Object.keys(supportedAlgos).forEach(function(a){supportedAlgosById[supportedAlgos[a]]=a.toUpperCase()});function read(e,d){if(typeof(e)!=="string"){assert.buffer(e,"buf");e=e.toString("ascii")}var c=e.split("\n");if(c[0].match(/^Private-key-format\: v1/)){var g=c[1].split(" ");var b=parseInt(g[1],10);var f=g[2];if(!supportedAlgosById[b]){throw (new Error("Unsupported algorithm: "+f))}return(readDNSSECPrivateKey(b,c.slice(2)))}var a=0;while(c[a].match(/^\;/)){a++}if((c[a].match(/\. IN KEY /)||c[a].match(/\. IN DNSKEY /))&&c[a+1].length===0){return(readRFC3110(c[a]))}throw (new Error("Cannot parse dnssec key"))}function readRFC3110(g){var b=g.split(" ");var h=parseInt(b[5],10);if(!supportedAlgosById[h]){throw (new Error("Unsupported algorithm: "+h))}var a=b.slice(6,b.length).join();var d=new Buffer(a,"base64");if(supportedAlgosById[h].match(/^RSA-/)){var i=d.readUInt8(0);if(i!=3&&i!=1){throw (new Error("Cannot parse dnssec key: unsupported exponent length"))}var e=d.slice(1,i+1);e=utils.mpNormalize(e);var j=d.slice(1+i);j=utils.mpNormalize(j);var f={type:"rsa",parts:[]};f.parts.push({name:"e",data:e});f.parts.push({name:"n",data:j});return(new Key(f))}if(supportedAlgosById[h]==="ECDSA-P384-SHA384"||supportedAlgosById[h]==="ECDSA-P256-SHA256"){var c="nistp384";var l=384;if(supportedAlgosById[h].match(/^ECDSA-P256-SHA256/)){c="nistp256";l=256}var k={type:"ecdsa",curve:c,size:l,parts:[{name:"curve",data:new Buffer(c)},{name:"Q",data:utils.ecNormalize(d)}]};return(new Key(k))}throw (new Error("Unsupported algorithm: "+supportedAlgosById[h]))}function elementToBuf(a){return(new Buffer(a.split(" ")[1],"base64"))}function readDNSSECRSAPrivateKey(c){var b={};c.forEach(function(d){if(d.split(" ")[0]==="Modulus:"){b.n=elementToBuf(d)}else{if(d.split(" ")[0]==="PublicExponent:"){b.e=elementToBuf(d)}else{if(d.split(" ")[0]==="PrivateExponent:"){b.d=elementToBuf(d)}else{if(d.split(" ")[0]==="Prime1:"){b.p=elementToBuf(d)}else{if(d.split(" ")[0]==="Prime2:"){b.q=elementToBuf(d)}else{if(d.split(" ")[0]==="Exponent1:"){b.dmodp=elementToBuf(d)}else{if(d.split(" ")[0]==="Exponent2:"){b.dmodq=elementToBuf(d)}else{if(d.split(" ")[0]==="Coefficient:"){b.iqmp=elementToBuf(d)}}}}}}}}});var a={type:"rsa",parts:[{name:"e",data:utils.mpNormalize(b.e)},{name:"n",data:utils.mpNormalize(b.n)},{name:"d",data:utils.mpNormalize(b.d)},{name:"p",data:utils.mpNormalize(b.p)},{name:"q",data:utils.mpNormalize(b.q)},{name:"dmodp",data:utils.mpNormalize(b.dmodp)},{name:"dmodq",data:utils.mpNormalize(b.dmodq)},{name:"iqmp",data:utils.mpNormalize(b.iqmp)}]};return(new PrivateKey(a))}function readDNSSECPrivateKey(i,e){if(supportedAlgosById[i].match(/^RSA-/)){return(readDNSSECRSAPrivateKey(e))}if(supportedAlgosById[i]==="ECDSA-P384-SHA384"||supportedAlgosById[i]==="ECDSA-P256-SHA256"){var h=new Buffer(e[0].split(" ")[1],"base64");var g="nistp384";var b=384;if(supportedAlgosById[i]==="ECDSA-P256-SHA256"){g="nistp256";b=256}var f=utils.publicFromPrivateECDSA(g,h);var c=f.part.Q.data;var a={type:"ecdsa",curve:g,size:b,parts:[{name:"curve",data:new Buffer(g)},{name:"d",data:h},{name:"Q",data:c}]};return(new PrivateKey(a))}throw (new Error("Unsupported algorithm: "+supportedAlgosById[i]))}function dnssecTimestamp(a){var b=a.getFullYear()+"";var d=(a.getMonth()+1);var c=b+d+a.getUTCDate();c+=""+a.getUTCHours()+a.getUTCMinutes();c+=a.getUTCSeconds();return(c)}function rsaAlgFromOptions(a){if(!a||!a.hashAlgo||a.hashAlgo==="sha1"){return("5 (RSASHA1)")}else{if(a.hashAlgo==="sha256"){return("8 (RSASHA256)")}else{if(a.hashAlgo==="sha512"){return("10 (RSASHA512)")}else{throw (new Error("Unknown or unsupported hash: "+a.hashAlgo))}}}}function writeRSA(m,o){if(!m.part.dmodp||!m.part.dmodq){utils.addRSAMissing(m)}var i="";i+="Private-key-format: v1.3\n";i+="Algorithm: "+rsaAlgFromOptions(o)+"\n";var c=utils.mpDenormalize(m.part.n.data);i+="Modulus: "+c.toString("base64")+"\n";var k=utils.mpDenormalize(m.part.e.data);i+="PublicExponent: "+k.toString("base64")+"\n";var l=utils.mpDenormalize(m.part.d.data);i+="PrivateExponent: "+l.toString("base64")+"\n";var b=utils.mpDenormalize(m.part.p.data);i+="Prime1: "+b.toString("base64")+"\n";var a=utils.mpDenormalize(m.part.q.data);i+="Prime2: "+a.toString("base64")+"\n";var g=utils.mpDenormalize(m.part.dmodp.data);i+="Exponent1: "+g.toString("base64")+"\n";var f=utils.mpDenormalize(m.part.dmodq.data);i+="Exponent2: "+f.toString("base64")+"\n";var h=utils.mpDenormalize(m.part.iqmp.data);i+="Coefficient: "+h.toString("base64")+"\n";var j=new Date();i+="Created: "+dnssecTimestamp(j)+"\n";i+="Publish: "+dnssecTimestamp(j)+"\n";i+="Activate: "+dnssecTimestamp(j)+"\n";return(new Buffer(i,"ascii"))}function writeECDSA(c,b){var a="";a+="Private-key-format: v1.3\n";if(c.curve==="nistp256"){a+="Algorithm: 13 (ECDSAP256SHA256)\n"}else{if(c.curve==="nistp384"){a+="Algorithm: 14 (ECDSAP384SHA384)\n"}else{throw (new Error("Unsupported curve"))}}var d=c.part.d.data.toString("base64");a+="PrivateKey: "+d+"\n";var e=new Date();a+="Created: "+dnssecTimestamp(e)+"\n";a+="Publish: "+dnssecTimestamp(e)+"\n";a+="Activate: "+dnssecTimestamp(e)+"\n";return(new Buffer(a,"ascii"))}function write(b,a){if(PrivateKey.isPrivateKey(b)){if(b.type==="rsa"){return(writeRSA(b,a))}else{if(b.type==="ecdsa"){return(writeECDSA(b,a))}else{throw (new Error("Unsupported algorithm: "+b.type))}}}else{if(Key.isKey(b)){throw (new Error('Format "dnssec" only supports writing private keys'))}else{throw (new Error("key is not a Key or PrivateKey"))}}};