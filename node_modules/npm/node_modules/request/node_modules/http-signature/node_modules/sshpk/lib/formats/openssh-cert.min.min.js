module.exports={read:read,verify:verify,sign:sign,signAsync:signAsync,write:write,fromBuffer:fromBuffer,toBuffer:toBuffer};var assert=require("assert-plus");var SSHBuffer=require("../ssh-buffer");var crypto=require("crypto");var algs=require("../algs");var Key=require("../key");var PrivateKey=require("../private-key");var Identity=require("../identity");var rfc4253=require("./rfc4253");var Signature=require("../signature");var utils=require("../utils");var Certificate=require("../certificate");function verify(c,d){return(false)}var TYPES={user:1,host:2};Object.keys(TYPES).forEach(function(b){TYPES[TYPES[b]]=b});var ECDSA_ALGO=/^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;function read(f,g){if(Buffer.isBuffer(f)){f=f.toString("ascii")}var i=f.trim().split(/[ \t\n]+/g);if(i.length<2||i.length>3){throw (new Error("Not a valid SSH certificate line"))}var h=i[0];var j=i[1];j=new Buffer(j,"base64");return(fromBuffer(j,h))}function fromBuffer(v,x,L){var F=new SSHBuffer({buffer:v});var z=F.readString();if(x!==undefined&&z!==x){throw (new Error("SSH certificate algorithm mismatch"))}if(x===undefined){x=z}var w={};w.signatures={};w.signatures.openssh={};w.signatures.openssh.nonce=F.readBuffer();var p={};var A=(p.parts=[]);p.type=getAlg(x);var H=algs.info[p.type].parts.length;while(A.length<H){A.push(F.readPart())}assert.ok(A.length>=1,"key must have at least one part");var D=algs.info[p.type];if(p.type==="ecdsa"){var i=ECDSA_ALGO.exec(x);assert.ok(i!==null);assert.strictEqual(i[1],A[0].data.toString())}for(var y=0;y<D.parts.length;++y){A[y].name=D.parts[y];if(A[y].name!=="curve"&&D.normalize!==false){var C=A[y];C.data=utils.mpNormalize(C.data)}}w.subjectKey=new Key(p);w.serial=F.readInt64();var J=TYPES[F.readInt()];assert.string(J,"valid cert type");w.signatures.openssh.keyId=F.readString();var K=[];var E=F.readBuffer();var I=new SSHBuffer({buffer:E});while(!I.atEnd()){K.push(I.readString())}if(K.length===0){K=["*"]}w.subjects=K.map(function(a){if(J==="user"){return(Identity.forUser(a))}else{if(J==="host"){return(Identity.forHost(a))}}throw (new Error("Unknown identity type "+J))});w.validFrom=int64ToDate(F.readInt64());w.validUntil=int64ToDate(F.readInt64());w.signatures.openssh.critical=F.readBuffer();w.signatures.openssh.exts=F.readBuffer();F.readBuffer();var B=F.readBuffer();w.issuerKey=rfc4253.read(B);w.issuer=Identity.forHost("**");var G=F.readBuffer();w.signatures.openssh.signature=Signature.parse(G,w.issuerKey.type,"ssh");if(L!==undefined){L.remainder=F.remainder();L.consumed=F._offset}return(new Certificate(w))}function int64ToDate(e){var d=e.readUInt32BE(0)*4294967296;d+=e.readUInt32BE(4);var f=new Date();f.setTime(d*1000);f.sourceInt64=e;return(f)}function dateToInt64(j){if(j.sourceInt64!==undefined){return(j.sourceInt64)}var i=Math.round(j.getTime()/1000);var h=Math.floor(i/4294967296);var f=Math.floor(i%4294967296);var g=new Buffer(8);g.writeUInt32BE(h,0);g.writeUInt32BE(f,4);return(g)}function sign(n,e){if(n.signatures.openssh===undefined){n.signatures.openssh={}}try{var i=toBuffer(n,true)}catch(l){delete (n.signatures.openssh);return(false)}var j=n.signatures.openssh;var m=undefined;if(e.type==="rsa"||e.type==="dsa"){m="sha1"}var k=e.createSign(m);k.write(i);j.signature=k.sign();return(true)}function signAsync(l,i,h){if(l.signatures.openssh===undefined){l.signatures.openssh={}}try{var e=toBuffer(l,true)}catch(k){delete (l.signatures.openssh);h(k);return}var j=l.signatures.openssh;i(e,function(b,c){if(b){h(b);return}try{c.toBuffer("ssh")}catch(a){h(a);return}j.signature=c;h()})}function write(g,h){if(h===undefined){h={}}var f=toBuffer(g);var e=getCertType(g.subjectKey)+" "+f.toString("base64");if(h.comment){e=e+" "+h.comment}return(e)}function toBuffer(o,j){assert.object(o.signatures.openssh,"signature for openssh format");var l=o.signatures.openssh;if(l.nonce===undefined){l.nonce=crypto.randomBytes(16)}var i=new SSHBuffer({});i.writeString(getCertType(o.subjectKey));i.writeBuffer(l.nonce);var p=o.subjectKey;var k=algs.info[p.type];k.parts.forEach(function(a){i.writePart(p.part[a])});i.writeInt64(o.serial);var m=o.subjects[0].type;assert.notStrictEqual(m,"unknown");o.subjects.forEach(function(a){assert.strictEqual(a.type,m)});m=TYPES[m];i.writeInt(m);if(l.keyId===undefined){l.keyId=o.subjects[0].type+"_"+(o.subjects[0].uid||o.subjects[0].hostname)}i.writeString(l.keyId);var n=new SSHBuffer({});o.subjects.forEach(function(a){if(m===TYPES.host){n.writeString(a.hostname)}else{if(m===TYPES.user){n.writeString(a.uid)}}});i.writeBuffer(n.toBuffer());i.writeInt64(dateToInt64(o.validFrom));i.writeInt64(dateToInt64(o.validUntil));if(l.critical===undefined){l.critical=new Buffer(0)}i.writeBuffer(l.critical);if(l.exts===undefined){l.exts=new Buffer(0)}i.writeBuffer(l.exts);i.writeBuffer(new Buffer(0));n=rfc4253.write(o.issuerKey);i.writeBuffer(n);if(!j){i.writeBuffer(l.signature.toBuffer("ssh"))}return(i.toBuffer())}function getAlg(b){if(b==="ssh-rsa-cert-v01@openssh.com"){return("rsa")}if(b==="ssh-dss-cert-v01@openssh.com"){return("dsa")}if(b.match(ECDSA_ALGO)){return("ecdsa")}if(b==="ssh-ed25519-cert-v01@openssh.com"){return("ed25519")}throw (new Error("Unsupported cert type "+b))}function getCertType(b){if(b.type==="rsa"){return("ssh-rsa-cert-v01@openssh.com")}if(b.type==="dsa"){return("ssh-dss-cert-v01@openssh.com")}if(b.type==="ecdsa"){return("ecdsa-sha2-"+b.curve+"-cert-v01@openssh.com")}if(b.type==="ed25519"){return("ssh-ed25519-cert-v01@openssh.com")}throw (new Error("Unsupported key type "+b.type))};