module.exports={read:read,verify:verify,sign:sign,signAsync:signAsync,write:write,fromBuffer:fromBuffer,toBuffer:toBuffer};var assert=require("assert-plus");var SSHBuffer=require("../ssh-buffer");var crypto=require("crypto");var algs=require("../algs");var Key=require("../key");var PrivateKey=require("../private-key");var Identity=require("../identity");var rfc4253=require("./rfc4253");var Signature=require("../signature");var utils=require("../utils");var Certificate=require("../certificate");function verify(b,a){return(false)}var TYPES={user:1,host:2};Object.keys(TYPES).forEach(function(a){TYPES[TYPES[a]]=a});var ECDSA_ALGO=/^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;function read(e,d){if(Buffer.isBuffer(e)){e=e.toString("ascii")}var b=e.trim().split(/[ \t\n]+/g);if(b.length<2||b.length>3){throw (new Error("Not a valid SSH certificate line"))}var c=b[0];var a=b[1];a=new Buffer(a,"base64");return(fromBuffer(a,c))}function fromBuffer(l,g,a){var m=new SSHBuffer({buffer:l});var c=m.readString();if(g!==undefined&&c!==g){throw (new Error("SSH certificate algorithm mismatch"))}if(g===undefined){g=c}var j={};j.signatures={};j.signatures.openssh={};j.signatures.openssh.nonce=m.readBuffer();var t={};var s=(t.parts=[]);t.type=getAlg(g);var h=algs.info[t.type].parts.length;while(s.length<h){s.push(m.readPart())}assert.ok(s.length>=1,"key must have at least one part");var o=algs.info[t.type];if(t.type==="ecdsa"){var u=ECDSA_ALGO.exec(g);assert.ok(u!==null);assert.strictEqual(u[1],s[0].data.toString())}for(var e=0;e<o.parts.length;++e){s[e].name=o.parts[e];if(s[e].name!=="curve"&&o.normalize!==false){var q=s[e];q.data=utils.mpNormalize(q.data)}}j.subjectKey=new Key(t);j.serial=m.readInt64();var d=TYPES[m.readInt()];assert.string(d,"valid cert type");j.signatures.openssh.keyId=m.readString();var b=[];var n=m.readBuffer();var f=new SSHBuffer({buffer:n});while(!f.atEnd()){b.push(f.readString())}if(b.length===0){b=["*"]}j.subjects=b.map(function(i){if(d==="user"){return(Identity.forUser(i))}else{if(d==="host"){return(Identity.forHost(i))}}throw (new Error("Unknown identity type "+d))});j.validFrom=int64ToDate(m.readInt64());j.validUntil=int64ToDate(m.readInt64());j.signatures.openssh.critical=m.readBuffer();j.signatures.openssh.exts=m.readBuffer();m.readBuffer();var r=m.readBuffer();j.issuerKey=rfc4253.read(r);j.issuer=Identity.forHost("**");var k=m.readBuffer();j.signatures.openssh.signature=Signature.parse(k,j.issuerKey.type,"ssh");if(a!==undefined){a.remainder=m.remainder();a.consumed=m._offset}return(new Certificate(j))}function int64ToDate(b){var c=b.readUInt32BE(0)*4294967296;c+=b.readUInt32BE(4);var a=new Date();a.setTime(c*1000);a.sourceInt64=b;return(a)}function dateToInt64(a){if(a.sourceInt64!==undefined){return(a.sourceInt64)}var b=Math.round(a.getTime()/1000);var c=Math.floor(b/4294967296);var e=Math.floor(b%4294967296);var d=new Buffer(8);d.writeUInt32BE(c,0);d.writeUInt32BE(e,4);return(d)}function sign(h,g){if(h.signatures.openssh===undefined){h.signatures.openssh={}}try{var f=toBuffer(h,true)}catch(b){delete (h.signatures.openssh);return(false)}var d=h.signatures.openssh;var a=undefined;if(g.type==="rsa"||g.type==="dsa"){a="sha1"}var c=g.createSign(a);c.write(f);d.signature=c.sign();return(true)}function signAsync(a,d,f){if(a.signatures.openssh===undefined){a.signatures.openssh={}}try{var g=toBuffer(a,true)}catch(b){delete (a.signatures.openssh);f(b);return}var c=a.signatures.openssh;d(g,function(e,i){if(e){f(e);return}try{i.toBuffer("ssh")}catch(h){f(h);return}c.signature=i;f()})}function write(b,a){if(a===undefined){a={}}var c=toBuffer(b);var d=getCertType(b.subjectKey)+" "+c.toString("base64");if(a.comment){d=d+" "+a.comment}return(d)}function toBuffer(g,d){assert.object(g.signatures.openssh,"signature for openssh format");var b=g.signatures.openssh;if(b.nonce===undefined){b.nonce=crypto.randomBytes(16)}var e=new SSHBuffer({});e.writeString(getCertType(g.subjectKey));e.writeBuffer(b.nonce);var f=g.subjectKey;var c=algs.info[f.type];c.parts.forEach(function(i){e.writePart(f.part[i])});e.writeInt64(g.serial);var a=g.subjects[0].type;assert.notStrictEqual(a,"unknown");g.subjects.forEach(function(i){assert.strictEqual(i.type,a)});a=TYPES[a];e.writeInt(a);if(b.keyId===undefined){b.keyId=g.subjects[0].type+"_"+(g.subjects[0].uid||g.subjects[0].hostname)}e.writeString(b.keyId);var h=new SSHBuffer({});g.subjects.forEach(function(i){if(a===TYPES.host){h.writeString(i.hostname)}else{if(a===TYPES.user){h.writeString(i.uid)}}});e.writeBuffer(h.toBuffer());e.writeInt64(dateToInt64(g.validFrom));e.writeInt64(dateToInt64(g.validUntil));if(b.critical===undefined){b.critical=new Buffer(0)}e.writeBuffer(b.critical);if(b.exts===undefined){b.exts=new Buffer(0)}e.writeBuffer(b.exts);e.writeBuffer(new Buffer(0));h=rfc4253.write(g.issuerKey);e.writeBuffer(h);if(!d){e.writeBuffer(b.signature.toBuffer("ssh"))}return(e.toBuffer())}function getAlg(a){if(a==="ssh-rsa-cert-v01@openssh.com"){return("rsa")}if(a==="ssh-dss-cert-v01@openssh.com"){return("dsa")}if(a.match(ECDSA_ALGO)){return("ecdsa")}if(a==="ssh-ed25519-cert-v01@openssh.com"){return("ed25519")}throw (new Error("Unsupported cert type "+a))}function getCertType(a){if(a.type==="rsa"){return("ssh-rsa-cert-v01@openssh.com")}if(a.type==="dsa"){return("ssh-dss-cert-v01@openssh.com")}if(a.type==="ecdsa"){return("ecdsa-sha2-"+a.curve+"-cert-v01@openssh.com")}if(a.type==="ed25519"){return("ssh-ed25519-cert-v01@openssh.com")}throw (new Error("Unsupported key type "+a.type))};