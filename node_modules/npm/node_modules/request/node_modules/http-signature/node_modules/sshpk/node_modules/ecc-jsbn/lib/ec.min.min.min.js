var BigInteger=require("jsbn").BigInteger;var Barrett=BigInteger.prototype.Barrett;function ECFieldElementFp(b,a){this.x=a;this.q=b}function feFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.x.equals(a.x))}function feFpToBigInteger(){return this.x}function feFpNegate(){return new ECFieldElementFp(this.q,this.x.negate().mod(this.q))}function feFpAdd(a){return new ECFieldElementFp(this.q,this.x.add(a.toBigInteger()).mod(this.q))}function feFpSubtract(a){return new ECFieldElementFp(this.q,this.x.subtract(a.toBigInteger()).mod(this.q))}function feFpMultiply(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger()).mod(this.q))}function feFpSquare(){return new ECFieldElementFp(this.q,this.x.square().mod(this.q))}function feFpDivide(a){return new ECFieldElementFp(this.q,this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q))}ECFieldElementFp.prototype.equals=feFpEquals;ECFieldElementFp.prototype.toBigInteger=feFpToBigInteger;ECFieldElementFp.prototype.negate=feFpNegate;ECFieldElementFp.prototype.add=feFpAdd;ECFieldElementFp.prototype.subtract=feFpSubtract;ECFieldElementFp.prototype.multiply=feFpMultiply;ECFieldElementFp.prototype.square=feFpSquare;ECFieldElementFp.prototype.divide=feFpDivide;function ECPointFp(a,c,b,d){this.curve=a;this.x=c;this.y=b;if(d==null){this.z=BigInteger.ONE}else{this.z=d}this.zinv=null}function pointFpGetX(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}var a=this.x.toBigInteger().multiply(this.zinv);this.curve.reduce(a);return this.curve.fromBigInteger(a)}function pointFpGetY(){if(this.zinv==null){this.zinv=this.z.modInverse(this.curve.q)}var a=this.y.toBigInteger().multiply(this.zinv);this.curve.reduce(a);return this.curve.fromBigInteger(a)}function pointFpEquals(b){if(b==this){return true}if(this.isInfinity()){return b.isInfinity()}if(b.isInfinity()){return this.isInfinity()}var a,c;a=b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);if(!a.equals(BigInteger.ZERO)){return false}c=b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);return c.equals(BigInteger.ZERO)}function pointFpIsInfinity(){if((this.x==null)&&(this.y==null)){return true}return this.z.equals(BigInteger.ZERO)&&!this.y.toBigInteger().equals(BigInteger.ZERO)}function pointFpNegate(){return new ECPointFp(this.curve,this.x,this.y.negate(),this.z)}function pointFpAdd(m){if(this.isInfinity()){return m}if(m.isInfinity()){return this}var i=m.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(m.z)).mod(this.curve.q);var c=m.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(m.z)).mod(this.curve.q);if(BigInteger.ZERO.equals(c)){if(BigInteger.ZERO.equals(i)){return this.twice()}return this.curve.getInfinity()}var k=new BigInteger("3");var e=this.x.toBigInteger();var p=this.y.toBigInteger();var a=m.x.toBigInteger();var l=m.y.toBigInteger();var n=c.square();var j=n.multiply(c);var d=e.multiply(n);var g=i.square().multiply(this.z);var o=g.subtract(d.shiftLeft(1)).multiply(m.z).subtract(j).multiply(c).mod(this.curve.q);var h=d.multiply(k).multiply(i).subtract(p.multiply(j)).subtract(g.multiply(i)).multiply(m.z).add(i.multiply(j)).mod(this.curve.q);var f=j.multiply(this.z).multiply(m.z).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(o),this.curve.fromBigInteger(h),f)}function pointFpTwice(){if(this.isInfinity()){return this}if(this.y.toBigInteger().signum()==0){return this.curve.getInfinity()}var d=new BigInteger("3");var j=this.x.toBigInteger();var e=this.y.toBigInteger();var b=e.multiply(this.z);var g=b.multiply(e).mod(this.curve.q);var f=this.curve.a.toBigInteger();var h=j.square().multiply(d);if(!BigInteger.ZERO.equals(f)){h=h.add(this.z.square().multiply(f))}h=h.mod(this.curve.q);var i=h.square().subtract(j.shiftLeft(3).multiply(g)).shiftLeft(1).multiply(b).mod(this.curve.q);var c=h.multiply(d).multiply(j).subtract(g.shiftLeft(1)).shiftLeft(2).multiply(g).subtract(h.square().multiply(h)).mod(this.curve.q);var k=b.square().multiply(b).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve,this.curve.fromBigInteger(i),this.curve.fromBigInteger(c),k)}function pointFpMultiply(g){if(this.isInfinity()){return this}if(g.signum()==0){return this.curve.getInfinity()}var a=g;var l=a.multiply(new BigInteger("3"));var c=this.negate();var j=this;var f;for(f=l.bitLength()-2;f>0;--f){j=j.twice();var d=l.testBit(f);var b=a.testBit(f);if(d!=b){j=j.add(d?this:c)}}return j}function pointFpMultiplyTwo(a,e,f){var b;if(a.bitLength()>f.bitLength()){b=a.bitLength()-1}else{b=f.bitLength()-1}var d=this.curve.getInfinity();var c=this.add(e);while(b>=0){d=d.twice();if(a.testBit(b)){if(f.testBit(b)){d=d.add(c)}else{d=d.add(this)}}else{if(f.testBit(b)){d=d.add(e)}}--b}return d}ECPointFp.prototype.getX=pointFpGetX;ECPointFp.prototype.getY=pointFpGetY;ECPointFp.prototype.equals=pointFpEquals;ECPointFp.prototype.isInfinity=pointFpIsInfinity;ECPointFp.prototype.negate=pointFpNegate;ECPointFp.prototype.add=pointFpAdd;ECPointFp.prototype.twice=pointFpTwice;ECPointFp.prototype.multiply=pointFpMultiply;ECPointFp.prototype.multiplyTwo=pointFpMultiplyTwo;function ECCurveFp(d,c,e){this.q=d;this.a=this.fromBigInteger(c);this.b=this.fromBigInteger(e);this.infinity=new ECPointFp(this,null,null);this.reducer=new Barrett(this.q)}function curveFpGetQ(){return this.q}function curveFpGetA(){return this.a}function curveFpGetB(){return this.b}function curveFpEquals(a){if(a==this){return true}return(this.q.equals(a.q)&&this.a.equals(a.a)&&this.b.equals(a.b))}function curveFpGetInfinity(){return this.infinity}function curveFpFromBigInteger(a){return new ECFieldElementFp(this.q,a)}function curveReduce(a){this.reducer.reduce(a)}function curveFpDecodePointHex(b){switch(parseInt(b.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var c=(b.length-2)/2;var a=b.substr(2,c);var d=b.substr(c+2,c);return new ECPointFp(this,this.fromBigInteger(new BigInteger(a,16)),this.fromBigInteger(new BigInteger(d,16)));default:return null}}function curveFpEncodePointHex(b){if(b.isInfinity()){return"00"}var a=b.getX().toBigInteger().toString(16);var c=b.getY().toBigInteger().toString(16);var d=this.getQ().toString(16).length;if((d%2)!=0){d++}while(a.length<d){a="0"+a}while(c.length<d){c="0"+c}return"04"+a+c}ECCurveFp.prototype.getQ=curveFpGetQ;ECCurveFp.prototype.getA=curveFpGetA;ECCurveFp.prototype.getB=curveFpGetB;ECCurveFp.prototype.equals=curveFpEquals;ECCurveFp.prototype.getInfinity=curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger=curveFpFromBigInteger;ECCurveFp.prototype.reduce=curveReduce;ECCurveFp.prototype.encodePointHex=curveFpEncodePointHex;ECCurveFp.prototype.decodePointHex=function(g){var f;switch(parseInt(g.substr(0,2),16)){case 0:return this.infinity;case 2:f=false;case 3:if(f==undefined){f=true}var b=g.length-2;var h=g.substr(2,b);var d=this.fromBigInteger(new BigInteger(h,16));var i=d.multiply(d.square().add(this.getA())).add(this.getB());var e=i.sqrt();if(e==null){throw"Invalid point compression"}var a=e.toBigInteger();if(a.testBit(0)!=f){e=this.fromBigInteger(this.getQ().subtract(a))}return new ECPointFp(this,d,e);case 4:case 6:case 7:var b=(g.length-2)/2;var h=g.substr(2,b);var c=g.substr(b+2,b);return new ECPointFp(this,this.fromBigInteger(new BigInteger(h,16)),this.fromBigInteger(new BigInteger(c,16)));default:return null}};ECCurveFp.prototype.encodeCompressedPointHex=function(b){if(b.isInfinity()){return"00"}var d=b.getX().toBigInteger().toString(16);var c=this.getQ().toString(16).length;if((c%2)!=0){c++}while(d.length<c){d="0"+d}var a;if(b.getY().toBigInteger().isEven()){a="02"}else{a="03"}return a+d};ECFieldElementFp.prototype.getR=function(){if(this.r!=undefined){return this.r}this.r=null;var a=this.q.bitLength();if(a>128){var b=this.q.shiftRight(a-64);if(b.intValue()==-1){this.r=BigInteger.ONE.shiftLeft(a).subtract(this.q)}}return this.r};ECFieldElementFp.prototype.modMult=function(b,a){return this.modReduce(b.multiply(a))};ECFieldElementFp.prototype.modReduce=function(c){if(this.getR()!=null){var b=q.bitLength();while(c.bitLength()>(b+1)){var a=c.shiftRight(b);var d=c.subtract(a.shiftLeft(b));if(!this.getR().equals(BigInteger.ONE)){a=a.multiply(this.getR())}c=a.add(d)}while(c.compareTo(q)>=0){c=c.subtract(q)}}else{c=c.mod(q)}return c};ECFieldElementFp.prototype.sqrt=function(){if(!this.q.testBit(0)){throw"unsupported"}if(this.q.testBit(1)){var d=new ECFieldElementFp(this.q,this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE),this.q));return d.square().equals(this)?d:null}var g=this.q.subtract(BigInteger.ONE);var b=g.shiftRight(1);if(!(this.x.modPow(b,this.q).equals(BigInteger.ONE))){return null}var e=g.shiftRight(2);var j=e.shiftLeft(1).add(BigInteger.ONE);var a=this.x;var l=modDouble(modDouble(a));var i,h;do{var c;do{c=new BigInteger(this.q.bitLength(),new SecureRandom())}while(c.compareTo(this.q)>=0||!(c.multiply(c).subtract(l).modPow(b,this.q).equals(g)));var f=this.lucasSequence(c,a,j);i=f[0];h=f[1];if(this.modMult(h,h).equals(l)){if(h.testBit(0)){h=h.add(q)}h=h.shiftRight(1);return new ECFieldElementFp(q,h)}}while(i.equals(BigInteger.ONE)||i.equals(g));return null};ECFieldElementFp.prototype.lucasSequence=function(c,b,l){var h=l.bitLength();var f=l.getLowestSetBit();var e=BigInteger.ONE;var a=BigInteger.TWO;var d=c;var g=BigInteger.ONE;var i=BigInteger.ONE;for(var m=h-1;m>=f+1;--m){g=this.modMult(g,i);if(l.testBit(m)){i=this.modMult(g,b);e=this.modMult(e,d);a=this.modReduce(d.multiply(a).subtract(c.multiply(g)));d=this.modReduce(d.multiply(d).subtract(i.shiftLeft(1)))}else{i=g;e=this.modReduce(e.multiply(a).subtract(g));d=this.modReduce(d.multiply(a).subtract(c.multiply(g)));a=this.modReduce(a.multiply(a).subtract(g.shiftLeft(1)))}}g=this.modMult(g,i);i=this.modMult(g,b);e=this.modReduce(e.multiply(a).subtract(g));a=this.modReduce(d.multiply(a).subtract(c.multiply(g)));g=this.modMult(g,i);for(var m=1;m<=f;++m){e=this.modMult(e,a);a=this.modReduce(a.multiply(a).subtract(g.shiftLeft(1)));g=this.modMult(g,g)}return[e,a]};var exports={ECCurveFp:ECCurveFp,ECPointFp:ECPointFp,ECFieldElementFp:ECFieldElementFp};module.exports=exports;