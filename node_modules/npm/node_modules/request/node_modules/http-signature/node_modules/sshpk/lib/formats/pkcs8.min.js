module.exports={read:read,readPkcs8:readPkcs8,write:write,writePkcs8:writePkcs8,readECDSACurve:readECDSACurve,writeECDSACurve:writeECDSACurve};var assert=require("assert-plus");var asn1=require("asn1");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pem=require("./pem");function read(b,a){return(pem.read(b,a,"pkcs8"))}function write(b,a){return(pem.write(b,a,"pkcs8"))}function readMPInt(b,a){assert.strictEqual(b.peek(),asn1.Ber.Integer,a+" is not an Integer");return(utils.mpNormalize(b.readString(asn1.Ber.Integer,true)))}function readPkcs8(e,b,d){if(d.peek()===asn1.Ber.Integer){assert.strictEqual(b,"private","unexpected Integer at start of public key");d.readString(asn1.Ber.Integer,true)}d.readSequence();var a=d.offset+d.length;var c=d.readOID();switch(c){case"1.2.840.113549.1.1.1":d._offset=a;if(b==="public"){return(readPkcs8RSAPublic(d))}else{return(readPkcs8RSAPrivate(d))}case"1.2.840.10040.4.1":if(b==="public"){return(readPkcs8DSAPublic(d))}else{return(readPkcs8DSAPrivate(d))}case"1.2.840.10045.2.1":if(b==="public"){return(readPkcs8ECDSAPublic(d))}else{return(readPkcs8ECDSAPrivate(d))}case"1.3.101.112":if(b==="public"){return(readPkcs8EdDSAPublic(d))}else{return(readPkcs8EdDSAPrivate(d))}case"1.3.101.110":if(b==="public"){return(readPkcs8X25519Public(d))}else{return(readPkcs8X25519Private(d))}default:throw (new Error("Unknown key type OID "+c))}}function readPkcs8RSAPublic(b){b.readSequence(asn1.Ber.BitString);b.readByte();b.readSequence();var d=readMPInt(b,"modulus");var c=readMPInt(b,"exponent");var a={type:"rsa",source:b.originalInput,parts:[{name:"e",data:c},{name:"n",data:d}]};return(new Key(a))}function readPkcs8RSAPrivate(l){l.readSequence(asn1.Ber.OctetString);l.readSequence();var i=readMPInt(l,"version");assert.equal(i[0],0,"unknown RSA private key version");var c=readMPInt(l,"modulus");var j=readMPInt(l,"public exponent");var k=readMPInt(l,"private exponent");var b=readMPInt(l,"prime1");var a=readMPInt(l,"prime2");var g=readMPInt(l,"exponent1");var f=readMPInt(l,"exponent2");var h=readMPInt(l,"iqmp");var m={type:"rsa",parts:[{name:"n",data:c},{name:"e",data:j},{name:"d",data:k},{name:"iqmp",data:h},{name:"p",data:b},{name:"q",data:a},{name:"dmodp",data:g},{name:"dmodq",data:f}]};return(new PrivateKey(m))}function readPkcs8DSAPublic(c){c.readSequence();var e=readMPInt(c,"p");var d=readMPInt(c,"q");var b=readMPInt(c,"g");c.readSequence(asn1.Ber.BitString);c.readByte();var f=readMPInt(c,"y");var a={type:"dsa",parts:[{name:"p",data:e},{name:"q",data:d},{name:"g",data:b},{name:"y",data:f}]};return(new Key(a))}function readPkcs8DSAPrivate(d){d.readSequence();var f=readMPInt(d,"p");var e=readMPInt(d,"q");var c=readMPInt(d,"g");d.readSequence(asn1.Ber.OctetString);var a=readMPInt(d,"x");var h=utils.calculateDSAPublic(c,f,a);var b={type:"dsa",parts:[{name:"p",data:f},{name:"q",data:e},{name:"g",data:c},{name:"y",data:h},{name:"x",data:a}]};return(new PrivateKey(b))}function readECDSACurve(o){var m,g;var h,q,d;if(o.peek()===asn1.Ber.OID){var e=o.readOID();g=Object.keys(algs.curves);for(h=0;h<g.length;++h){q=g[h];d=algs.curves[q];if(d.pkcs8oid===e){m=q;break}}}else{o.readSequence();var n=o.readString(asn1.Ber.Integer,true);assert.strictEqual(n[0],1,"ECDSA key not version 1");var b={};o.readSequence();var t=o.readOID();assert.strictEqual(t,"1.2.840.10045.1.1","ECDSA key is not from a prime-field");var a=b.p=utils.mpNormalize(o.readString(asn1.Ber.Integer,true));b.size=a.length*8-utils.countZeros(a);o.readSequence();b.a=utils.mpNormalize(o.readString(asn1.Ber.OctetString,true));b.b=utils.mpNormalize(o.readString(asn1.Ber.OctetString,true));if(o.peek()===asn1.Ber.BitString){b.s=o.readString(asn1.Ber.BitString,true)}b.G=o.readString(asn1.Ber.OctetString,true);assert.strictEqual(b.G[0],4,"uncompressed G is required");b.n=utils.mpNormalize(o.readString(asn1.Ber.Integer,true));b.h=utils.mpNormalize(o.readString(asn1.Ber.Integer,true));assert.strictEqual(b.h[0],1,"a cofactor=1 curve is required");g=Object.keys(algs.curves);var s=Object.keys(b);for(h=0;h<g.length;++h){q=g[h];d=algs.curves[q];var r=true;for(var l=0;l<s.length;++l){var f=s[l];if(d[f]===undefined){continue}if(typeof(d[f])==="object"&&d[f].equals!==undefined){if(!d[f].equals(b[f])){r=false;break}}else{if(Buffer.isBuffer(d[f])){if(d[f].toString("binary")!==b[f].toString("binary")){r=false;break}}else{if(d[f]!==b[f]){r=false;break}}}}if(r){m=q;break}}}return(m)}function readPkcs8ECDSAPrivate(e){var f=readECDSACurve(e);assert.string(f,"a known elliptic curve");e.readSequence(asn1.Ber.OctetString);e.readSequence();var a=readMPInt(e,"version");assert.equal(a[0],1,"unknown version of ECDSA key");var g=e.readString(asn1.Ber.OctetString,true);e.readSequence(161);var c=e.readString(asn1.Ber.BitString,true);c=utils.ecNormalize(c);var b={type:"ecdsa",parts:[{name:"curve",data:new Buffer(f)},{name:"Q",data:c},{name:"d",data:g}]};return(new PrivateKey(b))}function readPkcs8ECDSAPublic(c){var d=readECDSACurve(c);assert.string(d,"a known elliptic curve");var b=c.readString(asn1.Ber.BitString,true);b=utils.ecNormalize(b);var a={type:"ecdsa",parts:[{name:"curve",data:new Buffer(d)},{name:"Q",data:b}]};return(new Key(a))}function readPkcs8EdDSAPublic(c){if(c.peek()===0){c.readByte()}var a=utils.readBitString(c);var b={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(a,32)}]};return(new Key(b))}function readPkcs8X25519Public(c){var a=utils.readBitString(c);var b={type:"curve25519",parts:[{name:"A",data:utils.zeroPadToLength(a,32)}]};return(new Key(b))}function readPkcs8EdDSAPrivate(d){if(d.peek()===0){d.readByte()}d.readSequence(asn1.Ber.OctetString);var b=d.readString(asn1.Ber.OctetString,true);b=utils.zeroPadToLength(b,32);var a;if(d.peek()===asn1.Ber.BitString){a=utils.readBitString(d);a=utils.zeroPadToLength(a,32)}else{a=utils.calculateED25519Public(b)}var c={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(a,32)},{name:"k",data:utils.zeroPadToLength(b,32)}]};return(new PrivateKey(c))}function readPkcs8X25519Private(d){if(d.peek()===0){d.readByte()}d.readSequence(asn1.Ber.OctetString);var b=d.readString(asn1.Ber.OctetString,true);b=utils.zeroPadToLength(b,32);var a=utils.calculateX25519Public(b);var c={type:"curve25519",parts:[{name:"A",data:utils.zeroPadToLength(a,32)},{name:"k",data:utils.zeroPadToLength(b,32)}]};return(new PrivateKey(c))}function writePkcs8(c,b){c.startSequence();if(PrivateKey.isPrivateKey(b)){var a=new Buffer(1);a[0]=0;c.writeBuffer(a,asn1.Ber.Integer)}c.startSequence();switch(b.type){case"rsa":c.writeOID("1.2.840.113549.1.1.1");if(PrivateKey.isPrivateKey(b)){writePkcs8RSAPrivate(b,c)}else{writePkcs8RSAPublic(b,c)}break;case"dsa":c.writeOID("1.2.840.10040.4.1");if(PrivateKey.isPrivateKey(b)){writePkcs8DSAPrivate(b,c)}else{writePkcs8DSAPublic(b,c)}break;case"ecdsa":c.writeOID("1.2.840.10045.2.1");if(PrivateKey.isPrivateKey(b)){writePkcs8ECDSAPrivate(b,c)}else{writePkcs8ECDSAPublic(b,c)}break;case"ed25519":c.writeOID("1.3.101.112");if(PrivateKey.isPrivateKey(b)){throw (new Error("Ed25519 private keys in pkcs8 format are not supported"))}writePkcs8EdDSAPublic(b,c);break;default:throw (new Error("Unsupported key type: "+b.type))}c.endSequence()}function writePkcs8RSAPrivate(b,c){c.writeNull();c.endSequence();c.startSequence(asn1.Ber.OctetString);c.startSequence();var a=new Buffer(1);a[0]=0;c.writeBuffer(a,asn1.Ber.Integer);c.writeBuffer(b.part.n.data,asn1.Ber.Integer);c.writeBuffer(b.part.e.data,asn1.Ber.Integer);c.writeBuffer(b.part.d.data,asn1.Ber.Integer);c.writeBuffer(b.part.p.data,asn1.Ber.Integer);c.writeBuffer(b.part.q.data,asn1.Ber.Integer);if(!b.part.dmodp||!b.part.dmodq){utils.addRSAMissing(b)}c.writeBuffer(b.part.dmodp.data,asn1.Ber.Integer);c.writeBuffer(b.part.dmodq.data,asn1.Ber.Integer);c.writeBuffer(b.part.iqmp.data,asn1.Ber.Integer);c.endSequence();c.endSequence()}function writePkcs8RSAPublic(a,b){b.writeNull();b.endSequence();b.startSequence(asn1.Ber.BitString);b.writeByte(0);b.startSequence();b.writeBuffer(a.part.n.data,asn1.Ber.Integer);b.writeBuffer(a.part.e.data,asn1.Ber.Integer);b.endSequence();b.endSequence()}function writePkcs8DSAPrivate(a,b){b.startSequence();b.writeBuffer(a.part.p.data,asn1.Ber.Integer);b.writeBuffer(a.part.q.data,asn1.Ber.Integer);b.writeBuffer(a.part.g.data,asn1.Ber.Integer);b.endSequence();b.endSequence();b.startSequence(asn1.Ber.OctetString);b.writeBuffer(a.part.x.data,asn1.Ber.Integer);b.endSequence()}function writePkcs8DSAPublic(a,b){b.startSequence();b.writeBuffer(a.part.p.data,asn1.Ber.Integer);b.writeBuffer(a.part.q.data,asn1.Ber.Integer);b.writeBuffer(a.part.g.data,asn1.Ber.Integer);b.endSequence();b.endSequence();b.startSequence(asn1.Ber.BitString);b.writeByte(0);b.writeBuffer(a.part.y.data,asn1.Ber.Integer);b.endSequence()}function writeECDSACurve(d,f){var g=algs.curves[d.curve];if(g.pkcs8oid){f.writeOID(g.pkcs8oid)}else{f.startSequence();var c=new Buffer(1);c.writeUInt8(1,0);f.writeBuffer(c,asn1.Ber.Integer);f.startSequence();f.writeOID("1.2.840.10045.1.1");f.writeBuffer(g.p,asn1.Ber.Integer);f.endSequence();f.startSequence();var b=g.p;if(b[0]===0){b=b.slice(1)}f.writeBuffer(b,asn1.Ber.OctetString);f.writeBuffer(g.b,asn1.Ber.OctetString);f.writeBuffer(g.s,asn1.Ber.BitString);f.endSequence();f.writeBuffer(g.G,asn1.Ber.OctetString);f.writeBuffer(g.n,asn1.Ber.Integer);var e=g.h;if(!e){e=new Buffer(1);e[0]=1}f.writeBuffer(e,asn1.Ber.Integer);f.endSequence()}}function writePkcs8ECDSAPublic(a,c){writeECDSACurve(a,c);c.endSequence();var b=utils.ecNormalize(a.part.Q.data,true);c.writeBuffer(b,asn1.Ber.BitString)}function writePkcs8ECDSAPrivate(b,d){writeECDSACurve(b,d);d.endSequence();d.startSequence(asn1.Ber.OctetString);d.startSequence();var a=new Buffer(1);a[0]=1;d.writeBuffer(a,asn1.Ber.Integer);d.writeBuffer(b.part.d.data,asn1.Ber.OctetString);d.startSequence(161);var c=utils.ecNormalize(b.part.Q.data,true);d.writeBuffer(c,asn1.Ber.BitString);d.endSequence();d.endSequence();d.endSequence()}function writePkcs8EdDSAPublic(a,b){b.endSequence();utils.writeBitString(b,a.part.A.data)}function writePkcs8EdDSAPrivate(b,c){c.endSequence();var a=utils.mpNormalize(b.part.k.data,true);c.startSequence(asn1.Ber.OctetString);c.writeBuffer(a,asn1.Ber.OctetString);c.endSequence()};