module.exports={read:read,readPkcs1:readPkcs1,write:write,writePkcs1:writePkcs1};var assert=require("assert-plus");var asn1=require("asn1");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pem=require("./pem");var pkcs8=require("./pkcs8");var readECDSACurve=pkcs8.readECDSACurve;function read(b,a){return(pem.read(b,a,"pkcs1"))}function write(b,a){return(pem.write(b,a,"pkcs1"))}function readMPInt(b,a){assert.strictEqual(b.peek(),asn1.Ber.Integer,a+" is not an Integer");return(utils.mpNormalize(b.readString(asn1.Ber.Integer,true)))}function readPkcs1(a,b,c){switch(a){case"RSA":if(b==="public"){return(readPkcs1RSAPublic(c))}else{if(b==="private"){return(readPkcs1RSAPrivate(c))}}throw (new Error("Unknown key type: "+b));case"DSA":if(b==="public"){return(readPkcs1DSAPublic(c))}else{if(b==="private"){return(readPkcs1DSAPrivate(c))}}throw (new Error("Unknown key type: "+b));case"EC":case"ECDSA":if(b==="private"){return(readPkcs1ECDSAPrivate(c))}else{if(b==="public"){return(readPkcs1ECDSAPublic(c))}}throw (new Error("Unknown key type: "+b));case"EDDSA":case"EdDSA":if(b==="private"){return(readPkcs1EdDSAPrivate(c))}throw (new Error(b+" keys not supported with EdDSA"));default:throw (new Error("Unknown key algo: "+a))}}function readPkcs1RSAPublic(d){var b=readMPInt(d,"modulus");var a=readMPInt(d,"exponent");var c={type:"rsa",parts:[{name:"e",data:a},{name:"n",data:b}]};return(new Key(c))}function readPkcs1RSAPrivate(h){var f=readMPInt(h,"version");assert.strictEqual(f[0],0);var l=readMPInt(h,"modulus");var c=readMPInt(h,"public exponent");var g=readMPInt(h,"private exponent");var k=readMPInt(h,"prime1");var j=readMPInt(h,"prime2");var a=readMPInt(h,"exponent1");var m=readMPInt(h,"exponent2");var b=readMPInt(h,"iqmp");var i={type:"rsa",parts:[{name:"n",data:l},{name:"e",data:c},{name:"d",data:g},{name:"iqmp",data:b},{name:"p",data:k},{name:"q",data:j},{name:"dmodp",data:a},{name:"dmodq",data:m}]};return(new PrivateKey(i))}function readPkcs1DSAPrivate(i){var e=readMPInt(i,"version");assert.strictEqual(e.readUInt8(0),0);var b=readMPInt(i,"p");var a=readMPInt(i,"q");var h=readMPInt(i,"g");var c=readMPInt(i,"y");var d=readMPInt(i,"x");var f={type:"dsa",parts:[{name:"p",data:b},{name:"q",data:a},{name:"g",data:h},{name:"y",data:c},{name:"x",data:d}]};return(new PrivateKey(f))}function readPkcs1EdDSAPrivate(d){var f=readMPInt(d,"version");assert.strictEqual(f.readUInt8(0),1);var a=d.readString(asn1.Ber.OctetString,true);d.readSequence(160);var c=d.readOID();assert.strictEqual(c,"1.3.101.112","the ed25519 curve identifier");d.readSequence(161);var e=utils.readBitString(d);var b={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(e,32)},{name:"k",data:a}]};return(new PrivateKey(b))}function readPkcs1DSAPublic(a){var d=readMPInt(a,"y");var c=readMPInt(a,"p");var b=readMPInt(a,"q");var f=readMPInt(a,"g");var e={type:"dsa",parts:[{name:"y",data:d},{name:"p",data:c},{name:"q",data:b},{name:"g",data:f}]};return(new Key(e))}function readPkcs1ECDSAPublic(f){f.readSequence();var a=f.readOID();assert.strictEqual(a,"1.2.840.10045.2.1","must be ecPublicKey");var d=f.readOID();var k;var i=Object.keys(algs.curves);for(var b=0;b<i.length;++b){var g=i[b];var l=algs.curves[g];if(l.pkcs8oid===d){k=g;break}}assert.string(k,"a known ECDSA named curve");var e=f.readString(asn1.Ber.BitString,true);e=utils.ecNormalize(e);var h={type:"ecdsa",parts:[{name:"curve",data:new Buffer(k)},{name:"Q",data:e}]};return(new Key(h))}function readPkcs1ECDSAPrivate(b){var f=readMPInt(b,"version");assert.strictEqual(f.readUInt8(0),1);var e=b.readString(asn1.Ber.OctetString,true);b.readSequence(160);var c=readECDSACurve(b);assert.string(c,"a known elliptic curve");b.readSequence(161);var a=b.readString(asn1.Ber.BitString,true);a=utils.ecNormalize(a);var g={type:"ecdsa",parts:[{name:"curve",data:new Buffer(c)},{name:"Q",data:a},{name:"d",data:e}]};return(new PrivateKey(g))}function writePkcs1(b,a){b.startSequence();switch(a.type){case"rsa":if(PrivateKey.isPrivateKey(a)){writePkcs1RSAPrivate(b,a)}else{writePkcs1RSAPublic(b,a)}break;case"dsa":if(PrivateKey.isPrivateKey(a)){writePkcs1DSAPrivate(b,a)}else{writePkcs1DSAPublic(b,a)}break;case"ecdsa":if(PrivateKey.isPrivateKey(a)){writePkcs1ECDSAPrivate(b,a)}else{writePkcs1ECDSAPublic(b,a)}break;case"ed25519":if(PrivateKey.isPrivateKey(a)){writePkcs1EdDSAPrivate(b,a)}else{writePkcs1EdDSAPublic(b,a)}break;default:throw (new Error("Unknown key algo: "+a.type))}b.endSequence()}function writePkcs1RSAPublic(b,a){b.writeBuffer(a.part.n.data,asn1.Ber.Integer);b.writeBuffer(a.part.e.data,asn1.Ber.Integer)}function writePkcs1RSAPrivate(a,c){var b=new Buffer(1);b[0]=0;a.writeBuffer(b,asn1.Ber.Integer);a.writeBuffer(c.part.n.data,asn1.Ber.Integer);a.writeBuffer(c.part.e.data,asn1.Ber.Integer);a.writeBuffer(c.part.d.data,asn1.Ber.Integer);a.writeBuffer(c.part.p.data,asn1.Ber.Integer);a.writeBuffer(c.part.q.data,asn1.Ber.Integer);if(!c.part.dmodp||!c.part.dmodq){utils.addRSAMissing(c)}a.writeBuffer(c.part.dmodp.data,asn1.Ber.Integer);a.writeBuffer(c.part.dmodq.data,asn1.Ber.Integer);a.writeBuffer(c.part.iqmp.data,asn1.Ber.Integer)}function writePkcs1DSAPrivate(a,c){var b=new Buffer(1);b[0]=0;a.writeBuffer(b,asn1.Ber.Integer);a.writeBuffer(c.part.p.data,asn1.Ber.Integer);a.writeBuffer(c.part.q.data,asn1.Ber.Integer);a.writeBuffer(c.part.g.data,asn1.Ber.Integer);a.writeBuffer(c.part.y.data,asn1.Ber.Integer);a.writeBuffer(c.part.x.data,asn1.Ber.Integer)}function writePkcs1DSAPublic(b,a){b.writeBuffer(a.part.y.data,asn1.Ber.Integer);b.writeBuffer(a.part.p.data,asn1.Ber.Integer);b.writeBuffer(a.part.q.data,asn1.Ber.Integer);b.writeBuffer(a.part.g.data,asn1.Ber.Integer)}function writePkcs1ECDSAPublic(b,d){b.startSequence();b.writeOID("1.2.840.10045.2.1");var c=d.part.curve.data.toString();var a=algs.curves[c].pkcs8oid;assert.string(a,"a known ECDSA named curve");b.writeOID(a);b.endSequence();var e=utils.ecNormalize(d.part.Q.data,true);b.writeBuffer(e,asn1.Ber.BitString)}function writePkcs1ECDSAPrivate(c,f){var e=new Buffer(1);e[0]=1;c.writeBuffer(e,asn1.Ber.Integer);c.writeBuffer(f.part.d.data,asn1.Ber.OctetString);c.startSequence(160);var d=f.part.curve.data.toString();var b=algs.curves[d].pkcs8oid;assert.string(b,"a known ECDSA named curve");c.writeOID(b);c.endSequence();c.startSequence(161);var a=utils.ecNormalize(f.part.Q.data,true);c.writeBuffer(a,asn1.Ber.BitString);c.endSequence()}function writePkcs1EdDSAPrivate(a,c){var b=new Buffer(1);b[0]=1;a.writeBuffer(b,asn1.Ber.Integer);a.writeBuffer(c.part.k.data,asn1.Ber.OctetString);a.startSequence(160);a.writeOID("1.3.101.112");a.endSequence();a.startSequence(161);utils.writeBitString(a,c.part.A.data);a.endSequence()}function writePkcs1EdDSAPublic(b,a){throw (new Error("Public keys are not supported for EdDSA PKCS#1"))};