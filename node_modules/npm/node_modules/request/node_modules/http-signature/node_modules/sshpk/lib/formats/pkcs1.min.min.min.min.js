module.exports={read:read,readPkcs1:readPkcs1,write:write,writePkcs1:writePkcs1};var assert=require("assert-plus");var asn1=require("asn1");var algs=require("../algs");var utils=require("../utils");var Key=require("../key");var PrivateKey=require("../private-key");var pem=require("./pem");var pkcs8=require("./pkcs8");var readECDSACurve=pkcs8.readECDSACurve;function read(c,d){return(pem.read(c,d,"pkcs1"))}function write(c,d){return(pem.write(c,d,"pkcs1"))}function readMPInt(c,d){assert.strictEqual(c.peek(),asn1.Ber.Integer,d+" is not an Integer");return(utils.mpNormalize(c.readString(asn1.Ber.Integer,true)))}function readPkcs1(e,d,f){switch(e){case"RSA":if(d==="public"){return(readPkcs1RSAPublic(f))}else{if(d==="private"){return(readPkcs1RSAPrivate(f))}}throw (new Error("Unknown key type: "+d));case"DSA":if(d==="public"){return(readPkcs1DSAPublic(f))}else{if(d==="private"){return(readPkcs1DSAPrivate(f))}}throw (new Error("Unknown key type: "+d));case"EC":case"ECDSA":if(d==="private"){return(readPkcs1ECDSAPrivate(f))}else{if(d==="public"){return(readPkcs1ECDSAPublic(f))}}throw (new Error("Unknown key type: "+d));case"EDDSA":case"EdDSA":if(d==="private"){return(readPkcs1EdDSAPrivate(f))}throw (new Error(d+" keys not supported with EdDSA"));default:throw (new Error("Unknown key algo: "+e))}}function readPkcs1RSAPublic(g){var e=readMPInt(g,"modulus");var f=readMPInt(g,"exponent");var h={type:"rsa",parts:[{name:"e",data:f},{name:"n",data:e}]};return(new Key(h))}function readPkcs1RSAPrivate(q){var s=readMPInt(q,"version");assert.strictEqual(s[0],0);var e=readMPInt(q,"modulus");var t=readMPInt(q,"public exponent");var r=readMPInt(q,"private exponent");var n=readMPInt(q,"prime1");var o=readMPInt(q,"prime2");var v=readMPInt(q,"exponent1");var d=readMPInt(q,"exponent2");var u=readMPInt(q,"iqmp");var p={type:"rsa",parts:[{name:"n",data:e},{name:"e",data:t},{name:"d",data:r},{name:"iqmp",data:u},{name:"p",data:n},{name:"q",data:o},{name:"dmodp",data:v},{name:"dmodq",data:d}]};return(new PrivateKey(p))}function readPkcs1DSAPrivate(k){var n=readMPInt(k,"version");assert.strictEqual(n.readUInt8(0),0);var g=readMPInt(k,"p");var j=readMPInt(k,"q");var l=readMPInt(k,"g");var p=readMPInt(k,"y");var o=readMPInt(k,"x");var m={type:"dsa",parts:[{name:"p",data:g},{name:"q",data:j},{name:"g",data:l},{name:"y",data:p},{name:"x",data:o}]};return(new PrivateKey(m))}function readPkcs1EdDSAPrivate(k){var i=readMPInt(k,"version");assert.strictEqual(i.readUInt8(0),1);var h=k.readString(asn1.Ber.OctetString,true);k.readSequence(160);var l=k.readOID();assert.strictEqual(l,"1.3.101.112","the ed25519 curve identifier");k.readSequence(161);var j=utils.readBitString(k);var g={type:"ed25519",parts:[{name:"A",data:utils.zeroPadToLength(j,32)},{name:"k",data:h}]};return(new PrivateKey(g))}function readPkcs1DSAPublic(h){var k=readMPInt(h,"y");var l=readMPInt(h,"p");var g=readMPInt(h,"q");var i=readMPInt(h,"g");var j={type:"dsa",parts:[{name:"y",data:k},{name:"p",data:l},{name:"q",data:g},{name:"g",data:i}]};return(new Key(j))}function readPkcs1ECDSAPublic(p){p.readSequence();var t=p.readOID();assert.strictEqual(t,"1.2.840.10045.2.1","must be ecPublicKey");var r=p.readOID();var j;var m=Object.keys(algs.curves);for(var s=0;s<m.length;++s){var o=m[s];var c=algs.curves[o];if(c.pkcs8oid===r){j=o;break}}assert.string(j,"a known ECDSA named curve");var q=p.readString(asn1.Ber.BitString,true);q=utils.ecNormalize(q);var n={type:"ecdsa",parts:[{name:"curve",data:new Buffer(j)},{name:"Q",data:q}]};return(new Key(n))}function readPkcs1ECDSAPrivate(d){var j=readMPInt(d,"version");assert.strictEqual(j.readUInt8(0),1);var k=d.readString(asn1.Ber.OctetString,true);d.readSequence(160);var l=readECDSACurve(d);assert.string(l,"a known elliptic curve");d.readSequence(161);var h=d.readString(asn1.Ber.BitString,true);h=utils.ecNormalize(h);var i={type:"ecdsa",parts:[{name:"curve",data:new Buffer(l)},{name:"Q",data:h},{name:"d",data:k}]};return(new PrivateKey(i))}function writePkcs1(c,d){c.startSequence();switch(d.type){case"rsa":if(PrivateKey.isPrivateKey(d)){writePkcs1RSAPrivate(c,d)}else{writePkcs1RSAPublic(c,d)}break;case"dsa":if(PrivateKey.isPrivateKey(d)){writePkcs1DSAPrivate(c,d)}else{writePkcs1DSAPublic(c,d)}break;case"ecdsa":if(PrivateKey.isPrivateKey(d)){writePkcs1ECDSAPrivate(c,d)}else{writePkcs1ECDSAPublic(c,d)}break;case"ed25519":if(PrivateKey.isPrivateKey(d)){writePkcs1EdDSAPrivate(c,d)}else{writePkcs1EdDSAPublic(c,d)}break;default:throw (new Error("Unknown key algo: "+d.type))}c.endSequence()}function writePkcs1RSAPublic(c,d){c.writeBuffer(d.part.n.data,asn1.Ber.Integer);c.writeBuffer(d.part.e.data,asn1.Ber.Integer)}function writePkcs1RSAPrivate(e,f){var d=new Buffer(1);d[0]=0;e.writeBuffer(d,asn1.Ber.Integer);e.writeBuffer(f.part.n.data,asn1.Ber.Integer);e.writeBuffer(f.part.e.data,asn1.Ber.Integer);e.writeBuffer(f.part.d.data,asn1.Ber.Integer);e.writeBuffer(f.part.p.data,asn1.Ber.Integer);e.writeBuffer(f.part.q.data,asn1.Ber.Integer);if(!f.part.dmodp||!f.part.dmodq){utils.addRSAMissing(f)}e.writeBuffer(f.part.dmodp.data,asn1.Ber.Integer);e.writeBuffer(f.part.dmodq.data,asn1.Ber.Integer);e.writeBuffer(f.part.iqmp.data,asn1.Ber.Integer)}function writePkcs1DSAPrivate(e,f){var d=new Buffer(1);d[0]=0;e.writeBuffer(d,asn1.Ber.Integer);e.writeBuffer(f.part.p.data,asn1.Ber.Integer);e.writeBuffer(f.part.q.data,asn1.Ber.Integer);e.writeBuffer(f.part.g.data,asn1.Ber.Integer);e.writeBuffer(f.part.y.data,asn1.Ber.Integer);e.writeBuffer(f.part.x.data,asn1.Ber.Integer)}function writePkcs1DSAPublic(c,d){c.writeBuffer(d.part.y.data,asn1.Ber.Integer);c.writeBuffer(d.part.p.data,asn1.Ber.Integer);c.writeBuffer(d.part.q.data,asn1.Ber.Integer);c.writeBuffer(d.part.g.data,asn1.Ber.Integer)}function writePkcs1ECDSAPublic(f,i){f.startSequence();f.writeOID("1.2.840.10045.2.1");var j=i.part.curve.data.toString();var g=algs.curves[j].pkcs8oid;assert.string(g,"a known ECDSA named curve");f.writeOID(g);f.endSequence();var h=utils.ecNormalize(i.part.Q.data,true);f.writeBuffer(h,asn1.Ber.BitString)}function writePkcs1ECDSAPrivate(l,i){var j=new Buffer(1);j[0]=1;l.writeBuffer(j,asn1.Ber.Integer);l.writeBuffer(i.part.d.data,asn1.Ber.OctetString);l.startSequence(160);var k=i.part.curve.data.toString();var g=algs.curves[k].pkcs8oid;assert.string(g,"a known ECDSA named curve");l.writeOID(g);l.endSequence();l.startSequence(161);var h=utils.ecNormalize(i.part.Q.data,true);l.writeBuffer(h,asn1.Ber.BitString);l.endSequence()}function writePkcs1EdDSAPrivate(e,f){var d=new Buffer(1);d[0]=1;e.writeBuffer(d,asn1.Ber.Integer);e.writeBuffer(f.part.k.data,asn1.Ber.OctetString);e.startSequence(160);e.writeOID("1.3.101.112");e.endSequence();e.startSequence(161);utils.writeBitString(e,f.part.A.data);e.endSequence()}function writePkcs1EdDSAPublic(c,d){throw (new Error("Public keys are not supported for EdDSA PKCS#1"))};