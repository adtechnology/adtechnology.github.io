var assert=require("assert-plus");var crypto=require("crypto");var sshpk=require("sshpk");var utils=require("./utils");var HASH_ALGOS=utils.HASH_ALGOS;var PK_ALGOS=utils.PK_ALGOS;var InvalidAlgorithmError=utils.InvalidAlgorithmError;var HttpSignatureError=utils.HttpSignatureError;var validateAlgorithm=utils.validateAlgorithm;module.exports={verifySignature:function verifySignature(a,c){assert.object(a,"parsedSignature");if(typeof(c)==="string"||Buffer.isBuffer(c)){c=sshpk.parseKey(c)}assert.ok(sshpk.Key.isKey(c,[1,1]),"pubkey must be a sshpk.Key");var d=validateAlgorithm(a.algorithm);if(d[0]==="hmac"||d[0]!==c.type){return(false)}var b=c.createVerify(d[1]);b.update(a.signingString);return(b.verify(a.params.signature,"base64"))},verifyHMAC:function verifyHMAC(b,c){assert.object(b,"parsedHMAC");assert.string(c,"secret");var g=validateAlgorithm(b.algorithm);if(g[0]!=="hmac"){return(false)}var a=g[1].toUpperCase();var f=crypto.createHmac(a,c);f.update(b.signingString);var e=crypto.createHmac(a,c);e.update(f.digest());e=e.digest();var d=crypto.createHmac(a,c);d.update(new Buffer(b.params.signature,"base64"));d=d.digest();if(typeof(e)==="string"){return(e===d)}if(Buffer.isBuffer(e)&&!e.equals){return(e.toString("binary")===d.toString("binary"))}return(e.equals(d))}};