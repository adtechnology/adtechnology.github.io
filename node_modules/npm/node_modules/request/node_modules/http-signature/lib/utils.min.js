var assert=require("assert-plus");var sshpk=require("sshpk");var util=require("util");var HASH_ALGOS={sha1:true,sha256:true,sha512:true};var PK_ALGOS={rsa:true,dsa:true,ecdsa:true};function HttpSignatureError(b,a){if(Error.captureStackTrace){Error.captureStackTrace(this,a||HttpSignatureError)}this.message=b;this.name=a.name}util.inherits(HttpSignatureError,Error);function InvalidAlgorithmError(a){HttpSignatureError.call(this,a,InvalidAlgorithmError)}util.inherits(InvalidAlgorithmError,HttpSignatureError);function validateAlgorithm(a){var b=a.toLowerCase().split("-");if(b.length!==2){throw (new InvalidAlgorithmError(b[0].toUpperCase()+" is not a valid algorithm"))}if(b[0]!=="hmac"&&!PK_ALGOS[b[0]]){throw (new InvalidAlgorithmError(b[0].toUpperCase()+" type keys are not supported"))}if(!HASH_ALGOS[b[1]]){throw (new InvalidAlgorithmError(b[1].toUpperCase()+" is not a supported hash algorithm"))}return(b)}module.exports={HASH_ALGOS:HASH_ALGOS,PK_ALGOS:PK_ALGOS,HttpSignatureError:HttpSignatureError,InvalidAlgorithmError:InvalidAlgorithmError,validateAlgorithm:validateAlgorithm,sshKeyToPEM:function sshKeyToPEM(b){assert.string(b,"ssh_key");var a=sshpk.parseKey(b,"ssh");return(a.toString("pem"))},fingerprint:function fingerprint(b){assert.string(b,"ssh_key");var a=sshpk.parseKey(b,"ssh");return(a.fingerprint("md5").toString("hex"))},pemToRsaSSHKey:function pemToRsaSSHKey(b,c){assert.equal("string",typeof(b),"typeof pem");var a=sshpk.parseKey(b,"pem");a.comment=c;return(a.toString("ssh"))}};