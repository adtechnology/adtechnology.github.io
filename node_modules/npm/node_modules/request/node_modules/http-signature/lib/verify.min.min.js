var assert=require("assert-plus");var crypto=require("crypto");var sshpk=require("sshpk");var utils=require("./utils");var HASH_ALGOS=utils.HASH_ALGOS;var PK_ALGOS=utils.PK_ALGOS;var InvalidAlgorithmError=utils.InvalidAlgorithmError;var HttpSignatureError=utils.HttpSignatureError;var validateAlgorithm=utils.validateAlgorithm;module.exports={verifySignature:function verifySignature(f,h){assert.object(f,"parsedSignature");if(typeof(h)==="string"||Buffer.isBuffer(h)){h=sshpk.parseKey(h)}assert.ok(sshpk.Key.isKey(h,[1,1]),"pubkey must be a sshpk.Key");var g=validateAlgorithm(f.algorithm);if(g[0]==="hmac"||g[0]!==h.type){return(false)}var e=h.createVerify(g[1]);e.update(f.signingString);return(e.verify(f.params.signature,"base64"))},verifyHMAC:function verifyHMAC(h,n){assert.object(h,"parsedHMAC");assert.string(n,"secret");var j=validateAlgorithm(h.algorithm);if(j[0]!=="hmac"){return(false)}var i=j[1].toUpperCase();var k=crypto.createHmac(i,n);k.update(h.signingString);var l=crypto.createHmac(i,n);l.update(k.digest());l=l.digest();var m=crypto.createHmac(i,n);m.update(new Buffer(h.params.signature,"base64"));m=m.digest();if(typeof(l)==="string"){return(l===m)}if(Buffer.isBuffer(l)&&!l.equals){return(l.toString("binary")===m.toString("binary"))}return(l.equals(m))}};