var assert=require("assert-plus");var sshpk=require("sshpk");var util=require("util");var HASH_ALGOS={sha1:true,sha256:true,sha512:true};var PK_ALGOS={rsa:true,dsa:true,ecdsa:true};function HttpSignatureError(c,d){if(Error.captureStackTrace){Error.captureStackTrace(this,d||HttpSignatureError)}this.message=c;this.name=d.name}util.inherits(HttpSignatureError,Error);function InvalidAlgorithmError(b){HttpSignatureError.call(this,b,InvalidAlgorithmError)}util.inherits(InvalidAlgorithmError,HttpSignatureError);function validateAlgorithm(d){var c=d.toLowerCase().split("-");if(c.length!==2){throw (new InvalidAlgorithmError(c[0].toUpperCase()+" is not a valid algorithm"))}if(c[0]!=="hmac"&&!PK_ALGOS[c[0]]){throw (new InvalidAlgorithmError(c[0].toUpperCase()+" type keys are not supported"))}if(!HASH_ALGOS[c[1]]){throw (new InvalidAlgorithmError(c[1].toUpperCase()+" is not a supported hash algorithm"))}return(c)}module.exports={HASH_ALGOS:HASH_ALGOS,PK_ALGOS:PK_ALGOS,HttpSignatureError:HttpSignatureError,InvalidAlgorithmError:InvalidAlgorithmError,validateAlgorithm:validateAlgorithm,sshKeyToPEM:function sshKeyToPEM(c){assert.string(c,"ssh_key");var d=sshpk.parseKey(c,"ssh");return(d.toString("pem"))},fingerprint:function fingerprint(c){assert.string(c,"ssh_key");var d=sshpk.parseKey(c,"ssh");return(d.fingerprint("md5").toString("hex"))},pemToRsaSSHKey:function pemToRsaSSHKey(d,f){assert.equal("string",typeof(d),"typeof pem");var e=sshpk.parseKey(d,"pem");e.comment=f;return(e.toString("ssh"))}};