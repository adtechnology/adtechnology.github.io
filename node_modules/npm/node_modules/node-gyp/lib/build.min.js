module.exports=exports=build;var fs=require("graceful-fs"),rm=require("rimraf"),path=require("path"),glob=require("glob"),log=require("npmlog"),which=require("which"),exec=require("child_process").exec,processRelease=require("./process-release"),win=process.platform==="win32";exports.usage="Invokes `"+(win?"msbuild":"make")+"` and builds the module";function build(p,a,f){var q="make";if(process.platform==="aix"){q="gmake"}else{if(process.platform.indexOf("bsd")!==-1){q="gmake"}}var r=processRelease(a,p,process.version,process.release),o=p.opts.make||process.env.MAKE||q,e=win?"msbuild":o,m=path.resolve("build"),j=path.resolve(m,"config.gypi"),b=p.opts.jobs||process.env.JOBS,l,s,t,n;g();function g(){fs.readFile(j,"utf8",function(u,v){if(u){if(u.code=="ENOENT"){f(new Error("You must run `node-gyp configure` first!"))}else{f(u)}return}s=JSON.parse(v.replace(/\#.+\n/,""));l=s.target_defaults.default_configuration;t=s.variables.target_arch;n=s.variables.nodedir;if("debug" in p.opts){l=p.opts.debug?"Debug":"Release"}if(!l){l="Release"}log.verbose("build type",l);log.verbose("architecture",t);log.verbose("node dev dir",n);if(win){c()}else{i()}})}function c(){glob("build/*.sln",function(v,u){if(v){return f(v)}if(u.length===0){return f(new Error('Could not find *.sln file. Did you run "configure"?'))}guessedSolution=u[0];log.verbose("found first Solution file",guessedSolution);i()})}function i(){which(e,function(u,v){if(u){if(win&&/not found/.test(u.message)){d()}else{f(u)}return}log.verbose("`which` succeeded for `"+e+"`",v);k()})}function d(){if(s.variables.msbuild_path){e=s.variables.msbuild_path;log.verbose("using MSBuild:",e);k();return}log.verbose('could not find "msbuild.exe" in PATH - finding location in registry');var v='Can\'t find "msbuild.exe". Do you have Microsoft Visual Studio C++ 2008+ installed?';var u='reg query "HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions" /s';if(process.arch!=="ia32"){u+=" /reg:32"}exec(u,function(A,C,B){if(A){return f(new Error(A.message+"\n"+v))}var w=/ToolsVersions\\([^\\]+)$/i,D=/\r\n[ \t]+MSBuildToolsPath[ \t]+REG_SZ[ \t]+([^\r]+)/i,x=[],y,E;C.split("\r\n\r\n").forEach(function(G){if(!G){return}G=G.trim();if(y=w.exec(G.substring(0,G.indexOf("\r\n")))){var F=parseFloat(y[1],10);if(F>=3.5){if(y=D.exec(G)){x.push({version:F,path:y[1]})}}}});x.sort(function(F,G){return(F.version<G.version?-1:1)});(function z(){if(!x.length){return f(new Error(v))}E=path.resolve(x.pop().path,"msbuild.exe");fs.stat(E,function(G,F){if(G){if(G.code=="ENOENT"){if(x.length){return z()}else{f(new Error(v))}}else{f(G)}return}e=E;k()})})()})}function k(){var w=log.levels[log.level]<=log.levels.verbose;if(!win&&w){a.push("V=1")}if(win&&!w){a.push("/clp:Verbosity=minimal")}if(win){a.push("/nologo")}if(win){var v=t.toLowerCase();var z=v==="x64"?"x64":(v==="arm"?"ARM":"Win32");a.push("/p:Configuration="+l+";Platform="+z);if(b){var x=parseInt(b,10);if(!isNaN(x)&&x>0){a.push("/m:"+x)}else{if(b.toUpperCase()==="MAX"){a.push("/m:"+require("os").cpus().length)}}}}else{a.push("BUILDTYPE="+l);a.push("-C");a.push("build");if(b){var x=parseInt(b,10);if(!isNaN(x)&&x>0){a.push("--jobs");a.push(x)}else{if(b.toUpperCase()==="MAX"){a.push("--jobs");a.push(require("os").cpus().length)}}}}if(win){var y=a.some(function(A){return path.extname(A)==".sln"});if(!y){a.unshift(p.opts.solution||guessedSolution)}}var u=p.spawn(e,a);u.on("exit",h)}function h(u,v){if(u!==0){return f(new Error("`"+e+"` failed with exit code: "+u))}if(v){return f(new Error("`"+e+"` got signal: "+v))}f()}};