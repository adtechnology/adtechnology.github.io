"use strict";(function(){var o=function(I){var K=true;for(var J=0;J<I.length;J++){if(K&&I[J] instanceof AST_Statement&&I[J].body instanceof AST_String){I[J]=new AST_Directive({start:I[J].start,end:I[J].end,value:I[J].body.value})}else{if(K&&!(I[J] instanceof AST_Statement&&I[J].body instanceof AST_String)){K=false}}}return I};var k={Program:function(I){return new AST_Toplevel({start:b(I),end:i(I),body:o(I.body.map(c))})},FunctionDeclaration:function(I){return new AST_Defun({start:b(I),end:i(I),name:c(I.id),argnames:I.params.map(c),body:o(c(I.body).body)})},FunctionExpression:function(I){return new AST_Function({start:b(I),end:i(I),name:c(I.id),argnames:I.params.map(c),body:o(c(I.body).body)})},ExpressionStatement:function(I){return new AST_SimpleStatement({start:b(I),end:i(I),body:c(I.expression)})},TryStatement:function(J){var I=J.handlers||[J.handler];if(I.length>1||J.guardedHandlers&&J.guardedHandlers.length){throw new Error("Multiple catch clauses are not supported.")}return new AST_Try({start:b(J),end:i(J),body:c(J.block).body,bcatch:c(I[0]),bfinally:J.finalizer?new AST_Finally(c(J.finalizer)):null})},Property:function(K){var J=K.key;var I={start:b(J),end:i(K.value),key:J.type=="Identifier"?J.name:J.value,value:c(K.value)};if(K.kind=="init"){return new AST_ObjectKeyVal(I)}I.key=new AST_SymbolAccessor({name:I.key});I.value=new AST_Accessor(I.value);if(K.kind=="get"){return new AST_ObjectGetter(I)}if(K.kind=="set"){return new AST_ObjectSetter(I)}},ArrayExpression:function(I){return new AST_Array({start:b(I),end:i(I),elements:I.elements.map(function(J){return J===null?new AST_Hole():c(J)})})},ObjectExpression:function(I){return new AST_Object({start:b(I),end:i(I),properties:I.properties.map(function(J){J.type="Property";return c(J)})})},SequenceExpression:function(I){return new AST_Sequence({start:b(I),end:i(I),expressions:I.expressions.map(c)})},MemberExpression:function(I){return new (I.computed?AST_Sub:AST_Dot)({start:b(I),end:i(I),property:I.computed?c(I.property):I.property.name,expression:c(I.object)})},SwitchCase:function(I){return new (I.test?AST_Case:AST_Default)({start:b(I),end:i(I),expression:c(I.test),body:I.consequent.map(c)})},VariableDeclaration:function(I){return new AST_Var({start:b(I),end:i(I),definitions:I.declarations.map(c)})},Literal:function(L){var K=L.value,I={start:b(L),end:i(L)};if(K===null){return new AST_Null(I)}var J=L.regex;if(J&&J.pattern){I.value=new RegExp(J.pattern,J.flags);I.value.raw_source=J.pattern;return new AST_RegExp(I)}else{if(J){I.value=L.regex&&L.raw?L.raw:K;return new AST_RegExp(I)}}switch(typeof K){case"string":I.value=K;return new AST_String(I);case"number":I.value=K;return new AST_Number(I);case"boolean":return new (K?AST_True:AST_False)(I)}},Identifier:function(J){var I=s[s.length-2];return new (I.type=="LabeledStatement"?AST_Label:I.type=="VariableDeclarator"&&I.id===J?AST_SymbolVar:I.type=="FunctionExpression"?(I.id===J?AST_SymbolLambda:AST_SymbolFunarg):I.type=="FunctionDeclaration"?(I.id===J?AST_SymbolDefun:AST_SymbolFunarg):I.type=="CatchClause"?AST_SymbolCatch:I.type=="BreakStatement"||I.type=="ContinueStatement"?AST_LabelRef:AST_SymbolRef)({start:b(J),end:i(J),name:J.name})}};k.UpdateExpression=k.UnaryExpression=function d(J){var I="prefix" in J?J.prefix:J.type=="UnaryExpression"?true:false;return new (I?AST_UnaryPrefix:AST_UnaryPostfix)({start:b(J),end:i(J),operator:J.operator,expression:c(J.argument)})};F("EmptyStatement",AST_EmptyStatement);F("BlockStatement",AST_BlockStatement,"body@body");F("IfStatement",AST_If,"test>condition, consequent>body, alternate>alternative");F("LabeledStatement",AST_LabeledStatement,"label>label, body>body");F("BreakStatement",AST_Break,"label>label");F("ContinueStatement",AST_Continue,"label>label");F("WithStatement",AST_With,"object>expression, body>body");F("SwitchStatement",AST_Switch,"discriminant>expression, cases@body");F("ReturnStatement",AST_Return,"argument>value");F("ThrowStatement",AST_Throw,"argument>value");F("WhileStatement",AST_While,"test>condition, body>body");F("DoWhileStatement",AST_Do,"test>condition, body>body");F("ForStatement",AST_For,"init>init, test>condition, update>step, body>body");F("ForInStatement",AST_ForIn,"left>init, right>object, body>body");F("DebuggerStatement",AST_Debugger);F("VariableDeclarator",AST_VarDef,"id>name, init>value");F("CatchClause",AST_Catch,"param>argname, body%body");F("ThisExpression",AST_This);F("BinaryExpression",AST_Binary,"operator=operator, left>left, right>right");F("LogicalExpression",AST_Binary,"operator=operator, left>left, right>right");F("AssignmentExpression",AST_Assign,"operator=operator, left>left, right>right");F("ConditionalExpression",AST_Conditional,"test>condition, consequent>consequent, alternate>alternative");F("NewExpression",AST_New,"callee>expression, arguments@args");F("CallExpression",AST_Call,"callee>expression, arguments@args");h(AST_Toplevel,function C(I){return w("Program",I)});h(AST_Defun,function E(I){return{type:"FunctionDeclaration",id:q(I.name),params:I.argnames.map(q),body:w("BlockStatement",I)}});h(AST_Function,function l(I){return{type:"FunctionExpression",id:q(I.name),params:I.argnames.map(q),body:w("BlockStatement",I)}});h(AST_Directive,function n(I){return{type:"ExpressionStatement",expression:{type:"Literal",value:I.value}}});h(AST_SimpleStatement,function j(I){return{type:"ExpressionStatement",expression:q(I.body)}});h(AST_SwitchBranch,function p(I){return{type:"SwitchCase",test:q(I.expression),consequent:I.body.map(q)}});h(AST_Try,function r(I){return{type:"TryStatement",block:G(I),handler:q(I.bcatch),guardedHandlers:[],finalizer:q(I.bfinally)}});h(AST_Catch,function B(I){return{type:"CatchClause",param:q(I.argname),guard:null,body:G(I)}});h(AST_Definitions,function e(I){return{type:"VariableDeclaration",kind:"var",declarations:I.definitions.map(q)}});h(AST_Sequence,function m(I){return{type:"SequenceExpression",expressions:I.expressions.map(q)}});h(AST_PropAccess,function u(J){var I=J instanceof AST_Sub;return{type:"MemberExpression",object:q(J.expression),computed:I,property:I?q(J.property):{type:"Identifier",name:J.property}}});h(AST_Unary,function d(I){return{type:I.operator=="++"||I.operator=="--"?"UpdateExpression":"UnaryExpression",operator:I.operator,prefix:I instanceof AST_UnaryPrefix,argument:q(I.expression)}});h(AST_Binary,function g(I){return{type:I.operator=="&&"||I.operator=="||"?"LogicalExpression":"BinaryExpression",left:q(I.left),operator:I.operator,right:q(I.right)}});h(AST_Array,function f(I){return{type:"ArrayExpression",elements:I.elements.map(q)}});h(AST_Object,function v(I){return{type:"ObjectExpression",properties:I.properties.map(q)}});h(AST_ObjectProperty,function a(K){var I={type:"Literal",value:K.key instanceof AST_SymbolAccessor?K.key.name:K.key};var J;if(K instanceof AST_ObjectKeyVal){J="init"}else{if(K instanceof AST_ObjectGetter){J="get"}else{if(K instanceof AST_ObjectSetter){J="set"}}}return{type:"Property",kind:J,key:I,value:q(K.value)}});h(AST_Symbol,function D(J){var I=J.definition();return{type:"Identifier",name:I?I.mangled_name||I.name:J.name}});h(AST_RegExp,function A(K){var I=K.value.toString().match(/[gimuy]*$/)[0];var J="/"+K.value.raw_source+"/"+I;return{type:"Literal",value:J,raw:J,regex:{pattern:K.value.raw_source,flags:I}}});h(AST_Constant,function y(J){var I=J.value;if(typeof I==="number"&&(I<0||(I===0&&1/I<0))){return{type:"UnaryExpression",operator:"-",prefix:true,argument:{type:"Literal",value:-I,raw:J.start.raw}}}return{type:"Literal",value:I,raw:J.start.raw}});h(AST_Atom,function z(I){return{type:"Identifier",name:String(I.value)}});AST_Boolean.DEFMETHOD("to_mozilla_ast",AST_Constant.prototype.to_mozilla_ast);AST_Null.DEFMETHOD("to_mozilla_ast",AST_Constant.prototype.to_mozilla_ast);AST_Hole.DEFMETHOD("to_mozilla_ast",function x(){return null});AST_Block.DEFMETHOD("to_mozilla_ast",AST_BlockStatement.prototype.to_mozilla_ast);AST_Lambda.DEFMETHOD("to_mozilla_ast",AST_Function.prototype.to_mozilla_ast);function H(I){if(I.type=="Literal"){return I.raw!=null?I.raw:I.value+""}}function b(J){var K=J.loc,L=K&&K.start;var I=J.range;return new AST_Token({file:K&&K.source,line:L&&L.line,col:L&&L.column,pos:I?I[0]:J.start,endline:L&&L.line,endcol:L&&L.column,endpos:I?I[0]:J.start,raw:H(J)})}function i(K){var L=K.loc,I=L&&L.end;var J=K.range;return new AST_Token({file:L&&L.source,line:I&&I.line,col:I&&I.column,pos:J?J[1]:K.end,endline:I&&I.line,endcol:I&&I.column,endpos:J?J[1]:K.end,raw:H(K)})}function F(I,L,J){var K="function From_Moz_"+I+"(M){\n";K+="return new U2."+L.name+"({\nstart: my_start_token(M),\nend: my_end_token(M)";var M="function To_Moz_"+I+"(M){\n";M+="return {\ntype: "+JSON.stringify(I);if(J){J.split(/\s*,\s*/).forEach(function(R){var N=/([a-z0-9$_]+)(=|@|>|%)([a-z0-9$_]+)/i.exec(R);if(!N){throw new Error("Can't understand property map: "+R)}var O=N[1],P=N[2],Q=N[3];K+=",\n"+Q+": ";M+=",\n"+O+": ";switch(P){case"@":K+="M."+O+".map(from_moz)";M+="M."+Q+".map(to_moz)";break;case">":K+="from_moz(M."+O+")";M+="to_moz(M."+Q+")";break;case"=":K+="M."+O;M+="M."+Q;break;case"%":K+="from_moz(M."+O+").body";M+="to_moz_block(M)";break;default:throw new Error("Can't understand operator in propmap: "+R)}})}K+="\n})\n}";M+="\n}\n}";K=new Function("U2","my_start_token","my_end_token","from_moz","return("+K+")")(exports,b,i,c);M=new Function("to_moz","to_moz_block","to_moz_scope","return("+M+")")(q,G,w);k[I]=K;h(L,M)}var s=null;function c(J){s.push(J);var I=J!=null?k[J.type](J):null;s.pop();return I}AST_Node.from_mozilla_ast=function(J){var K=s;s=[];var I=c(J);s=K;I.walk(new TreeWalker(function(N){if(N instanceof AST_LabelRef){for(var O=0,M;M=this.parent(O);O++){if(M instanceof AST_Scope){break}if(M instanceof AST_LabeledStatement&&M.label.name==N.name){N.thedef=M.label;break}}if(!N.thedef){var L=N.start;js_error("Undefined label "+N.name,L.file,L.line,L.col,L.pos)}}}));return I};function t(K,J,M){var L=K.start;var I=K.end;if(L.pos!=null&&I.endpos!=null){J.range=[L.pos,I.endpos]}if(L.line){J.loc={start:{line:L.line,column:L.col},end:I.endline?{line:I.endline,column:I.endcol}:null};if(L.file){J.loc.source=L.file}}return J}function h(J,I){J.DEFMETHOD("to_mozilla_ast",function(){return t(this,I(this))})}function q(I){return I!=null?I.to_mozilla_ast():null}function G(I){return{type:"BlockStatement",body:I.body.map(q)}}function w(J,K){var I=K.body.map(q);if(K.body[0] instanceof AST_SimpleStatement&&K.body[0].body instanceof AST_String){I.unshift(q(new AST_EmptyStatement(K.body[0])))}return{type:J,body:I}}})();